
STM32f103C6_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006b4  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080007e4  080007e4  000017e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080007f4  080007f4  000017fc  2**0
                  CONTENTS
  4 .ARM          00000000  080007f4  080007f4  000017fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007f4  080007fc  000017fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007f4  080007f4  000017f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080007f8  080007f8  000017f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000017fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  20000000  080007fc  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  080007fc  0000204c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000017fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000111b  00000000  00000000  00001825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003ba  00000000  00000000  00002940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000a30  00000000  00000000  00002cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000170  00000000  00000000  00003730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000138  00000000  00000000  000038a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000021d8  00000000  00000000  000039d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000196f  00000000  00000000  00005bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000084f1  00000000  00000000  0000751f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000fa10  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004f4  00000000  00000000  0000fa54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080007cc 	.word	0x080007cc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080007cc 	.word	0x080007cc

08000170 <delay>:

// Function to create a delay in microseconds


void delay(uint32_t delay)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    for(uint32_t i = 0; i < delay ; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <delay+0x26>
    {
	 for(uint32_t i = 0; i < 255 ; i++)
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <delay+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	@ 0xfe
 800018e:	d9f9      	bls.n	8000184 <delay+0x14>
    for(uint32_t i = 0; i < delay ; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <delay+0xe>
	    {

	    }
    }
}
 800019e:	bf00      	nop
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
	...

080001ac <Get_CRLH_Position>:


uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80001ac:	b480      	push	{r7}
 80001ae:	b083      	sub	sp, #12
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	4603      	mov	r3, r0
 80001b4:	80fb      	strh	r3, [r7, #6]
    switch (PinNumber)
 80001b6:	88fb      	ldrh	r3, [r7, #6]
 80001b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80001bc:	f000 80a5 	beq.w	800030a <Get_CRLH_Position+0x15e>
 80001c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80001c4:	f300 80a3 	bgt.w	800030e <Get_CRLH_Position+0x162>
 80001c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80001cc:	f000 809b 	beq.w	8000306 <Get_CRLH_Position+0x15a>
 80001d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80001d4:	f300 809b 	bgt.w	800030e <Get_CRLH_Position+0x162>
 80001d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80001dc:	f000 8091 	beq.w	8000302 <Get_CRLH_Position+0x156>
 80001e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80001e4:	f300 8093 	bgt.w	800030e <Get_CRLH_Position+0x162>
 80001e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80001ec:	f000 8087 	beq.w	80002fe <Get_CRLH_Position+0x152>
 80001f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80001f4:	f300 808b 	bgt.w	800030e <Get_CRLH_Position+0x162>
 80001f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80001fc:	d07d      	beq.n	80002fa <Get_CRLH_Position+0x14e>
 80001fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000202:	f300 8084 	bgt.w	800030e <Get_CRLH_Position+0x162>
 8000206:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800020a:	d074      	beq.n	80002f6 <Get_CRLH_Position+0x14a>
 800020c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000210:	dc7d      	bgt.n	800030e <Get_CRLH_Position+0x162>
 8000212:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000216:	d06c      	beq.n	80002f2 <Get_CRLH_Position+0x146>
 8000218:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800021c:	dc77      	bgt.n	800030e <Get_CRLH_Position+0x162>
 800021e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000222:	d064      	beq.n	80002ee <Get_CRLH_Position+0x142>
 8000224:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000228:	dc71      	bgt.n	800030e <Get_CRLH_Position+0x162>
 800022a:	2b80      	cmp	r3, #128	@ 0x80
 800022c:	d05d      	beq.n	80002ea <Get_CRLH_Position+0x13e>
 800022e:	2b80      	cmp	r3, #128	@ 0x80
 8000230:	dc6d      	bgt.n	800030e <Get_CRLH_Position+0x162>
 8000232:	2b20      	cmp	r3, #32
 8000234:	dc48      	bgt.n	80002c8 <Get_CRLH_Position+0x11c>
 8000236:	2b00      	cmp	r3, #0
 8000238:	dd69      	ble.n	800030e <Get_CRLH_Position+0x162>
 800023a:	3b01      	subs	r3, #1
 800023c:	2b1f      	cmp	r3, #31
 800023e:	d866      	bhi.n	800030e <Get_CRLH_Position+0x162>
 8000240:	a201      	add	r2, pc, #4	@ (adr r2, 8000248 <Get_CRLH_Position+0x9c>)
 8000242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000246:	bf00      	nop
 8000248:	080002cf 	.word	0x080002cf
 800024c:	080002d3 	.word	0x080002d3
 8000250:	0800030f 	.word	0x0800030f
 8000254:	080002d7 	.word	0x080002d7
 8000258:	0800030f 	.word	0x0800030f
 800025c:	0800030f 	.word	0x0800030f
 8000260:	0800030f 	.word	0x0800030f
 8000264:	080002db 	.word	0x080002db
 8000268:	0800030f 	.word	0x0800030f
 800026c:	0800030f 	.word	0x0800030f
 8000270:	0800030f 	.word	0x0800030f
 8000274:	0800030f 	.word	0x0800030f
 8000278:	0800030f 	.word	0x0800030f
 800027c:	0800030f 	.word	0x0800030f
 8000280:	0800030f 	.word	0x0800030f
 8000284:	080002df 	.word	0x080002df
 8000288:	0800030f 	.word	0x0800030f
 800028c:	0800030f 	.word	0x0800030f
 8000290:	0800030f 	.word	0x0800030f
 8000294:	0800030f 	.word	0x0800030f
 8000298:	0800030f 	.word	0x0800030f
 800029c:	0800030f 	.word	0x0800030f
 80002a0:	0800030f 	.word	0x0800030f
 80002a4:	0800030f 	.word	0x0800030f
 80002a8:	0800030f 	.word	0x0800030f
 80002ac:	0800030f 	.word	0x0800030f
 80002b0:	0800030f 	.word	0x0800030f
 80002b4:	0800030f 	.word	0x0800030f
 80002b8:	0800030f 	.word	0x0800030f
 80002bc:	0800030f 	.word	0x0800030f
 80002c0:	0800030f 	.word	0x0800030f
 80002c4:	080002e3 	.word	0x080002e3
 80002c8:	2b40      	cmp	r3, #64	@ 0x40
 80002ca:	d00c      	beq.n	80002e6 <Get_CRLH_Position+0x13a>
    case GPIO_PIN_14:
        return 24;
    case GPIO_PIN_15:
        return 28;
    default:
        break;
 80002cc:	e01f      	b.n	800030e <Get_CRLH_Position+0x162>
        return 0;
 80002ce:	2300      	movs	r3, #0
 80002d0:	e01f      	b.n	8000312 <Get_CRLH_Position+0x166>
        return 4;
 80002d2:	2304      	movs	r3, #4
 80002d4:	e01d      	b.n	8000312 <Get_CRLH_Position+0x166>
        return 8;
 80002d6:	2308      	movs	r3, #8
 80002d8:	e01b      	b.n	8000312 <Get_CRLH_Position+0x166>
        return 12;
 80002da:	230c      	movs	r3, #12
 80002dc:	e019      	b.n	8000312 <Get_CRLH_Position+0x166>
        return 16;
 80002de:	2310      	movs	r3, #16
 80002e0:	e017      	b.n	8000312 <Get_CRLH_Position+0x166>
        return 20;
 80002e2:	2314      	movs	r3, #20
 80002e4:	e015      	b.n	8000312 <Get_CRLH_Position+0x166>
        return 24;
 80002e6:	2318      	movs	r3, #24
 80002e8:	e013      	b.n	8000312 <Get_CRLH_Position+0x166>
        return 28;
 80002ea:	231c      	movs	r3, #28
 80002ec:	e011      	b.n	8000312 <Get_CRLH_Position+0x166>
        return 0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	e00f      	b.n	8000312 <Get_CRLH_Position+0x166>
        return 4;
 80002f2:	2304      	movs	r3, #4
 80002f4:	e00d      	b.n	8000312 <Get_CRLH_Position+0x166>
        return 8;
 80002f6:	2308      	movs	r3, #8
 80002f8:	e00b      	b.n	8000312 <Get_CRLH_Position+0x166>
        return 12;
 80002fa:	230c      	movs	r3, #12
 80002fc:	e009      	b.n	8000312 <Get_CRLH_Position+0x166>
        return 16;
 80002fe:	2310      	movs	r3, #16
 8000300:	e007      	b.n	8000312 <Get_CRLH_Position+0x166>
        return 20;
 8000302:	2314      	movs	r3, #20
 8000304:	e005      	b.n	8000312 <Get_CRLH_Position+0x166>
        return 24;
 8000306:	2318      	movs	r3, #24
 8000308:	e003      	b.n	8000312 <Get_CRLH_Position+0x166>
        return 28;
 800030a:	231c      	movs	r3, #28
 800030c:	e001      	b.n	8000312 <Get_CRLH_Position+0x166>
        break;
 800030e:	bf00      	nop
    }
    return -1;
 8000310:	23ff      	movs	r3, #255	@ 0xff
}
 8000312:	4618      	mov	r0, r3
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr

0800031c <MCAL_GPIO_Init>:
 *
 * This function initializes the GPIO pin(s) based on the configuration provided
 * in the GPIO_PinConfig_t structure.
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 800031c:	b590      	push	{r4, r7, lr}
 800031e:	b085      	sub	sp, #20
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	6039      	str	r1, [r7, #0]
    uint8_t PIN_CONFIG = 0; // Variable to store pin configuration
 8000326:	2300      	movs	r3, #0
 8000328:	73fb      	strb	r3, [r7, #15]
    volatile uint32_t *configregister = NULL; // Pointer to the configuration register
 800032a:	2300      	movs	r3, #0
 800032c:	60bb      	str	r3, [r7, #8]

    // Determine whether to use CRL or CRH register based on pin number
    configregister = (PinConfig->GPIO_PinNumber < 8) ? &GPIOx->CRL : &GPIOx->CRH;
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	881b      	ldrh	r3, [r3, #0]
 8000332:	2b07      	cmp	r3, #7
 8000334:	d801      	bhi.n	800033a <MCAL_GPIO_Init+0x1e>
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	e001      	b.n	800033e <MCAL_GPIO_Init+0x22>
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	3304      	adds	r3, #4
 800033e:	60bb      	str	r3, [r7, #8]

    // Clear the configuration bits for the specified pin
    *configregister &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	881b      	ldrh	r3, [r3, #0]
 8000344:	4618      	mov	r0, r3
 8000346:	f7ff ff31 	bl	80001ac <Get_CRLH_Position>
 800034a:	4603      	mov	r3, r0
 800034c:	461a      	mov	r2, r3
 800034e:	230f      	movs	r3, #15
 8000350:	4093      	lsls	r3, r2
 8000352:	43da      	mvns	r2, r3
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	401a      	ands	r2, r3
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	601a      	str	r2, [r3, #0]

    // Configure pin mode and speed
    if ((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	789b      	ldrb	r3, [r3, #2]
 8000362:	2b07      	cmp	r3, #7
 8000364:	d00b      	beq.n	800037e <MCAL_GPIO_Init+0x62>
        || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	789b      	ldrb	r3, [r3, #2]
 800036a:	2b06      	cmp	r3, #6
 800036c:	d007      	beq.n	800037e <MCAL_GPIO_Init+0x62>
        || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	789b      	ldrb	r3, [r3, #2]
 8000372:	2b05      	cmp	r3, #5
 8000374:	d003      	beq.n	800037e <MCAL_GPIO_Init+0x62>
        || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	789b      	ldrb	r3, [r3, #2]
 800037a:	2b04      	cmp	r3, #4
 800037c:	d10e      	bne.n	800039c <MCAL_GPIO_Init+0x80>
    {
        // Calculate pin configuration for output modes
        PIN_CONFIG = (((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_Speed)) & 0x0F;
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	789b      	ldrb	r3, [r3, #2]
 8000382:	3b04      	subs	r3, #4
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	b25a      	sxtb	r2, r3
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	78db      	ldrb	r3, [r3, #3]
 800038c:	b25b      	sxtb	r3, r3
 800038e:	4313      	orrs	r3, r2
 8000390:	b25b      	sxtb	r3, r3
 8000392:	b2db      	uxtb	r3, r3
 8000394:	f003 030f 	and.w	r3, r3, #15
 8000398:	73fb      	strb	r3, [r7, #15]
 800039a:	e02d      	b.n	80003f8 <MCAL_GPIO_Init+0xdc>
    }
    else
    {
        if ((PinConfig->GPIO_MODE == GPIO_MODE_Analog) || (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO))
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	789b      	ldrb	r3, [r3, #2]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d003      	beq.n	80003ac <MCAL_GPIO_Init+0x90>
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	789b      	ldrb	r3, [r3, #2]
 80003a8:	2b01      	cmp	r3, #1
 80003aa:	d107      	bne.n	80003bc <MCAL_GPIO_Init+0xa0>
        {
            // Calculate pin configuration for analog or input floating modes
            PIN_CONFIG = (PinConfig->GPIO_MODE << 2) & 0x0F;
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	789b      	ldrb	r3, [r3, #2]
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	f003 030f 	and.w	r3, r3, #15
 80003b8:	73fb      	strb	r3, [r7, #15]
 80003ba:	e01d      	b.n	80003f8 <MCAL_GPIO_Init+0xdc>
        }
        else
        {
            // Handle input with pull-up or pull-down modes
            if ((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PD) || (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU))
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	789b      	ldrb	r3, [r3, #2]
 80003c0:	2b03      	cmp	r3, #3
 80003c2:	d003      	beq.n	80003cc <MCAL_GPIO_Init+0xb0>
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	789b      	ldrb	r3, [r3, #2]
 80003c8:	2b02      	cmp	r3, #2
 80003ca:	d101      	bne.n	80003d0 <MCAL_GPIO_Init+0xb4>
            {
                PIN_CONFIG = (GPIO_MODE_INPUT_PU << 2) & 0x0F;
 80003cc:	2308      	movs	r3, #8
 80003ce:	73fb      	strb	r3, [r7, #15]
            }

            // Set or clear the ODR register based on pull-up configuration
            if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	789b      	ldrb	r3, [r3, #2]
 80003d4:	2b02      	cmp	r3, #2
 80003d6:	d107      	bne.n	80003e8 <MCAL_GPIO_Init+0xcc>
            {
                GPIOx->ODR |= PinConfig->GPIO_PinNumber; // Set pin to pull-up
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	68db      	ldr	r3, [r3, #12]
 80003dc:	683a      	ldr	r2, [r7, #0]
 80003de:	8812      	ldrh	r2, [r2, #0]
 80003e0:	431a      	orrs	r2, r3
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	60da      	str	r2, [r3, #12]
 80003e6:	e007      	b.n	80003f8 <MCAL_GPIO_Init+0xdc>
            }
            else
            {
                GPIOx->ODR &= ~PinConfig->GPIO_PinNumber; // Clear pin (no pull-up)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	68db      	ldr	r3, [r3, #12]
 80003ec:	683a      	ldr	r2, [r7, #0]
 80003ee:	8812      	ldrh	r2, [r2, #0]
 80003f0:	43d2      	mvns	r2, r2
 80003f2:	401a      	ands	r2, r3
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	60da      	str	r2, [r3, #12]
            }
        }
    }

    // Apply the configured settings to the selected pin
    *configregister |= (PIN_CONFIG << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80003f8:	7bfc      	ldrb	r4, [r7, #15]
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	881b      	ldrh	r3, [r3, #0]
 80003fe:	4618      	mov	r0, r3
 8000400:	f7ff fed4 	bl	80001ac <Get_CRLH_Position>
 8000404:	4603      	mov	r3, r0
 8000406:	fa04 f203 	lsl.w	r2, r4, r3
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	431a      	orrs	r2, r3
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	601a      	str	r2, [r3, #0]
}
 8000414:	bf00      	nop
 8000416:	3714      	adds	r7, #20
 8000418:	46bd      	mov	sp, r7
 800041a:	bd90      	pop	{r4, r7, pc}

0800041c <MCAL_GPIO_WritePin>:
 * @retval  void
 *
 * This function writes a value (high or low) to the specified GPIO pin.
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t value)
{
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	460b      	mov	r3, r1
 8000426:	807b      	strh	r3, [r7, #2]
 8000428:	4613      	mov	r3, r2
 800042a:	707b      	strb	r3, [r7, #1]
    if (value != GPIO_PIN_RESET)
 800042c:	787b      	ldrb	r3, [r7, #1]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d003      	beq.n	800043a <MCAL_GPIO_WritePin+0x1e>
    {
        // Set the pin
        GPIOx->BSRR = (uint32_t) PinNumber;
 8000432:	887a      	ldrh	r2, [r7, #2]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	611a      	str	r2, [r3, #16]
    else
    {
        // Reset the pin
        GPIOx->BRR = (uint32_t) PinNumber;
    }
}
 8000438:	e002      	b.n	8000440 <MCAL_GPIO_WritePin+0x24>
        GPIOx->BRR = (uint32_t) PinNumber;
 800043a:	887a      	ldrh	r2, [r7, #2]
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	615a      	str	r2, [r3, #20]
}
 8000440:	bf00      	nop
 8000442:	370c      	adds	r7, #12
 8000444:	46bd      	mov	sp, r7
 8000446:	bc80      	pop	{r7}
 8000448:	4770      	bx	lr

0800044a <lcd_4bit_initialize>:
static void lcd_4bits_command(lcd_4bit_mode *Lcd, uint8_t data_command);
static void lcd_4bit_set_cursor(lcd_4bit_mode *Lcd, uint8_t row, uint8_t column);
static void lcd_8bits_send_enable(lcd_8bit_mode *Lcd);
static void lcd_8bit_set_cursor(lcd_8bit_mode *Lcd, uint8_t row, uint8_t column);

void lcd_4bit_initialize(lcd_4bit_mode *Lcd) {
 800044a:	b580      	push	{r7, lr}
 800044c:	b084      	sub	sp, #16
 800044e:	af00      	add	r7, sp, #0
 8000450:	6078      	str	r0, [r7, #4]
    MCAL_GPIO_Init(Lcd->lcd_en.GPIOx, &(Lcd->lcd_en.Pin));
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	68da      	ldr	r2, [r3, #12]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	3308      	adds	r3, #8
 800045a:	4619      	mov	r1, r3
 800045c:	4610      	mov	r0, r2
 800045e:	f7ff ff5d 	bl	800031c <MCAL_GPIO_Init>
    MCAL_GPIO_Init(Lcd->lcd_rs.GPIOx, &(Lcd->lcd_rs.Pin));
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	687a      	ldr	r2, [r7, #4]
 8000468:	4611      	mov	r1, r2
 800046a:	4618      	mov	r0, r3
 800046c:	f7ff ff56 	bl	800031c <MCAL_GPIO_Init>
    for (uint8_t i = 0; i < 4; i++) {
 8000470:	2300      	movs	r3, #0
 8000472:	73fb      	strb	r3, [r7, #15]
 8000474:	e010      	b.n	8000498 <lcd_4bit_initialize+0x4e>
        MCAL_GPIO_Init(Lcd->lcd_data[i].GPIOx, &(Lcd->lcd_data[i].Pin));
 8000476:	7bfb      	ldrb	r3, [r7, #15]
 8000478:	687a      	ldr	r2, [r7, #4]
 800047a:	3302      	adds	r3, #2
 800047c:	00db      	lsls	r3, r3, #3
 800047e:	4413      	add	r3, r2
 8000480:	6858      	ldr	r0, [r3, #4]
 8000482:	7bfb      	ldrb	r3, [r7, #15]
 8000484:	3302      	adds	r3, #2
 8000486:	00db      	lsls	r3, r3, #3
 8000488:	687a      	ldr	r2, [r7, #4]
 800048a:	4413      	add	r3, r2
 800048c:	4619      	mov	r1, r3
 800048e:	f7ff ff45 	bl	800031c <MCAL_GPIO_Init>
    for (uint8_t i = 0; i < 4; i++) {
 8000492:	7bfb      	ldrb	r3, [r7, #15]
 8000494:	3301      	adds	r3, #1
 8000496:	73fb      	strb	r3, [r7, #15]
 8000498:	7bfb      	ldrb	r3, [r7, #15]
 800049a:	2b03      	cmp	r3, #3
 800049c:	d9eb      	bls.n	8000476 <lcd_4bit_initialize+0x2c>
    }
    delay(20);
 800049e:	2014      	movs	r0, #20
 80004a0:	f7ff fe66 	bl	8000170 <delay>
    lcd_4bit_send_command(Lcd, _LCD_8BIT_MODE_2_LINE);
 80004a4:	2138      	movs	r1, #56	@ 0x38
 80004a6:	6878      	ldr	r0, [r7, #4]
 80004a8:	f000 f82a 	bl	8000500 <lcd_4bit_send_command>
    delay(5);
 80004ac:	2005      	movs	r0, #5
 80004ae:	f7ff fe5f 	bl	8000170 <delay>
    lcd_4bit_send_command(Lcd, _LCD_8BIT_MODE_2_LINE);
 80004b2:	2138      	movs	r1, #56	@ 0x38
 80004b4:	6878      	ldr	r0, [r7, #4]
 80004b6:	f000 f823 	bl	8000500 <lcd_4bit_send_command>
    delay(1);
 80004ba:	2001      	movs	r0, #1
 80004bc:	f7ff fe58 	bl	8000170 <delay>
    lcd_4bit_send_command(Lcd, _LCD_8BIT_MODE_2_LINE);
 80004c0:	2138      	movs	r1, #56	@ 0x38
 80004c2:	6878      	ldr	r0, [r7, #4]
 80004c4:	f000 f81c 	bl	8000500 <lcd_4bit_send_command>
    lcd_4bit_send_command(Lcd, _LCD_CLEAR);
 80004c8:	2101      	movs	r1, #1
 80004ca:	6878      	ldr	r0, [r7, #4]
 80004cc:	f000 f818 	bl	8000500 <lcd_4bit_send_command>
    lcd_4bit_send_command(Lcd, _LCD_RETURN_HOME);
 80004d0:	2102      	movs	r1, #2
 80004d2:	6878      	ldr	r0, [r7, #4]
 80004d4:	f000 f814 	bl	8000500 <lcd_4bit_send_command>
    lcd_4bit_send_command(Lcd, _LCD_ENTRY_MODE_INC_SHIFT_OFF);
 80004d8:	2106      	movs	r1, #6
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f000 f810 	bl	8000500 <lcd_4bit_send_command>
    lcd_4bit_send_command(Lcd, _LCD_DISPLAY_ON_UNDERLINE_OFF_CURSOR_OFF);
 80004e0:	210c      	movs	r1, #12
 80004e2:	6878      	ldr	r0, [r7, #4]
 80004e4:	f000 f80c 	bl	8000500 <lcd_4bit_send_command>
    lcd_4bit_send_command(Lcd, _LCD_4BIT_MODE_2_LINE);
 80004e8:	2128      	movs	r1, #40	@ 0x28
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f000 f808 	bl	8000500 <lcd_4bit_send_command>
    lcd_4bit_send_command(Lcd, 0x80);
 80004f0:	2180      	movs	r1, #128	@ 0x80
 80004f2:	6878      	ldr	r0, [r7, #4]
 80004f4:	f000 f804 	bl	8000500 <lcd_4bit_send_command>
}
 80004f8:	bf00      	nop
 80004fa:	3710      	adds	r7, #16
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <lcd_4bit_send_command>:

void lcd_4bit_send_command(lcd_4bit_mode *Lcd, uint8_t command) {
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	460b      	mov	r3, r1
 800050a:	70fb      	strb	r3, [r7, #3]
    MCAL_GPIO_WritePin(Lcd->lcd_rs.GPIOx, Lcd->lcd_rs.Pin.GPIO_PinNumber, GPIO_PIN_RESET);
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	6858      	ldr	r0, [r3, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	881b      	ldrh	r3, [r3, #0]
 8000514:	2200      	movs	r2, #0
 8000516:	4619      	mov	r1, r3
 8000518:	f7ff ff80 	bl	800041c <MCAL_GPIO_WritePin>
    lcd_4bits_command(Lcd, command >> 4);
 800051c:	78fb      	ldrb	r3, [r7, #3]
 800051e:	091b      	lsrs	r3, r3, #4
 8000520:	b2db      	uxtb	r3, r3
 8000522:	4619      	mov	r1, r3
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f000 f865 	bl	80005f4 <lcd_4bits_command>
    lcd_4bits_send_enable(Lcd);
 800052a:	6878      	ldr	r0, [r7, #4]
 800052c:	f000 f847 	bl	80005be <lcd_4bits_send_enable>
    lcd_4bits_command(Lcd, command);
 8000530:	78fb      	ldrb	r3, [r7, #3]
 8000532:	4619      	mov	r1, r3
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f000 f85d 	bl	80005f4 <lcd_4bits_command>
    lcd_4bits_send_enable(Lcd);
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f000 f83f 	bl	80005be <lcd_4bits_send_enable>
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <lcd_4bit_send_char_data>:

void lcd_4bit_send_char_data(lcd_4bit_mode *Lcd, uint8_t data) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	460b      	mov	r3, r1
 8000552:	70fb      	strb	r3, [r7, #3]
    MCAL_GPIO_WritePin(Lcd->lcd_rs.GPIOx, Lcd->lcd_rs.Pin.GPIO_PinNumber, GPIO_PIN_SET);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	6858      	ldr	r0, [r3, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	881b      	ldrh	r3, [r3, #0]
 800055c:	2201      	movs	r2, #1
 800055e:	4619      	mov	r1, r3
 8000560:	f7ff ff5c 	bl	800041c <MCAL_GPIO_WritePin>
    lcd_4bits_command(Lcd, data >> 4);
 8000564:	78fb      	ldrb	r3, [r7, #3]
 8000566:	091b      	lsrs	r3, r3, #4
 8000568:	b2db      	uxtb	r3, r3
 800056a:	4619      	mov	r1, r3
 800056c:	6878      	ldr	r0, [r7, #4]
 800056e:	f000 f841 	bl	80005f4 <lcd_4bits_command>
    lcd_4bits_send_enable(Lcd);
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	f000 f823 	bl	80005be <lcd_4bits_send_enable>
    lcd_4bits_command(Lcd, data);
 8000578:	78fb      	ldrb	r3, [r7, #3]
 800057a:	4619      	mov	r1, r3
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f000 f839 	bl	80005f4 <lcd_4bits_command>
    lcd_4bits_send_enable(Lcd);
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f000 f81b 	bl	80005be <lcd_4bits_send_enable>
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <lcd_4bit_send_string>:
void lcd_4bit_send_char_data_pos(lcd_4bit_mode *Lcd, uint8_t row, uint8_t column, uint8_t data) {
    lcd_4bit_set_cursor(Lcd, row, column);
    lcd_4bit_send_char_data(Lcd, data);
}

void lcd_4bit_send_string(lcd_4bit_mode *Lcd, uint8_t *str) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
    while (*str) {
 800059a:	e007      	b.n	80005ac <lcd_4bit_send_string+0x1c>
        lcd_4bit_send_char_data(Lcd, *str++);
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	1c5a      	adds	r2, r3, #1
 80005a0:	603a      	str	r2, [r7, #0]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4619      	mov	r1, r3
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f7ff ffce 	bl	8000548 <lcd_4bit_send_char_data>
    while (*str) {
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1f3      	bne.n	800059c <lcd_4bit_send_string+0xc>
    }
}
 80005b4:	bf00      	nop
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <lcd_4bits_send_enable>:
static void lcd_8bit_set_cursor(lcd_8bit_mode *Lcd, uint8_t row, uint8_t column) {
    static const uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
    lcd_8bit_send_command(Lcd, 0x80 | (column + row_offsets[row]));
}

static void lcd_4bits_send_enable(lcd_4bit_mode *Lcd) {
 80005be:	b580      	push	{r7, lr}
 80005c0:	b082      	sub	sp, #8
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
    MCAL_GPIO_WritePin(Lcd->lcd_en.GPIOx, Lcd->lcd_en.Pin.GPIO_PinNumber, GPIO_PIN_SET);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	68d8      	ldr	r0, [r3, #12]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	891b      	ldrh	r3, [r3, #8]
 80005ce:	2201      	movs	r2, #1
 80005d0:	4619      	mov	r1, r3
 80005d2:	f7ff ff23 	bl	800041c <MCAL_GPIO_WritePin>
    delay(1);
 80005d6:	2001      	movs	r0, #1
 80005d8:	f7ff fdca 	bl	8000170 <delay>
    MCAL_GPIO_WritePin(Lcd->lcd_en.GPIOx, Lcd->lcd_en.Pin.GPIO_PinNumber, GPIO_PIN_RESET);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	68d8      	ldr	r0, [r3, #12]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	891b      	ldrh	r3, [r3, #8]
 80005e4:	2200      	movs	r2, #0
 80005e6:	4619      	mov	r1, r3
 80005e8:	f7ff ff18 	bl	800041c <MCAL_GPIO_WritePin>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <lcd_4bits_command>:

static void lcd_4bits_command(lcd_4bit_mode *Lcd, uint8_t data_command) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	460b      	mov	r3, r1
 80005fe:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < 4; i++) {
 8000600:	2300      	movs	r3, #0
 8000602:	73fb      	strb	r3, [r7, #15]
 8000604:	e018      	b.n	8000638 <lcd_4bits_command+0x44>
        MCAL_GPIO_WritePin(Lcd->lcd_data[i].GPIOx, Lcd->lcd_data[i].Pin.GPIO_PinNumber, (data_command >> i) & 1);
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	3302      	adds	r3, #2
 800060c:	00db      	lsls	r3, r3, #3
 800060e:	4413      	add	r3, r2
 8000610:	6858      	ldr	r0, [r3, #4]
 8000612:	7bfa      	ldrb	r2, [r7, #15]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	3202      	adds	r2, #2
 8000618:	f833 1032 	ldrh.w	r1, [r3, r2, lsl #3]
 800061c:	78fa      	ldrb	r2, [r7, #3]
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	fa42 f303 	asr.w	r3, r2, r3
 8000624:	b2db      	uxtb	r3, r3
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	b2db      	uxtb	r3, r3
 800062c:	461a      	mov	r2, r3
 800062e:	f7ff fef5 	bl	800041c <MCAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 4; i++) {
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	3301      	adds	r3, #1
 8000636:	73fb      	strb	r3, [r7, #15]
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	2b03      	cmp	r3, #3
 800063c:	d9e3      	bls.n	8000606 <lcd_4bits_command+0x12>
    }
}
 800063e:	bf00      	nop
 8000640:	bf00      	nop
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <clock_init>:
#include "../Lcd_Driver/inc/lcd.h"
#include "../Keypad_Driver/inc/keypad.h"

// Initialize the clock for GPIOA and GPIOB
void clock_init()
    {
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
    RCC_GPIOA_CLK_EN();  // Enable clock for GPIOA
 800064c:	4b07      	ldr	r3, [pc, #28]	@ (800066c <clock_init+0x24>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a06      	ldr	r2, [pc, #24]	@ (800066c <clock_init+0x24>)
 8000652:	f043 0304 	orr.w	r3, r3, #4
 8000656:	6193      	str	r3, [r2, #24]
    RCC_GPIOB_CLK_EN();  // Enable clock for GPIOB
 8000658:	4b04      	ldr	r3, [pc, #16]	@ (800066c <clock_init+0x24>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	4a03      	ldr	r2, [pc, #12]	@ (800066c <clock_init+0x24>)
 800065e:	f043 0308 	orr.w	r3, r3, #8
 8000662:	6193      	str	r3, [r2, #24]
    }
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr
 800066c:	40021000 	.word	0x40021000

08000670 <main>:

    }
lcd_4bit_mode lcd4bit;

int main(void)
    {
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
    clock_init();
 8000674:	f7ff ffe8 	bl	8000648 <clock_init>

    lcd4bit.lcd_data[0].GPIOx = GPIOA;
 8000678:	4b2a      	ldr	r3, [pc, #168]	@ (8000724 <main+0xb4>)
 800067a:	4a2b      	ldr	r2, [pc, #172]	@ (8000728 <main+0xb8>)
 800067c:	615a      	str	r2, [r3, #20]
    lcd4bit.lcd_data[0].Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800067e:	4b29      	ldr	r3, [pc, #164]	@ (8000724 <main+0xb4>)
 8000680:	2204      	movs	r2, #4
 8000682:	749a      	strb	r2, [r3, #18]
    lcd4bit.lcd_data[0].Pin.GPIO_PinNumber = GPIO_PIN_0;
 8000684:	4b27      	ldr	r3, [pc, #156]	@ (8000724 <main+0xb4>)
 8000686:	2201      	movs	r2, #1
 8000688:	821a      	strh	r2, [r3, #16]
    lcd4bit.lcd_data[0].Pin.GPIO_Speed = GPIO_SPEED_10M;
 800068a:	4b26      	ldr	r3, [pc, #152]	@ (8000724 <main+0xb4>)
 800068c:	2201      	movs	r2, #1
 800068e:	74da      	strb	r2, [r3, #19]

    lcd4bit.lcd_data[1].GPIOx = GPIOA;
 8000690:	4b24      	ldr	r3, [pc, #144]	@ (8000724 <main+0xb4>)
 8000692:	4a25      	ldr	r2, [pc, #148]	@ (8000728 <main+0xb8>)
 8000694:	61da      	str	r2, [r3, #28]
    lcd4bit.lcd_data[1].Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000696:	4b23      	ldr	r3, [pc, #140]	@ (8000724 <main+0xb4>)
 8000698:	2204      	movs	r2, #4
 800069a:	769a      	strb	r2, [r3, #26]
    lcd4bit.lcd_data[1].Pin.GPIO_PinNumber = GPIO_PIN_1;
 800069c:	4b21      	ldr	r3, [pc, #132]	@ (8000724 <main+0xb4>)
 800069e:	2202      	movs	r2, #2
 80006a0:	831a      	strh	r2, [r3, #24]
    lcd4bit.lcd_data[1].Pin.GPIO_Speed = GPIO_SPEED_10M;
 80006a2:	4b20      	ldr	r3, [pc, #128]	@ (8000724 <main+0xb4>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	76da      	strb	r2, [r3, #27]

    lcd4bit.lcd_data[2].GPIOx = GPIOA;
 80006a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000724 <main+0xb4>)
 80006aa:	4a1f      	ldr	r2, [pc, #124]	@ (8000728 <main+0xb8>)
 80006ac:	625a      	str	r2, [r3, #36]	@ 0x24
    lcd4bit.lcd_data[2].Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000724 <main+0xb4>)
 80006b0:	2204      	movs	r2, #4
 80006b2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    lcd4bit.lcd_data[2].Pin.GPIO_PinNumber = GPIO_PIN_2;
 80006b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000724 <main+0xb4>)
 80006b8:	2204      	movs	r2, #4
 80006ba:	841a      	strh	r2, [r3, #32]
    lcd4bit.lcd_data[2].Pin.GPIO_Speed = GPIO_SPEED_10M;
 80006bc:	4b19      	ldr	r3, [pc, #100]	@ (8000724 <main+0xb4>)
 80006be:	2201      	movs	r2, #1
 80006c0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

    lcd4bit.lcd_data[3].GPIOx = GPIOA;
 80006c4:	4b17      	ldr	r3, [pc, #92]	@ (8000724 <main+0xb4>)
 80006c6:	4a18      	ldr	r2, [pc, #96]	@ (8000728 <main+0xb8>)
 80006c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    lcd4bit.lcd_data[3].Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006ca:	4b16      	ldr	r3, [pc, #88]	@ (8000724 <main+0xb4>)
 80006cc:	2204      	movs	r2, #4
 80006ce:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    lcd4bit.lcd_data[3].Pin.GPIO_PinNumber = GPIO_PIN_3;
 80006d2:	4b14      	ldr	r3, [pc, #80]	@ (8000724 <main+0xb4>)
 80006d4:	2208      	movs	r2, #8
 80006d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    lcd4bit.lcd_data[3].Pin.GPIO_Speed = GPIO_SPEED_10M;
 80006d8:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <main+0xb4>)
 80006da:	2201      	movs	r2, #1
 80006dc:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

    lcd4bit.lcd_en.GPIOx = GPIOA;
 80006e0:	4b10      	ldr	r3, [pc, #64]	@ (8000724 <main+0xb4>)
 80006e2:	4a11      	ldr	r2, [pc, #68]	@ (8000728 <main+0xb8>)
 80006e4:	60da      	str	r2, [r3, #12]
    lcd4bit.lcd_en.Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <main+0xb4>)
 80006e8:	2204      	movs	r2, #4
 80006ea:	729a      	strb	r2, [r3, #10]
    lcd4bit.lcd_en.Pin.GPIO_PinNumber = GPIO_PIN_4;
 80006ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000724 <main+0xb4>)
 80006ee:	2210      	movs	r2, #16
 80006f0:	811a      	strh	r2, [r3, #8]
    lcd4bit.lcd_en.Pin.GPIO_Speed = GPIO_SPEED_10M;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <main+0xb4>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	72da      	strb	r2, [r3, #11]

    lcd4bit.lcd_rs.GPIOx = GPIOA;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000724 <main+0xb4>)
 80006fa:	4a0b      	ldr	r2, [pc, #44]	@ (8000728 <main+0xb8>)
 80006fc:	605a      	str	r2, [r3, #4]
    lcd4bit.lcd_rs.Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006fe:	4b09      	ldr	r3, [pc, #36]	@ (8000724 <main+0xb4>)
 8000700:	2204      	movs	r2, #4
 8000702:	709a      	strb	r2, [r3, #2]
    lcd4bit.lcd_rs.Pin.GPIO_PinNumber = GPIO_PIN_5;
 8000704:	4b07      	ldr	r3, [pc, #28]	@ (8000724 <main+0xb4>)
 8000706:	2220      	movs	r2, #32
 8000708:	801a      	strh	r2, [r3, #0]
    lcd4bit.lcd_rs.Pin.GPIO_Speed = GPIO_SPEED_10M;
 800070a:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <main+0xb4>)
 800070c:	2201      	movs	r2, #1
 800070e:	70da      	strb	r2, [r3, #3]

    lcd_4bit_initialize(&lcd4bit);
 8000710:	4804      	ldr	r0, [pc, #16]	@ (8000724 <main+0xb4>)
 8000712:	f7ff fe9a 	bl	800044a <lcd_4bit_initialize>
    lcd_4bit_send_string(&lcd4bit, (uint8_t*) "Hello, World!");
 8000716:	4905      	ldr	r1, [pc, #20]	@ (800072c <main+0xbc>)
 8000718:	4802      	ldr	r0, [pc, #8]	@ (8000724 <main+0xb4>)
 800071a:	f7ff ff39 	bl	8000590 <lcd_4bit_send_string>
    while (1)
 800071e:	bf00      	nop
 8000720:	e7fd      	b.n	800071e <main+0xae>
 8000722:	bf00      	nop
 8000724:	2000001c 	.word	0x2000001c
 8000728:	40010800 	.word	0x40010800
 800072c:	080007e4 	.word	0x080007e4

08000730 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000730:	480d      	ldr	r0, [pc, #52]	@ (8000768 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000732:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000734:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000738:	480c      	ldr	r0, [pc, #48]	@ (800076c <LoopForever+0x6>)
  ldr r1, =_edata
 800073a:	490d      	ldr	r1, [pc, #52]	@ (8000770 <LoopForever+0xa>)
  ldr r2, =_sidata
 800073c:	4a0d      	ldr	r2, [pc, #52]	@ (8000774 <LoopForever+0xe>)
  movs r3, #0
 800073e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000740:	e002      	b.n	8000748 <LoopCopyDataInit>

08000742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000746:	3304      	adds	r3, #4

08000748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800074c:	d3f9      	bcc.n	8000742 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074e:	4a0a      	ldr	r2, [pc, #40]	@ (8000778 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000750:	4c0a      	ldr	r4, [pc, #40]	@ (800077c <LoopForever+0x16>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000754:	e001      	b.n	800075a <LoopFillZerobss>

08000756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000758:	3204      	adds	r2, #4

0800075a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800075c:	d3fb      	bcc.n	8000756 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800075e:	f000 f811 	bl	8000784 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000762:	f7ff ff85 	bl	8000670 <main>

08000766 <LoopForever>:

LoopForever:
  b LoopForever
 8000766:	e7fe      	b.n	8000766 <LoopForever>
  ldr   r0, =_estack
 8000768:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800076c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000770:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000774:	080007fc 	.word	0x080007fc
  ldr r2, =_sbss
 8000778:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800077c:	2000004c 	.word	0x2000004c

08000780 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000780:	e7fe      	b.n	8000780 <ADC1_2_IRQHandler>
	...

08000784 <__libc_init_array>:
 8000784:	b570      	push	{r4, r5, r6, lr}
 8000786:	2600      	movs	r6, #0
 8000788:	4d0c      	ldr	r5, [pc, #48]	@ (80007bc <__libc_init_array+0x38>)
 800078a:	4c0d      	ldr	r4, [pc, #52]	@ (80007c0 <__libc_init_array+0x3c>)
 800078c:	1b64      	subs	r4, r4, r5
 800078e:	10a4      	asrs	r4, r4, #2
 8000790:	42a6      	cmp	r6, r4
 8000792:	d109      	bne.n	80007a8 <__libc_init_array+0x24>
 8000794:	f000 f81a 	bl	80007cc <_init>
 8000798:	2600      	movs	r6, #0
 800079a:	4d0a      	ldr	r5, [pc, #40]	@ (80007c4 <__libc_init_array+0x40>)
 800079c:	4c0a      	ldr	r4, [pc, #40]	@ (80007c8 <__libc_init_array+0x44>)
 800079e:	1b64      	subs	r4, r4, r5
 80007a0:	10a4      	asrs	r4, r4, #2
 80007a2:	42a6      	cmp	r6, r4
 80007a4:	d105      	bne.n	80007b2 <__libc_init_array+0x2e>
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80007ac:	4798      	blx	r3
 80007ae:	3601      	adds	r6, #1
 80007b0:	e7ee      	b.n	8000790 <__libc_init_array+0xc>
 80007b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80007b6:	4798      	blx	r3
 80007b8:	3601      	adds	r6, #1
 80007ba:	e7f2      	b.n	80007a2 <__libc_init_array+0x1e>
 80007bc:	080007f4 	.word	0x080007f4
 80007c0:	080007f4 	.word	0x080007f4
 80007c4:	080007f4 	.word	0x080007f4
 80007c8:	080007f8 	.word	0x080007f8

080007cc <_init>:
 80007cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ce:	bf00      	nop
 80007d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007d2:	bc08      	pop	{r3}
 80007d4:	469e      	mov	lr, r3
 80007d6:	4770      	bx	lr

080007d8 <_fini>:
 80007d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007da:	bf00      	nop
 80007dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007de:	bc08      	pop	{r3}
 80007e0:	469e      	mov	lr, r3
 80007e2:	4770      	bx	lr
