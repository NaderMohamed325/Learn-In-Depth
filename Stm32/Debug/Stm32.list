
Stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cf0  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000e20  08000e20  00001e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e44  08000e44  00001e4c  2**0
                  CONTENTS
  4 .ARM          00000000  08000e44  08000e44  00001e4c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e44  08000e4c  00001e4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e44  08000e44  00001e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000e48  08000e48  00001e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001e4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000e4c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000e4c  00002060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001e4c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000107f  00000000  00000000  00001e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000562  00000000  00000000  00002ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000092c  00000000  00000000  00003456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000198  00000000  00000000  00003d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000150  00000000  00000000  00003f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000009b4  00000000  00000000  00004070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000021d4  00000000  00000000  00004a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009dd7  00000000  00000000  00006bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000109cf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004f4  00000000  00000000  00010a14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000e08 	.word	0x08000e08

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000e08 	.word	0x08000e08

08000170 <LCD_GPIO_init>:
GPIO_PinConfig_t PinCfg;



void LCD_GPIO_init()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
    PinCfg.GPIO_PinNumber = RS_SWITCH;
 8000174:	4b38      	ldr	r3, [pc, #224]	@ (8000258 <LCD_GPIO_init+0xe8>)
 8000176:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800017a:	801a      	strh	r2, [r3, #0]
    PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800017c:	4b36      	ldr	r3, [pc, #216]	@ (8000258 <LCD_GPIO_init+0xe8>)
 800017e:	2204      	movs	r2, #4
 8000180:	709a      	strb	r2, [r3, #2]
    PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000182:	4b35      	ldr	r3, [pc, #212]	@ (8000258 <LCD_GPIO_init+0xe8>)
 8000184:	2201      	movs	r2, #1
 8000186:	70da      	strb	r2, [r3, #3]
    MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000188:	4933      	ldr	r1, [pc, #204]	@ (8000258 <LCD_GPIO_init+0xe8>)
 800018a:	4834      	ldr	r0, [pc, #208]	@ (800025c <LCD_GPIO_init+0xec>)
 800018c:	f000 fa68 	bl	8000660 <MCAL_GPIO_Init>

    PinCfg.GPIO_PinNumber = RW_SWITCH;
 8000190:	4b31      	ldr	r3, [pc, #196]	@ (8000258 <LCD_GPIO_init+0xe8>)
 8000192:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000196:	801a      	strh	r2, [r3, #0]
    PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000198:	4b2f      	ldr	r3, [pc, #188]	@ (8000258 <LCD_GPIO_init+0xe8>)
 800019a:	2204      	movs	r2, #4
 800019c:	709a      	strb	r2, [r3, #2]
    PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800019e:	4b2e      	ldr	r3, [pc, #184]	@ (8000258 <LCD_GPIO_init+0xe8>)
 80001a0:	2201      	movs	r2, #1
 80001a2:	70da      	strb	r2, [r3, #3]
    MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001a4:	492c      	ldr	r1, [pc, #176]	@ (8000258 <LCD_GPIO_init+0xe8>)
 80001a6:	482d      	ldr	r0, [pc, #180]	@ (800025c <LCD_GPIO_init+0xec>)
 80001a8:	f000 fa5a 	bl	8000660 <MCAL_GPIO_Init>

    PinCfg.GPIO_PinNumber = EN_SWITCH;
 80001ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000258 <LCD_GPIO_init+0xe8>)
 80001ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80001b2:	801a      	strh	r2, [r3, #0]
    PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001b4:	4b28      	ldr	r3, [pc, #160]	@ (8000258 <LCD_GPIO_init+0xe8>)
 80001b6:	2204      	movs	r2, #4
 80001b8:	709a      	strb	r2, [r3, #2]
    PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001ba:	4b27      	ldr	r3, [pc, #156]	@ (8000258 <LCD_GPIO_init+0xe8>)
 80001bc:	2201      	movs	r2, #1
 80001be:	70da      	strb	r2, [r3, #3]
    MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001c0:	4925      	ldr	r1, [pc, #148]	@ (8000258 <LCD_GPIO_init+0xe8>)
 80001c2:	4826      	ldr	r0, [pc, #152]	@ (800025c <LCD_GPIO_init+0xec>)
 80001c4:	f000 fa4c 	bl	8000660 <MCAL_GPIO_Init>

    // SET THE NEXT 4 PINS AS Output
    PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 80001c8:	4b23      	ldr	r3, [pc, #140]	@ (8000258 <LCD_GPIO_init+0xe8>)
 80001ca:	2210      	movs	r2, #16
 80001cc:	801a      	strh	r2, [r3, #0]
    PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001ce:	4b22      	ldr	r3, [pc, #136]	@ (8000258 <LCD_GPIO_init+0xe8>)
 80001d0:	2204      	movs	r2, #4
 80001d2:	709a      	strb	r2, [r3, #2]
    PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001d4:	4b20      	ldr	r3, [pc, #128]	@ (8000258 <LCD_GPIO_init+0xe8>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	70da      	strb	r2, [r3, #3]
    MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001da:	491f      	ldr	r1, [pc, #124]	@ (8000258 <LCD_GPIO_init+0xe8>)
 80001dc:	481f      	ldr	r0, [pc, #124]	@ (800025c <LCD_GPIO_init+0xec>)
 80001de:	f000 fa3f 	bl	8000660 <MCAL_GPIO_Init>

    PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 80001e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000258 <LCD_GPIO_init+0xe8>)
 80001e4:	2220      	movs	r2, #32
 80001e6:	801a      	strh	r2, [r3, #0]
    PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000258 <LCD_GPIO_init+0xe8>)
 80001ea:	2204      	movs	r2, #4
 80001ec:	709a      	strb	r2, [r3, #2]
    PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000258 <LCD_GPIO_init+0xe8>)
 80001f0:	2201      	movs	r2, #1
 80001f2:	70da      	strb	r2, [r3, #3]
    MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001f4:	4918      	ldr	r1, [pc, #96]	@ (8000258 <LCD_GPIO_init+0xe8>)
 80001f6:	4819      	ldr	r0, [pc, #100]	@ (800025c <LCD_GPIO_init+0xec>)
 80001f8:	f000 fa32 	bl	8000660 <MCAL_GPIO_Init>

    PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 80001fc:	4b16      	ldr	r3, [pc, #88]	@ (8000258 <LCD_GPIO_init+0xe8>)
 80001fe:	2240      	movs	r2, #64	@ 0x40
 8000200:	801a      	strh	r2, [r3, #0]
    PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000202:	4b15      	ldr	r3, [pc, #84]	@ (8000258 <LCD_GPIO_init+0xe8>)
 8000204:	2204      	movs	r2, #4
 8000206:	709a      	strb	r2, [r3, #2]
    PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000208:	4b13      	ldr	r3, [pc, #76]	@ (8000258 <LCD_GPIO_init+0xe8>)
 800020a:	2201      	movs	r2, #1
 800020c:	70da      	strb	r2, [r3, #3]
    MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800020e:	4912      	ldr	r1, [pc, #72]	@ (8000258 <LCD_GPIO_init+0xe8>)
 8000210:	4812      	ldr	r0, [pc, #72]	@ (800025c <LCD_GPIO_init+0xec>)
 8000212:	f000 fa25 	bl	8000660 <MCAL_GPIO_Init>

    PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000216:	4b10      	ldr	r3, [pc, #64]	@ (8000258 <LCD_GPIO_init+0xe8>)
 8000218:	2280      	movs	r2, #128	@ 0x80
 800021a:	801a      	strh	r2, [r3, #0]
    PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800021c:	4b0e      	ldr	r3, [pc, #56]	@ (8000258 <LCD_GPIO_init+0xe8>)
 800021e:	2204      	movs	r2, #4
 8000220:	709a      	strb	r2, [r3, #2]
    PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000222:	4b0d      	ldr	r3, [pc, #52]	@ (8000258 <LCD_GPIO_init+0xe8>)
 8000224:	2201      	movs	r2, #1
 8000226:	70da      	strb	r2, [r3, #3]
    MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000228:	490b      	ldr	r1, [pc, #44]	@ (8000258 <LCD_GPIO_init+0xe8>)
 800022a:	480c      	ldr	r0, [pc, #48]	@ (800025c <LCD_GPIO_init+0xec>)
 800022c:	f000 fa18 	bl	8000660 <MCAL_GPIO_Init>

    MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 8000230:	2200      	movs	r2, #0
 8000232:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000236:	4809      	ldr	r0, [pc, #36]	@ (800025c <LCD_GPIO_init+0xec>)
 8000238:	f000 fad7 	bl	80007ea <MCAL_GPIO_WritePin>
    MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 800023c:	2200      	movs	r2, #0
 800023e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000242:	4806      	ldr	r0, [pc, #24]	@ (800025c <LCD_GPIO_init+0xec>)
 8000244:	f000 fad1 	bl	80007ea <MCAL_GPIO_WritePin>
    MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000248:	2200      	movs	r2, #0
 800024a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800024e:	4803      	ldr	r0, [pc, #12]	@ (800025c <LCD_GPIO_init+0xec>)
 8000250:	f000 facb 	bl	80007ea <MCAL_GPIO_WritePin>
}
 8000254:	bf00      	nop
 8000256:	bd80      	pop	{r7, pc}
 8000258:	2000001c 	.word	0x2000001c
 800025c:	40010800 	.word	0x40010800

08000260 <LCD_clear_screen>:

void LCD_clear_screen()
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
    LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000264:	2001      	movs	r0, #1
 8000266:	f000 f859 	bl	800031c <LCD_WRITE_COMMAND>
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <LCD_lcd_kick>:

void LCD_lcd_kick()
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
    MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 8000274:	2201      	movs	r2, #1
 8000276:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800027a:	4807      	ldr	r0, [pc, #28]	@ (8000298 <LCD_lcd_kick+0x28>)
 800027c:	f000 fab5 	bl	80007ea <MCAL_GPIO_WritePin>
    delay_ms(2);
 8000280:	2002      	movs	r0, #2
 8000282:	f000 f918 	bl	80004b6 <delay_ms>
    MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 8000286:	2200      	movs	r2, #0
 8000288:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800028c:	4802      	ldr	r0, [pc, #8]	@ (8000298 <LCD_lcd_kick+0x28>)
 800028e:	f000 faac 	bl	80007ea <MCAL_GPIO_WritePin>
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40010800 	.word	0x40010800

0800029c <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	460a      	mov	r2, r1
 80002a6:	71fb      	strb	r3, [r7, #7]
 80002a8:	4613      	mov	r3, r2
 80002aa:	71bb      	strb	r3, [r7, #6]
    if (line == 1)
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d108      	bne.n	80002c4 <LCD_GOTO_XY+0x28>
    {
        if (position < 16 && position >= 0)
 80002b2:	79bb      	ldrb	r3, [r7, #6]
 80002b4:	2b0f      	cmp	r3, #15
 80002b6:	d805      	bhi.n	80002c4 <LCD_GOTO_XY+0x28>
        {
            LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 80002b8:	79bb      	ldrb	r3, [r7, #6]
 80002ba:	3b80      	subs	r3, #128	@ 0x80
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 f82c 	bl	800031c <LCD_WRITE_COMMAND>
        }
    }
    if (line == 2)
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	2b02      	cmp	r3, #2
 80002c8:	d108      	bne.n	80002dc <LCD_GOTO_XY+0x40>
    {
        if (position < 16 && position >= 0)
 80002ca:	79bb      	ldrb	r3, [r7, #6]
 80002cc:	2b0f      	cmp	r3, #15
 80002ce:	d805      	bhi.n	80002dc <LCD_GOTO_XY+0x40>
        {
            LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 80002d0:	79bb      	ldrb	r3, [r7, #6]
 80002d2:	3b40      	subs	r3, #64	@ 0x40
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 f820 	bl	800031c <LCD_WRITE_COMMAND>
        }
    }
}
 80002dc:	bf00      	nop
 80002de:	3708      	adds	r7, #8
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <LCD_INIT>:

void LCD_INIT()
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
    delay_ms(20);
 80002e8:	2014      	movs	r0, #20
 80002ea:	f000 f8e4 	bl	80004b6 <delay_ms>
    LCD_GPIO_init();
 80002ee:	f7ff ff3f 	bl	8000170 <LCD_GPIO_init>
    delay_ms(15);
 80002f2:	200f      	movs	r0, #15
 80002f4:	f000 f8df 	bl	80004b6 <delay_ms>

    // Set to 4-bit mode
    LCD_WRITE_COMMAND(0x02); // Initialize LCD in 4-bit mode
 80002f8:	2002      	movs	r0, #2
 80002fa:	f000 f80f 	bl	800031c <LCD_WRITE_COMMAND>
    LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
 80002fe:	2028      	movs	r0, #40	@ 0x28
 8000300:	f000 f80c 	bl	800031c <LCD_WRITE_COMMAND>
    LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 8000304:	2006      	movs	r0, #6
 8000306:	f000 f809 	bl	800031c <LCD_WRITE_COMMAND>
    LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 800030a:	2080      	movs	r0, #128	@ 0x80
 800030c:	f000 f806 	bl	800031c <LCD_WRITE_COMMAND>
    LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 8000310:	200f      	movs	r0, #15
 8000312:	f000 f803 	bl	800031c <LCD_WRITE_COMMAND>
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <LCD_WRITE_COMMAND>:
    PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
    MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
}

void LCD_WRITE_COMMAND(unsigned char command)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	71fb      	strb	r3, [r7, #7]
    // Send high nibble
    MCAL_GPIO_WritePort(LCD_CTRL, (MCAL_GPIO_ReadPort(LCD_CTRL) & 0x0F) | (command & 0xF0));
 8000326:	4824      	ldr	r0, [pc, #144]	@ (80003b8 <LCD_WRITE_COMMAND+0x9c>)
 8000328:	f000 fa44 	bl	80007b4 <MCAL_GPIO_ReadPort>
 800032c:	4603      	mov	r3, r0
 800032e:	b21b      	sxth	r3, r3
 8000330:	f003 030f 	and.w	r3, r3, #15
 8000334:	b21a      	sxth	r2, r3
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	b21b      	sxth	r3, r3
 800033a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800033e:	b21b      	sxth	r3, r3
 8000340:	4313      	orrs	r3, r2
 8000342:	b21b      	sxth	r3, r3
 8000344:	b29b      	uxth	r3, r3
 8000346:	4619      	mov	r1, r3
 8000348:	481b      	ldr	r0, [pc, #108]	@ (80003b8 <LCD_WRITE_COMMAND+0x9c>)
 800034a:	f000 fa40 	bl	80007ce <MCAL_GPIO_WritePort>
    MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800034e:	2200      	movs	r2, #0
 8000350:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000354:	4818      	ldr	r0, [pc, #96]	@ (80003b8 <LCD_WRITE_COMMAND+0x9c>)
 8000356:	f000 fa48 	bl	80007ea <MCAL_GPIO_WritePin>
    MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000360:	4815      	ldr	r0, [pc, #84]	@ (80003b8 <LCD_WRITE_COMMAND+0x9c>)
 8000362:	f000 fa42 	bl	80007ea <MCAL_GPIO_WritePin>
    LCD_lcd_kick();
 8000366:	f7ff ff83 	bl	8000270 <LCD_lcd_kick>

    // Send low nibble
    MCAL_GPIO_WritePort(LCD_CTRL, (MCAL_GPIO_ReadPort(LCD_CTRL) & 0x0F) | ((command << 4) & 0xF0));
 800036a:	4813      	ldr	r0, [pc, #76]	@ (80003b8 <LCD_WRITE_COMMAND+0x9c>)
 800036c:	f000 fa22 	bl	80007b4 <MCAL_GPIO_ReadPort>
 8000370:	4603      	mov	r3, r0
 8000372:	b21b      	sxth	r3, r3
 8000374:	f003 030f 	and.w	r3, r3, #15
 8000378:	b21a      	sxth	r2, r3
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	011b      	lsls	r3, r3, #4
 800037e:	b21b      	sxth	r3, r3
 8000380:	b2db      	uxtb	r3, r3
 8000382:	b21b      	sxth	r3, r3
 8000384:	4313      	orrs	r3, r2
 8000386:	b21b      	sxth	r3, r3
 8000388:	b29b      	uxth	r3, r3
 800038a:	4619      	mov	r1, r3
 800038c:	480a      	ldr	r0, [pc, #40]	@ (80003b8 <LCD_WRITE_COMMAND+0x9c>)
 800038e:	f000 fa1e 	bl	80007ce <MCAL_GPIO_WritePort>
    MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000392:	2200      	movs	r2, #0
 8000394:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000398:	4807      	ldr	r0, [pc, #28]	@ (80003b8 <LCD_WRITE_COMMAND+0x9c>)
 800039a:	f000 fa26 	bl	80007ea <MCAL_GPIO_WritePin>
    MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 800039e:	2200      	movs	r2, #0
 80003a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003a4:	4804      	ldr	r0, [pc, #16]	@ (80003b8 <LCD_WRITE_COMMAND+0x9c>)
 80003a6:	f000 fa20 	bl	80007ea <MCAL_GPIO_WritePin>
    LCD_lcd_kick();
 80003aa:	f7ff ff61 	bl	8000270 <LCD_lcd_kick>
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40010800 	.word	0x40010800

080003bc <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]
    // Send high nibble
    MCAL_GPIO_WritePort(LCD_CTRL, (MCAL_GPIO_ReadPort(LCD_CTRL) & 0x0F) | (character & 0xF0));
 80003c6:	4824      	ldr	r0, [pc, #144]	@ (8000458 <LCD_WRITE_CHAR+0x9c>)
 80003c8:	f000 f9f4 	bl	80007b4 <MCAL_GPIO_ReadPort>
 80003cc:	4603      	mov	r3, r0
 80003ce:	b21b      	sxth	r3, r3
 80003d0:	f003 030f 	and.w	r3, r3, #15
 80003d4:	b21a      	sxth	r2, r3
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	b21b      	sxth	r3, r3
 80003da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80003de:	b21b      	sxth	r3, r3
 80003e0:	4313      	orrs	r3, r2
 80003e2:	b21b      	sxth	r3, r3
 80003e4:	b29b      	uxth	r3, r3
 80003e6:	4619      	mov	r1, r3
 80003e8:	481b      	ldr	r0, [pc, #108]	@ (8000458 <LCD_WRITE_CHAR+0x9c>)
 80003ea:	f000 f9f0 	bl	80007ce <MCAL_GPIO_WritePort>
    MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80003ee:	2200      	movs	r2, #0
 80003f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003f4:	4818      	ldr	r0, [pc, #96]	@ (8000458 <LCD_WRITE_CHAR+0x9c>)
 80003f6:	f000 f9f8 	bl	80007ea <MCAL_GPIO_WritePin>
    MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000400:	4815      	ldr	r0, [pc, #84]	@ (8000458 <LCD_WRITE_CHAR+0x9c>)
 8000402:	f000 f9f2 	bl	80007ea <MCAL_GPIO_WritePin>
    LCD_lcd_kick();
 8000406:	f7ff ff33 	bl	8000270 <LCD_lcd_kick>

    // Send low nibble
    MCAL_GPIO_WritePort(LCD_CTRL, (MCAL_GPIO_ReadPort(LCD_CTRL) & 0x0F) | ((character << 4) & 0xF0));
 800040a:	4813      	ldr	r0, [pc, #76]	@ (8000458 <LCD_WRITE_CHAR+0x9c>)
 800040c:	f000 f9d2 	bl	80007b4 <MCAL_GPIO_ReadPort>
 8000410:	4603      	mov	r3, r0
 8000412:	b21b      	sxth	r3, r3
 8000414:	f003 030f 	and.w	r3, r3, #15
 8000418:	b21a      	sxth	r2, r3
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	011b      	lsls	r3, r3, #4
 800041e:	b21b      	sxth	r3, r3
 8000420:	b2db      	uxtb	r3, r3
 8000422:	b21b      	sxth	r3, r3
 8000424:	4313      	orrs	r3, r2
 8000426:	b21b      	sxth	r3, r3
 8000428:	b29b      	uxth	r3, r3
 800042a:	4619      	mov	r1, r3
 800042c:	480a      	ldr	r0, [pc, #40]	@ (8000458 <LCD_WRITE_CHAR+0x9c>)
 800042e:	f000 f9ce 	bl	80007ce <MCAL_GPIO_WritePort>
    MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000438:	4807      	ldr	r0, [pc, #28]	@ (8000458 <LCD_WRITE_CHAR+0x9c>)
 800043a:	f000 f9d6 	bl	80007ea <MCAL_GPIO_WritePin>
    MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 800043e:	2201      	movs	r2, #1
 8000440:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000444:	4804      	ldr	r0, [pc, #16]	@ (8000458 <LCD_WRITE_CHAR+0x9c>)
 8000446:	f000 f9d0 	bl	80007ea <MCAL_GPIO_WritePin>
    LCD_lcd_kick();
 800044a:	f7ff ff11 	bl	8000270 <LCD_lcd_kick>
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	40010800 	.word	0x40010800

0800045c <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char *string)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
    int count = 0;
 8000464:	2300      	movs	r3, #0
 8000466:	60fb      	str	r3, [r7, #12]
    while (*string > 0)
 8000468:	e01c      	b.n	80004a4 <LCD_WRITE_STRING+0x48>
    {
        count++;
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	3301      	adds	r3, #1
 800046e:	60fb      	str	r3, [r7, #12]
        LCD_WRITE_CHAR(*string++);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	1c5a      	adds	r2, r3, #1
 8000474:	607a      	str	r2, [r7, #4]
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	4618      	mov	r0, r3
 800047a:	f7ff ff9f 	bl	80003bc <LCD_WRITE_CHAR>
        if (count == 16)
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	2b10      	cmp	r3, #16
 8000482:	d104      	bne.n	800048e <LCD_WRITE_STRING+0x32>
        {
            LCD_GOTO_XY(2, 0);
 8000484:	2100      	movs	r1, #0
 8000486:	2002      	movs	r0, #2
 8000488:	f7ff ff08 	bl	800029c <LCD_GOTO_XY>
 800048c:	e00a      	b.n	80004a4 <LCD_WRITE_STRING+0x48>
        }
        else if (count == 32)
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	2b20      	cmp	r3, #32
 8000492:	d107      	bne.n	80004a4 <LCD_WRITE_STRING+0x48>
        {
            LCD_clear_screen();
 8000494:	f7ff fee4 	bl	8000260 <LCD_clear_screen>
            LCD_GOTO_XY(1, 0);
 8000498:	2100      	movs	r1, #0
 800049a:	2001      	movs	r0, #1
 800049c:	f7ff fefe 	bl	800029c <LCD_GOTO_XY>
            count = 0;
 80004a0:	2300      	movs	r3, #0
 80004a2:	60fb      	str	r3, [r7, #12]
    while (*string > 0)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d1de      	bne.n	800046a <LCD_WRITE_STRING+0xe>
        }
    }
}
 80004ac:	bf00      	nop
 80004ae:	bf00      	nop
 80004b0:	3710      	adds	r7, #16
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <delay_ms>:
 * =======================================================================================
 * 							Generic Functions
 * =======================================================================================
 */
void delay_ms(uint32_t time)
{
 80004b6:	b480      	push	{r7}
 80004b8:	b085      	sub	sp, #20
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
    uint32_t i, j;
    for (i = 0; i < time; i++)
 80004be:	2300      	movs	r3, #0
 80004c0:	60fb      	str	r3, [r7, #12]
 80004c2:	e00b      	b.n	80004dc <delay_ms+0x26>
        for (j = 0; j < 255; j++)
 80004c4:	2300      	movs	r3, #0
 80004c6:	60bb      	str	r3, [r7, #8]
 80004c8:	e002      	b.n	80004d0 <delay_ms+0x1a>
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	3301      	adds	r3, #1
 80004ce:	60bb      	str	r3, [r7, #8]
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	2bfe      	cmp	r3, #254	@ 0xfe
 80004d4:	d9f9      	bls.n	80004ca <delay_ms+0x14>
    for (i = 0; i < time; i++)
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	3301      	adds	r3, #1
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	68fa      	ldr	r2, [r7, #12]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d3ef      	bcc.n	80004c4 <delay_ms+0xe>
            ;
}
 80004e4:	bf00      	nop
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr

080004f0 <Get_CRLH_Position>:
uint8_t Get_CRLH_Position(uint16_t PinNumber)
    {
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	80fb      	strh	r3, [r7, #6]
    switch (PinNumber)
 80004fa:	88fb      	ldrh	r3, [r7, #6]
 80004fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000500:	f000 80a5 	beq.w	800064e <Get_CRLH_Position+0x15e>
 8000504:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000508:	f300 80a3 	bgt.w	8000652 <Get_CRLH_Position+0x162>
 800050c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000510:	f000 809b 	beq.w	800064a <Get_CRLH_Position+0x15a>
 8000514:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000518:	f300 809b 	bgt.w	8000652 <Get_CRLH_Position+0x162>
 800051c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000520:	f000 8091 	beq.w	8000646 <Get_CRLH_Position+0x156>
 8000524:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000528:	f300 8093 	bgt.w	8000652 <Get_CRLH_Position+0x162>
 800052c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000530:	f000 8087 	beq.w	8000642 <Get_CRLH_Position+0x152>
 8000534:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000538:	f300 808b 	bgt.w	8000652 <Get_CRLH_Position+0x162>
 800053c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000540:	d07d      	beq.n	800063e <Get_CRLH_Position+0x14e>
 8000542:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000546:	f300 8084 	bgt.w	8000652 <Get_CRLH_Position+0x162>
 800054a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800054e:	d074      	beq.n	800063a <Get_CRLH_Position+0x14a>
 8000550:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000554:	dc7d      	bgt.n	8000652 <Get_CRLH_Position+0x162>
 8000556:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800055a:	d06c      	beq.n	8000636 <Get_CRLH_Position+0x146>
 800055c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000560:	dc77      	bgt.n	8000652 <Get_CRLH_Position+0x162>
 8000562:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000566:	d064      	beq.n	8000632 <Get_CRLH_Position+0x142>
 8000568:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800056c:	dc71      	bgt.n	8000652 <Get_CRLH_Position+0x162>
 800056e:	2b80      	cmp	r3, #128	@ 0x80
 8000570:	d05d      	beq.n	800062e <Get_CRLH_Position+0x13e>
 8000572:	2b80      	cmp	r3, #128	@ 0x80
 8000574:	dc6d      	bgt.n	8000652 <Get_CRLH_Position+0x162>
 8000576:	2b20      	cmp	r3, #32
 8000578:	dc48      	bgt.n	800060c <Get_CRLH_Position+0x11c>
 800057a:	2b00      	cmp	r3, #0
 800057c:	dd69      	ble.n	8000652 <Get_CRLH_Position+0x162>
 800057e:	3b01      	subs	r3, #1
 8000580:	2b1f      	cmp	r3, #31
 8000582:	d866      	bhi.n	8000652 <Get_CRLH_Position+0x162>
 8000584:	a201      	add	r2, pc, #4	@ (adr r2, 800058c <Get_CRLH_Position+0x9c>)
 8000586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058a:	bf00      	nop
 800058c:	08000613 	.word	0x08000613
 8000590:	08000617 	.word	0x08000617
 8000594:	08000653 	.word	0x08000653
 8000598:	0800061b 	.word	0x0800061b
 800059c:	08000653 	.word	0x08000653
 80005a0:	08000653 	.word	0x08000653
 80005a4:	08000653 	.word	0x08000653
 80005a8:	0800061f 	.word	0x0800061f
 80005ac:	08000653 	.word	0x08000653
 80005b0:	08000653 	.word	0x08000653
 80005b4:	08000653 	.word	0x08000653
 80005b8:	08000653 	.word	0x08000653
 80005bc:	08000653 	.word	0x08000653
 80005c0:	08000653 	.word	0x08000653
 80005c4:	08000653 	.word	0x08000653
 80005c8:	08000623 	.word	0x08000623
 80005cc:	08000653 	.word	0x08000653
 80005d0:	08000653 	.word	0x08000653
 80005d4:	08000653 	.word	0x08000653
 80005d8:	08000653 	.word	0x08000653
 80005dc:	08000653 	.word	0x08000653
 80005e0:	08000653 	.word	0x08000653
 80005e4:	08000653 	.word	0x08000653
 80005e8:	08000653 	.word	0x08000653
 80005ec:	08000653 	.word	0x08000653
 80005f0:	08000653 	.word	0x08000653
 80005f4:	08000653 	.word	0x08000653
 80005f8:	08000653 	.word	0x08000653
 80005fc:	08000653 	.word	0x08000653
 8000600:	08000653 	.word	0x08000653
 8000604:	08000653 	.word	0x08000653
 8000608:	08000627 	.word	0x08000627
 800060c:	2b40      	cmp	r3, #64	@ 0x40
 800060e:	d00c      	beq.n	800062a <Get_CRLH_Position+0x13a>
 8000610:	e01f      	b.n	8000652 <Get_CRLH_Position+0x162>
	{
    case GPIO_PIN_0:
	return 0;
 8000612:	2300      	movs	r3, #0
 8000614:	e01e      	b.n	8000654 <Get_CRLH_Position+0x164>
	break;
    case GPIO_PIN_1:
	return 4;
 8000616:	2304      	movs	r3, #4
 8000618:	e01c      	b.n	8000654 <Get_CRLH_Position+0x164>
	break;

    case GPIO_PIN_2:
	return 8;
 800061a:	2308      	movs	r3, #8
 800061c:	e01a      	b.n	8000654 <Get_CRLH_Position+0x164>
	break;

    case GPIO_PIN_3:
	return 12;
 800061e:	230c      	movs	r3, #12
 8000620:	e018      	b.n	8000654 <Get_CRLH_Position+0x164>
	break;

    case GPIO_PIN_4:
	return 16;
 8000622:	2310      	movs	r3, #16
 8000624:	e016      	b.n	8000654 <Get_CRLH_Position+0x164>
	break;

    case GPIO_PIN_5:
	return 20;
 8000626:	2314      	movs	r3, #20
 8000628:	e014      	b.n	8000654 <Get_CRLH_Position+0x164>
	break;

    case GPIO_PIN_6:
	return 24;
 800062a:	2318      	movs	r3, #24
 800062c:	e012      	b.n	8000654 <Get_CRLH_Position+0x164>
	break;

    case GPIO_PIN_7:
	return 28;
 800062e:	231c      	movs	r3, #28
 8000630:	e010      	b.n	8000654 <Get_CRLH_Position+0x164>
	break;

    case GPIO_PIN_8:
	return 0;
 8000632:	2300      	movs	r3, #0
 8000634:	e00e      	b.n	8000654 <Get_CRLH_Position+0x164>
	break;
    case GPIO_PIN_9:
	return 4;
 8000636:	2304      	movs	r3, #4
 8000638:	e00c      	b.n	8000654 <Get_CRLH_Position+0x164>
	break;

    case GPIO_PIN_10:
	return 8;
 800063a:	2308      	movs	r3, #8
 800063c:	e00a      	b.n	8000654 <Get_CRLH_Position+0x164>
	break;

    case GPIO_PIN_11:
	return 12;
 800063e:	230c      	movs	r3, #12
 8000640:	e008      	b.n	8000654 <Get_CRLH_Position+0x164>
	break;

    case GPIO_PIN_12:
	return 16;
 8000642:	2310      	movs	r3, #16
 8000644:	e006      	b.n	8000654 <Get_CRLH_Position+0x164>
	break;

    case GPIO_PIN_13:
	return 20;
 8000646:	2314      	movs	r3, #20
 8000648:	e004      	b.n	8000654 <Get_CRLH_Position+0x164>
	break;

    case GPIO_PIN_14:
	return 24;
 800064a:	2318      	movs	r3, #24
 800064c:	e002      	b.n	8000654 <Get_CRLH_Position+0x164>
	break;

    case GPIO_PIN_15:
	return 28;
 800064e:	231c      	movs	r3, #28
 8000650:	e000      	b.n	8000654 <Get_CRLH_Position+0x164>
	break;

	}
    return 0;
 8000652:	2300      	movs	r3, #0

    }
 8000654:	4618      	mov	r0, r3
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <MCAL_GPIO_Init>:
 * @retval 		-none
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 			 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
    {
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
    volatile uint32_t *configregister = NULL;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
    uint8_t PIN_Config = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	72fb      	strb	r3, [r7, #11]

    configregister =
	    (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ?
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	881b      	ldrh	r3, [r3, #0]
		    &GPIOx->CRL : &GPIOx->CRH;
 8000676:	2bff      	cmp	r3, #255	@ 0xff
 8000678:	d801      	bhi.n	800067e <MCAL_GPIO_Init+0x1e>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	e001      	b.n	8000682 <MCAL_GPIO_Init+0x22>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	3304      	adds	r3, #4
    configregister =
 8000682:	60fb      	str	r3, [r7, #12]

    //CNF0[1:0] MODE0[1:0=]   Clear the four Bits
    (*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff31 	bl	80004f0 <Get_CRLH_Position>
 800068e:	4603      	mov	r3, r0
 8000690:	461a      	mov	r2, r3
 8000692:	230f      	movs	r3, #15
 8000694:	4093      	lsls	r3, r2
 8000696:	43da      	mvns	r2, r3
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	401a      	ands	r2, r3
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	601a      	str	r2, [r3, #0]

    //if Pin is output
    if ((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	789b      	ldrb	r3, [r3, #2]
 80006a6:	2b04      	cmp	r3, #4
 80006a8:	d00b      	beq.n	80006c2 <MCAL_GPIO_Init+0x62>
	    || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	789b      	ldrb	r3, [r3, #2]
 80006ae:	2b05      	cmp	r3, #5
 80006b0:	d007      	beq.n	80006c2 <MCAL_GPIO_Init+0x62>
	    || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	789b      	ldrb	r3, [r3, #2]
 80006b6:	2b07      	cmp	r3, #7
 80006b8:	d003      	beq.n	80006c2 <MCAL_GPIO_Init+0x62>
	    || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP))
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	789b      	ldrb	r3, [r3, #2]
 80006be:	2b06      	cmp	r3, #6
 80006c0:	d11c      	bne.n	80006fc <MCAL_GPIO_Init+0x9c>
	{
	PIN_Config = ((((PinConfig->GPIO_MODE - 4) << 2)
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	789b      	ldrb	r3, [r3, #2]
 80006c6:	3b04      	subs	r3, #4
 80006c8:	009b      	lsls	r3, r3, #2
		| PinConfig->GPIO_Output_Speed) & 0x0F);
 80006ca:	b25a      	sxtb	r2, r3
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	78db      	ldrb	r3, [r3, #3]
 80006d0:	b25b      	sxtb	r3, r3
 80006d2:	4313      	orrs	r3, r2
 80006d4:	b25b      	sxtb	r3, r3
 80006d6:	b2db      	uxtb	r3, r3
	PIN_Config = ((((PinConfig->GPIO_MODE - 4) << 2)
 80006d8:	f003 030f 	and.w	r3, r3, #15
 80006dc:	72fb      	strb	r3, [r7, #11]
	(*configregister) |= ((PIN_Config)
		<< (Get_CRLH_Position(PinConfig->GPIO_PinNumber)));
 80006de:	7afc      	ldrb	r4, [r7, #11]
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ff03 	bl	80004f0 <Get_CRLH_Position>
 80006ea:	4603      	mov	r3, r0
 80006ec:	fa04 f203 	lsl.w	r2, r4, r3
	(*configregister) |= ((PIN_Config)
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	431a      	orrs	r2, r3
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	601a      	str	r2, [r3, #0]
		<< (Get_CRLH_Position(PinConfig->GPIO_PinNumber)));
 80006fa:	e057      	b.n	80007ac <MCAL_GPIO_Init+0x14c>
	}
    //if pin is input
    else //MODE =  00: Input mode (reset state)
	{
	if ((PinConfig->GPIO_MODE == GPIO_MODE_ANALOG)
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	789b      	ldrb	r3, [r3, #2]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d003      	beq.n	800070c <MCAL_GPIO_Init+0xac>
		|| (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO))
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	789b      	ldrb	r3, [r3, #2]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d115      	bne.n	8000738 <MCAL_GPIO_Init+0xd8>
	    {
	    PIN_Config = (((PinConfig->GPIO_MODE << 2) | 0x0) & 0x0F);
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	789b      	ldrb	r3, [r3, #2]
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	b2db      	uxtb	r3, r3
 8000714:	f003 030f 	and.w	r3, r3, #15
 8000718:	72fb      	strb	r3, [r7, #11]
	    (*configregister) |= ((PIN_Config)
		    << (Get_CRLH_Position(PinConfig->GPIO_PinNumber)));
 800071a:	7afc      	ldrb	r4, [r7, #11]
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fee5 	bl	80004f0 <Get_CRLH_Position>
 8000726:	4603      	mov	r3, r0
 8000728:	fa04 f203 	lsl.w	r2, r4, r3
	    (*configregister) |= ((PIN_Config)
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	431a      	orrs	r2, r3
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	601a      	str	r2, [r3, #0]
		    << (Get_CRLH_Position(PinConfig->GPIO_PinNumber)));
 8000736:	e039      	b.n	80007ac <MCAL_GPIO_Init+0x14c>
	    }
	else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	789b      	ldrb	r3, [r3, #2]
 800073c:	2b08      	cmp	r3, #8
 800073e:	d110      	bne.n	8000762 <MCAL_GPIO_Init+0x102>
	    {
	    PIN_Config = ((( GPIO_MODE_INPUT_FLO << 2) | 0x0) & 0x0F);
 8000740:	2304      	movs	r3, #4
 8000742:	72fb      	strb	r3, [r7, #11]
	    (*configregister) |= ((PIN_Config)
		    << (Get_CRLH_Position(PinConfig->GPIO_PinNumber)));
 8000744:	7afc      	ldrb	r4, [r7, #11]
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	881b      	ldrh	r3, [r3, #0]
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff fed0 	bl	80004f0 <Get_CRLH_Position>
 8000750:	4603      	mov	r3, r0
 8000752:	fa04 f203 	lsl.w	r2, r4, r3
	    (*configregister) |= ((PIN_Config)
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	431a      	orrs	r2, r3
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	601a      	str	r2, [r3, #0]
		}

	    }
	}

    }
 8000760:	e024      	b.n	80007ac <MCAL_GPIO_Init+0x14c>
	    PIN_Config = ((( GPIO_MODE_INPUT_PU << 2) | 0x0) & 0x0F);
 8000762:	2308      	movs	r3, #8
 8000764:	72fb      	strb	r3, [r7, #11]
		    << (Get_CRLH_Position(PinConfig->GPIO_PinNumber)));
 8000766:	7afc      	ldrb	r4, [r7, #11]
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff febf 	bl	80004f0 <Get_CRLH_Position>
 8000772:	4603      	mov	r3, r0
 8000774:	fa04 f203 	lsl.w	r2, r4, r3
	    (*configregister) |= ((PIN_Config)
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	431a      	orrs	r2, r3
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	601a      	str	r2, [r3, #0]
	    if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	789b      	ldrb	r3, [r3, #2]
 8000786:	2b02      	cmp	r3, #2
 8000788:	d107      	bne.n	800079a <MCAL_GPIO_Init+0x13a>
		GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	68db      	ldr	r3, [r3, #12]
 800078e:	683a      	ldr	r2, [r7, #0]
 8000790:	8812      	ldrh	r2, [r2, #0]
 8000792:	431a      	orrs	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	60da      	str	r2, [r3, #12]
    }
 8000798:	e008      	b.n	80007ac <MCAL_GPIO_Init+0x14c>
		GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	68db      	ldr	r3, [r3, #12]
 800079e:	683a      	ldr	r2, [r7, #0]
 80007a0:	8812      	ldrh	r2, [r2, #0]
 80007a2:	43d2      	mvns	r2, r2
 80007a4:	401a      	ands	r2, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	60da      	str	r2, [r3, #12]
    }
 80007aa:	e7ff      	b.n	80007ac <MCAL_GPIO_Init+0x14c>
 80007ac:	bf00      	nop
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd90      	pop	{r4, r7, pc}

080007b4 <MCAL_GPIO_ReadPort>:
 * @param [in] 			-GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 * @retval 			-the input port VALUE
 * Note				-none
 */
uint16_t MCAL_GPIO_ReadPort(GPIO_TypeDef *GPIOx)
    {
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
    uint16_t port_value;
    port_value = (uint16_t) (GPIOx->IDR);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	81fb      	strh	r3, [r7, #14]
    return port_value;
 80007c2:	89fb      	ldrh	r3, [r7, #14]
    }
 80007c4:	4618      	mov	r0, r3
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr

080007ce <MCAL_GPIO_WritePort>:
 * @param [in] 			-GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 * @retval 				-none
 * Note					-none
 */
void MCAL_GPIO_WritePort(GPIO_TypeDef *GPIOx, uint16_t Value)
    {
 80007ce:	b480      	push	{r7}
 80007d0:	b083      	sub	sp, #12
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
 80007d6:	460b      	mov	r3, r1
 80007d8:	807b      	strh	r3, [r7, #2]

    GPIOx->ODR = (uint32_t) (Value);
 80007da:	887a      	ldrh	r2, [r7, #2]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	60da      	str	r2, [r3, #12]
    }
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr

080007ea <MCAL_GPIO_WritePin>:
 *
 * @retval 			-none
 * Note				-none
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t Value)
    {
 80007ea:	b480      	push	{r7}
 80007ec:	b083      	sub	sp, #12
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
 80007f2:	460b      	mov	r3, r1
 80007f4:	807b      	strh	r3, [r7, #2]
 80007f6:	4613      	mov	r3, r2
 80007f8:	707b      	strb	r3, [r7, #1]
    if (Value != GPIO_PIN_RESET)
 80007fa:	787b      	ldrb	r3, [r7, #1]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d003      	beq.n	8000808 <MCAL_GPIO_WritePin+0x1e>
	{
//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit
	GPIOx->BSRR = PinNumber;
 8000800:	887a      	ldrh	r2, [r7, #2]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	611a      	str	r2, [r3, #16]

//		or
//		GPIOx->ODR &= ~(PinNumber) ;
	}

    }
 8000806:	e002      	b.n	800080e <MCAL_GPIO_WritePin+0x24>
	GPIOx->BRR = (uint32_t) PinNumber;
 8000808:	887a      	ldrh	r2, [r7, #2]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	615a      	str	r2, [r3, #20]
    }
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr

08000818 <Enable_NVIC>:
    (x == GPIOD) ? 3 : 0)

 void (*G_IRQ_Callback[16])(void);

void Enable_NVIC(uint8_t IRQ)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
    switch (IRQ)
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	2b0f      	cmp	r3, #15
 8000826:	d854      	bhi.n	80008d2 <Enable_NVIC+0xba>
 8000828:	a201      	add	r2, pc, #4	@ (adr r2, 8000830 <Enable_NVIC+0x18>)
 800082a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800082e:	bf00      	nop
 8000830:	08000871 	.word	0x08000871
 8000834:	0800087f 	.word	0x0800087f
 8000838:	0800088d 	.word	0x0800088d
 800083c:	0800089b 	.word	0x0800089b
 8000840:	080008a9 	.word	0x080008a9
 8000844:	080008b7 	.word	0x080008b7
 8000848:	080008b7 	.word	0x080008b7
 800084c:	080008b7 	.word	0x080008b7
 8000850:	080008b7 	.word	0x080008b7
 8000854:	080008b7 	.word	0x080008b7
 8000858:	080008c5 	.word	0x080008c5
 800085c:	080008c5 	.word	0x080008c5
 8000860:	080008c5 	.word	0x080008c5
 8000864:	080008c5 	.word	0x080008c5
 8000868:	080008c5 	.word	0x080008c5
 800086c:	080008c5 	.word	0x080008c5
    {
        case 0: NVIC_IRQ6_EXTI0_Enable(); break;
 8000870:	4b1a      	ldr	r3, [pc, #104]	@ (80008dc <Enable_NVIC+0xc4>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a19      	ldr	r2, [pc, #100]	@ (80008dc <Enable_NVIC+0xc4>)
 8000876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800087a:	6013      	str	r3, [r2, #0]
 800087c:	e029      	b.n	80008d2 <Enable_NVIC+0xba>
        case 1: NVIC_IRQ7_EXTI1_Enable(); break;
 800087e:	4b17      	ldr	r3, [pc, #92]	@ (80008dc <Enable_NVIC+0xc4>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a16      	ldr	r2, [pc, #88]	@ (80008dc <Enable_NVIC+0xc4>)
 8000884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000888:	6013      	str	r3, [r2, #0]
 800088a:	e022      	b.n	80008d2 <Enable_NVIC+0xba>
        case 2: NVIC_IRQ8_EXTI2_Enable(); break;
 800088c:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <Enable_NVIC+0xc4>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a12      	ldr	r2, [pc, #72]	@ (80008dc <Enable_NVIC+0xc4>)
 8000892:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000896:	6013      	str	r3, [r2, #0]
 8000898:	e01b      	b.n	80008d2 <Enable_NVIC+0xba>
        case 3: NVIC_IRQ9_EXTI3_Enable(); break;
 800089a:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <Enable_NVIC+0xc4>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a0f      	ldr	r2, [pc, #60]	@ (80008dc <Enable_NVIC+0xc4>)
 80008a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008a4:	6013      	str	r3, [r2, #0]
 80008a6:	e014      	b.n	80008d2 <Enable_NVIC+0xba>
        case 4: NVIC_IRQ10_EXTI4_Enable(); break;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <Enable_NVIC+0xc4>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a0b      	ldr	r2, [pc, #44]	@ (80008dc <Enable_NVIC+0xc4>)
 80008ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008b2:	6013      	str	r3, [r2, #0]
 80008b4:	e00d      	b.n	80008d2 <Enable_NVIC+0xba>
        case 5: case 6: case 7: case 8: case 9: NVIC_IRQ23_EXTI5_9_Enable(); break;
 80008b6:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <Enable_NVIC+0xc4>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a08      	ldr	r2, [pc, #32]	@ (80008dc <Enable_NVIC+0xc4>)
 80008bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80008c0:	6013      	str	r3, [r2, #0]
 80008c2:	e006      	b.n	80008d2 <Enable_NVIC+0xba>
        case 10: case 11: case 12: case 13: case 14: case 15: NVIC_IRQ40_EXTI10_15_Enable(); break;
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <Enable_NVIC+0xc8>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a05      	ldr	r2, [pc, #20]	@ (80008e0 <Enable_NVIC+0xc8>)
 80008ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008ce:	6013      	str	r3, [r2, #0]
 80008d0:	bf00      	nop
    }
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	e000e100 	.word	0xe000e100
 80008e0:	e000e104 	.word	0xe000e104

080008e4 <Disable_NVIC>:

void Disable_NVIC(uint8_t IRQ)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
    switch (IRQ)
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	2b0f      	cmp	r3, #15
 80008f2:	d854      	bhi.n	800099e <Disable_NVIC+0xba>
 80008f4:	a201      	add	r2, pc, #4	@ (adr r2, 80008fc <Disable_NVIC+0x18>)
 80008f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008fa:	bf00      	nop
 80008fc:	0800093d 	.word	0x0800093d
 8000900:	0800094b 	.word	0x0800094b
 8000904:	08000959 	.word	0x08000959
 8000908:	08000967 	.word	0x08000967
 800090c:	08000975 	.word	0x08000975
 8000910:	08000983 	.word	0x08000983
 8000914:	08000983 	.word	0x08000983
 8000918:	08000983 	.word	0x08000983
 800091c:	08000983 	.word	0x08000983
 8000920:	08000983 	.word	0x08000983
 8000924:	08000991 	.word	0x08000991
 8000928:	08000991 	.word	0x08000991
 800092c:	08000991 	.word	0x08000991
 8000930:	08000991 	.word	0x08000991
 8000934:	08000991 	.word	0x08000991
 8000938:	08000991 	.word	0x08000991
    {
        case 0: NVIC_IRQ6_EXTI0_Disable(); break;
 800093c:	4b1a      	ldr	r3, [pc, #104]	@ (80009a8 <Disable_NVIC+0xc4>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a19      	ldr	r2, [pc, #100]	@ (80009a8 <Disable_NVIC+0xc4>)
 8000942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000946:	6013      	str	r3, [r2, #0]
 8000948:	e029      	b.n	800099e <Disable_NVIC+0xba>
        case 1: NVIC_IRQ7_EXTI1_Disable(); break;
 800094a:	4b17      	ldr	r3, [pc, #92]	@ (80009a8 <Disable_NVIC+0xc4>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a16      	ldr	r2, [pc, #88]	@ (80009a8 <Disable_NVIC+0xc4>)
 8000950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000954:	6013      	str	r3, [r2, #0]
 8000956:	e022      	b.n	800099e <Disable_NVIC+0xba>
        case 2: NVIC_IRQ8_EXTI2_Disable(); break;
 8000958:	4b13      	ldr	r3, [pc, #76]	@ (80009a8 <Disable_NVIC+0xc4>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a12      	ldr	r2, [pc, #72]	@ (80009a8 <Disable_NVIC+0xc4>)
 800095e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000962:	6013      	str	r3, [r2, #0]
 8000964:	e01b      	b.n	800099e <Disable_NVIC+0xba>
        case 3: NVIC_IRQ9_EXTI3_Disable(); break;
 8000966:	4b10      	ldr	r3, [pc, #64]	@ (80009a8 <Disable_NVIC+0xc4>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a0f      	ldr	r2, [pc, #60]	@ (80009a8 <Disable_NVIC+0xc4>)
 800096c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000970:	6013      	str	r3, [r2, #0]
 8000972:	e014      	b.n	800099e <Disable_NVIC+0xba>
        case 4: NVIC_IRQ10_EXTI4_Disable(); break;
 8000974:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <Disable_NVIC+0xc4>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a0b      	ldr	r2, [pc, #44]	@ (80009a8 <Disable_NVIC+0xc4>)
 800097a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800097e:	6013      	str	r3, [r2, #0]
 8000980:	e00d      	b.n	800099e <Disable_NVIC+0xba>
        case 5: case 6: case 7: case 8: case 9: NVIC_IRQ23_EXTI5_9_Disable(); break;
 8000982:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <Disable_NVIC+0xc4>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a08      	ldr	r2, [pc, #32]	@ (80009a8 <Disable_NVIC+0xc4>)
 8000988:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800098c:	6013      	str	r3, [r2, #0]
 800098e:	e006      	b.n	800099e <Disable_NVIC+0xba>
        case 10: case 11: case 12: case 13: case 14: case 15: NVIC_IRQ40_EXTI10_15_Disable(); break;
 8000990:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <Disable_NVIC+0xc8>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a05      	ldr	r2, [pc, #20]	@ (80009ac <Disable_NVIC+0xc8>)
 8000996:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800099a:	6013      	str	r3, [r2, #0]
 800099c:	bf00      	nop
    }
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	e000e180 	.word	0xe000e180
 80009ac:	e000e184 	.word	0xe000e184

080009b0 <MCAL_EXTI_GPIO_Init>:
 * This function initializes the EXTI configuration based on the provided configuration structure.
 *
 * @param EXTI_Cfg Pointer to an EXTI_PinConfig_t structure that contains the configuration parameters.
 */
void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t *EXTI_Cfg)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
    Update_EXTI(EXTI_Cfg);
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f000 f805 	bl	80009c8 <Update_EXTI>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <Update_EXTI>:
 *
 * @param EXTI_Cfg Pointer to an EXTI_PinConfig_t structure that contains the updated configuration parameters.
 * @note This function is static and should not be called directly from outside this file.
 */
 void Update_EXTI(EXTI_PinConfig_t *EXTI_Cfg)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
    // Implement EXTI configuration update based on EXTI_Cfg
    GPIO_PinConfig_t PinCFG;
    PinCFG.GPIO_MODE = GPIO_MODE_AF_INPUT;
 80009d0:	2308      	movs	r3, #8
 80009d2:	72bb      	strb	r3, [r7, #10]
    PinCFG.GPIO_PinNumber = EXTI_Cfg->EXI_Pin.GPIO_Pin;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	891b      	ldrh	r3, [r3, #8]
 80009d8:	813b      	strh	r3, [r7, #8]
    MCAL_GPIO_Init(EXTI_Cfg->EXI_Pin.GPIOx, &PinCFG);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f107 0208 	add.w	r2, r7, #8
 80009e2:	4611      	mov	r1, r2
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fe3b 	bl	8000660 <MCAL_GPIO_Init>

    // Update the Port
    uint8_t AFIO_EXTICR_index = (EXTI_Cfg->EXI_Pin.EXTI_InputLine_Number) / 4;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	089b      	lsrs	r3, r3, #2
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	73fb      	strb	r3, [r7, #15]
    uint8_t AFIO_EXTICR_Position = (EXTI_Cfg->EXI_Pin.EXTI_InputLine_Number) % 4;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	f003 0303 	and.w	r3, r3, #3
 80009fe:	73bb      	strb	r3, [r7, #14]

    // Clear AFIO register
    AFIO->EXTICR[AFIO_EXTICR_index] &= ~(0xF << AFIO_EXTICR_Position);
 8000a00:	4a62      	ldr	r2, [pc, #392]	@ (8000b8c <Update_EXTI+0x1c4>)
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	3302      	adds	r3, #2
 8000a06:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a0a:	7bbb      	ldrb	r3, [r7, #14]
 8000a0c:	210f      	movs	r1, #15
 8000a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a12:	43db      	mvns	r3, r3
 8000a14:	4618      	mov	r0, r3
 8000a16:	495d      	ldr	r1, [pc, #372]	@ (8000b8c <Update_EXTI+0x1c4>)
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
 8000a1a:	4002      	ands	r2, r0
 8000a1c:	3302      	adds	r3, #2
 8000a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    AFIO->EXTICR[AFIO_EXTICR_index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_Cfg->EXI_Pin.GPIOx) & 0xF) << AFIO_EXTICR_Position);
 8000a22:	4a5a      	ldr	r2, [pc, #360]	@ (8000b8c <Update_EXTI+0x1c4>)
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	3302      	adds	r3, #2
 8000a28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	4957      	ldr	r1, [pc, #348]	@ (8000b90 <Update_EXTI+0x1c8>)
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d016      	beq.n	8000a64 <Update_EXTI+0x9c>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	4956      	ldr	r1, [pc, #344]	@ (8000b94 <Update_EXTI+0x1cc>)
 8000a3c:	428b      	cmp	r3, r1
 8000a3e:	d00f      	beq.n	8000a60 <Update_EXTI+0x98>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	4954      	ldr	r1, [pc, #336]	@ (8000b98 <Update_EXTI+0x1d0>)
 8000a46:	428b      	cmp	r3, r1
 8000a48:	d008      	beq.n	8000a5c <Update_EXTI+0x94>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	4953      	ldr	r1, [pc, #332]	@ (8000b9c <Update_EXTI+0x1d4>)
 8000a50:	428b      	cmp	r3, r1
 8000a52:	d101      	bne.n	8000a58 <Update_EXTI+0x90>
 8000a54:	2303      	movs	r3, #3
 8000a56:	e006      	b.n	8000a66 <Update_EXTI+0x9e>
 8000a58:	2300      	movs	r3, #0
 8000a5a:	e004      	b.n	8000a66 <Update_EXTI+0x9e>
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	e002      	b.n	8000a66 <Update_EXTI+0x9e>
 8000a60:	2301      	movs	r3, #1
 8000a62:	e000      	b.n	8000a66 <Update_EXTI+0x9e>
 8000a64:	2300      	movs	r3, #0
 8000a66:	7bb9      	ldrb	r1, [r7, #14]
 8000a68:	408b      	lsls	r3, r1
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	4947      	ldr	r1, [pc, #284]	@ (8000b8c <Update_EXTI+0x1c4>)
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
 8000a70:	4302      	orrs	r2, r0
 8000a72:	3302      	adds	r3, #2
 8000a74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // Clear previous configurations
    EXTI->RTSR &= ~(1 << EXTI_Cfg->EXI_Pin.EXTI_InputLine_Number);
 8000a78:	4b49      	ldr	r3, [pc, #292]	@ (8000ba0 <Update_EXTI+0x1d8>)
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	8812      	ldrh	r2, [r2, #0]
 8000a80:	4611      	mov	r1, r2
 8000a82:	2201      	movs	r2, #1
 8000a84:	408a      	lsls	r2, r1
 8000a86:	43d2      	mvns	r2, r2
 8000a88:	4611      	mov	r1, r2
 8000a8a:	4a45      	ldr	r2, [pc, #276]	@ (8000ba0 <Update_EXTI+0x1d8>)
 8000a8c:	400b      	ands	r3, r1
 8000a8e:	6093      	str	r3, [r2, #8]
    EXTI->FTSR &= ~(1 << EXTI_Cfg->EXI_Pin.EXTI_InputLine_Number);
 8000a90:	4b43      	ldr	r3, [pc, #268]	@ (8000ba0 <Update_EXTI+0x1d8>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	8812      	ldrh	r2, [r2, #0]
 8000a98:	4611      	mov	r1, r2
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	408a      	lsls	r2, r1
 8000a9e:	43d2      	mvns	r2, r2
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	4a3f      	ldr	r2, [pc, #252]	@ (8000ba0 <Update_EXTI+0x1d8>)
 8000aa4:	400b      	ands	r3, r1
 8000aa6:	60d3      	str	r3, [r2, #12]

    // Set trigger conditions
    if (EXTI_Cfg->Trigger_Case == EXTI_Trigger_FALLING)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	7b1b      	ldrb	r3, [r3, #12]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d10b      	bne.n	8000ac8 <Update_EXTI+0x100>
    {
        EXTI->FTSR |= (1 << EXTI_Cfg->EXI_Pin.EXTI_InputLine_Number);
 8000ab0:	4b3b      	ldr	r3, [pc, #236]	@ (8000ba0 <Update_EXTI+0x1d8>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	8812      	ldrh	r2, [r2, #0]
 8000ab8:	4611      	mov	r1, r2
 8000aba:	2201      	movs	r2, #1
 8000abc:	408a      	lsls	r2, r1
 8000abe:	4611      	mov	r1, r2
 8000ac0:	4a37      	ldr	r2, [pc, #220]	@ (8000ba0 <Update_EXTI+0x1d8>)
 8000ac2:	430b      	orrs	r3, r1
 8000ac4:	60d3      	str	r3, [r2, #12]
 8000ac6:	e029      	b.n	8000b1c <Update_EXTI+0x154>
    }
    else if (EXTI_Cfg->Trigger_Case == EXTI_Trigger_RISING)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	7b1b      	ldrb	r3, [r3, #12]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d10b      	bne.n	8000ae8 <Update_EXTI+0x120>
    {
        EXTI->RTSR |= (1 << EXTI_Cfg->EXI_Pin.EXTI_InputLine_Number);
 8000ad0:	4b33      	ldr	r3, [pc, #204]	@ (8000ba0 <Update_EXTI+0x1d8>)
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	8812      	ldrh	r2, [r2, #0]
 8000ad8:	4611      	mov	r1, r2
 8000ada:	2201      	movs	r2, #1
 8000adc:	408a      	lsls	r2, r1
 8000ade:	4611      	mov	r1, r2
 8000ae0:	4a2f      	ldr	r2, [pc, #188]	@ (8000ba0 <Update_EXTI+0x1d8>)
 8000ae2:	430b      	orrs	r3, r1
 8000ae4:	6093      	str	r3, [r2, #8]
 8000ae6:	e019      	b.n	8000b1c <Update_EXTI+0x154>
    }
    else if (EXTI_Cfg->Trigger_Case == EXTI_Trigger_RISING_AND_FALLING)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	7b1b      	ldrb	r3, [r3, #12]
 8000aec:	2b02      	cmp	r3, #2
 8000aee:	d115      	bne.n	8000b1c <Update_EXTI+0x154>
    {
        EXTI->RTSR |= (1 << EXTI_Cfg->EXI_Pin.EXTI_InputLine_Number);
 8000af0:	4b2b      	ldr	r3, [pc, #172]	@ (8000ba0 <Update_EXTI+0x1d8>)
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	8812      	ldrh	r2, [r2, #0]
 8000af8:	4611      	mov	r1, r2
 8000afa:	2201      	movs	r2, #1
 8000afc:	408a      	lsls	r2, r1
 8000afe:	4611      	mov	r1, r2
 8000b00:	4a27      	ldr	r2, [pc, #156]	@ (8000ba0 <Update_EXTI+0x1d8>)
 8000b02:	430b      	orrs	r3, r1
 8000b04:	6093      	str	r3, [r2, #8]
        EXTI->FTSR |= (1 << EXTI_Cfg->EXI_Pin.EXTI_InputLine_Number);
 8000b06:	4b26      	ldr	r3, [pc, #152]	@ (8000ba0 <Update_EXTI+0x1d8>)
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	8812      	ldrh	r2, [r2, #0]
 8000b0e:	4611      	mov	r1, r2
 8000b10:	2201      	movs	r2, #1
 8000b12:	408a      	lsls	r2, r1
 8000b14:	4611      	mov	r1, r2
 8000b16:	4a22      	ldr	r2, [pc, #136]	@ (8000ba0 <Update_EXTI+0x1d8>)
 8000b18:	430b      	orrs	r3, r1
 8000b1a:	60d3      	str	r3, [r2, #12]
    }

    // Set callback
    G_IRQ_Callback[EXTI_Cfg->EXI_Pin.EXTI_InputLine_Number] = EXTI_Cfg->P_IRQ_CallBack;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	4619      	mov	r1, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	691b      	ldr	r3, [r3, #16]
 8000b26:	4a1f      	ldr	r2, [pc, #124]	@ (8000ba4 <Update_EXTI+0x1dc>)
 8000b28:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

    // Enable or disable interrupts
    if (EXTI_Cfg->IRQ_EN == EXTI_IRQ_Enable)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	7b5b      	ldrb	r3, [r3, #13]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d111      	bne.n	8000b58 <Update_EXTI+0x190>
    {
        EXTI->IMR |= (1 << EXTI_Cfg->EXI_Pin.EXTI_InputLine_Number);
 8000b34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba0 <Update_EXTI+0x1d8>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	8812      	ldrh	r2, [r2, #0]
 8000b3c:	4611      	mov	r1, r2
 8000b3e:	2201      	movs	r2, #1
 8000b40:	408a      	lsls	r2, r1
 8000b42:	4611      	mov	r1, r2
 8000b44:	4a16      	ldr	r2, [pc, #88]	@ (8000ba0 <Update_EXTI+0x1d8>)
 8000b46:	430b      	orrs	r3, r1
 8000b48:	6013      	str	r3, [r2, #0]
        Enable_NVIC(EXTI_Cfg->EXI_Pin.EXTI_InputLine_Number);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fe61 	bl	8000818 <Enable_NVIC>
    else if (EXTI_Cfg->IRQ_EN == EXTI_IRQ_Disable)
    {
        EXTI->IMR &= ~(1 << EXTI_Cfg->EXI_Pin.EXTI_InputLine_Number);
        Disable_NVIC(EXTI_Cfg->EXI_Pin.EXTI_InputLine_Number);
    }
}
 8000b56:	e015      	b.n	8000b84 <Update_EXTI+0x1bc>
    else if (EXTI_Cfg->IRQ_EN == EXTI_IRQ_Disable)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	7b5b      	ldrb	r3, [r3, #13]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d111      	bne.n	8000b84 <Update_EXTI+0x1bc>
        EXTI->IMR &= ~(1 << EXTI_Cfg->EXI_Pin.EXTI_InputLine_Number);
 8000b60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba0 <Update_EXTI+0x1d8>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	8812      	ldrh	r2, [r2, #0]
 8000b68:	4611      	mov	r1, r2
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	408a      	lsls	r2, r1
 8000b6e:	43d2      	mvns	r2, r2
 8000b70:	4611      	mov	r1, r2
 8000b72:	4a0b      	ldr	r2, [pc, #44]	@ (8000ba0 <Update_EXTI+0x1d8>)
 8000b74:	400b      	ands	r3, r1
 8000b76:	6013      	str	r3, [r2, #0]
        Disable_NVIC(EXTI_Cfg->EXI_Pin.EXTI_InputLine_Number);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff feb0 	bl	80008e4 <Disable_NVIC>
}
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40010000 	.word	0x40010000
 8000b90:	40010800 	.word	0x40010800
 8000b94:	40010c00 	.word	0x40010c00
 8000b98:	40011000 	.word	0x40011000
 8000b9c:	40011400 	.word	0x40011400
 8000ba0:	40010400 	.word	0x40010400
 8000ba4:	20000020 	.word	0x20000020

08000ba8 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
    EXTI->PR |= (1 << 0);
 8000bac:	4b05      	ldr	r3, [pc, #20]	@ (8000bc4 <EXTI0_IRQHandler+0x1c>)
 8000bae:	695b      	ldr	r3, [r3, #20]
 8000bb0:	4a04      	ldr	r2, [pc, #16]	@ (8000bc4 <EXTI0_IRQHandler+0x1c>)
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	6153      	str	r3, [r2, #20]
    G_IRQ_Callback[0]();
 8000bb8:	4b03      	ldr	r3, [pc, #12]	@ (8000bc8 <EXTI0_IRQHandler+0x20>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4798      	blx	r3
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40010400 	.word	0x40010400
 8000bc8:	20000020 	.word	0x20000020

08000bcc <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
    EXTI->PR |= (1 << 1);
 8000bd0:	4b05      	ldr	r3, [pc, #20]	@ (8000be8 <EXTI1_IRQHandler+0x1c>)
 8000bd2:	695b      	ldr	r3, [r3, #20]
 8000bd4:	4a04      	ldr	r2, [pc, #16]	@ (8000be8 <EXTI1_IRQHandler+0x1c>)
 8000bd6:	f043 0302 	orr.w	r3, r3, #2
 8000bda:	6153      	str	r3, [r2, #20]
    G_IRQ_Callback[1]();
 8000bdc:	4b03      	ldr	r3, [pc, #12]	@ (8000bec <EXTI1_IRQHandler+0x20>)
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	4798      	blx	r3
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40010400 	.word	0x40010400
 8000bec:	20000020 	.word	0x20000020

08000bf0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
    EXTI->PR |= (1 << 2);
 8000bf4:	4b05      	ldr	r3, [pc, #20]	@ (8000c0c <EXTI2_IRQHandler+0x1c>)
 8000bf6:	695b      	ldr	r3, [r3, #20]
 8000bf8:	4a04      	ldr	r2, [pc, #16]	@ (8000c0c <EXTI2_IRQHandler+0x1c>)
 8000bfa:	f043 0304 	orr.w	r3, r3, #4
 8000bfe:	6153      	str	r3, [r2, #20]
    G_IRQ_Callback[2]();
 8000c00:	4b03      	ldr	r3, [pc, #12]	@ (8000c10 <EXTI2_IRQHandler+0x20>)
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	4798      	blx	r3
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40010400 	.word	0x40010400
 8000c10:	20000020 	.word	0x20000020

08000c14 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
    EXTI->PR |= (1 << 3);
 8000c18:	4b05      	ldr	r3, [pc, #20]	@ (8000c30 <EXTI3_IRQHandler+0x1c>)
 8000c1a:	695b      	ldr	r3, [r3, #20]
 8000c1c:	4a04      	ldr	r2, [pc, #16]	@ (8000c30 <EXTI3_IRQHandler+0x1c>)
 8000c1e:	f043 0308 	orr.w	r3, r3, #8
 8000c22:	6153      	str	r3, [r2, #20]
    G_IRQ_Callback[3]();
 8000c24:	4b03      	ldr	r3, [pc, #12]	@ (8000c34 <EXTI3_IRQHandler+0x20>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	4798      	blx	r3
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40010400 	.word	0x40010400
 8000c34:	20000020 	.word	0x20000020

08000c38 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
    EXTI->PR |= (1 << 4);
 8000c3c:	4b05      	ldr	r3, [pc, #20]	@ (8000c54 <EXTI4_IRQHandler+0x1c>)
 8000c3e:	695b      	ldr	r3, [r3, #20]
 8000c40:	4a04      	ldr	r2, [pc, #16]	@ (8000c54 <EXTI4_IRQHandler+0x1c>)
 8000c42:	f043 0310 	orr.w	r3, r3, #16
 8000c46:	6153      	str	r3, [r2, #20]
    G_IRQ_Callback[4]();
 8000c48:	4b03      	ldr	r3, [pc, #12]	@ (8000c58 <EXTI4_IRQHandler+0x20>)
 8000c4a:	691b      	ldr	r3, [r3, #16]
 8000c4c:	4798      	blx	r3
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40010400 	.word	0x40010400
 8000c58:	20000020 	.word	0x20000020

08000c5c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 5))
 8000c60:	4b26      	ldr	r3, [pc, #152]	@ (8000cfc <EXTI9_5_IRQHandler+0xa0>)
 8000c62:	695b      	ldr	r3, [r3, #20]
 8000c64:	f003 0320 	and.w	r3, r3, #32
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d008      	beq.n	8000c7e <EXTI9_5_IRQHandler+0x22>
    {
        EXTI->PR |= (1 << 5);
 8000c6c:	4b23      	ldr	r3, [pc, #140]	@ (8000cfc <EXTI9_5_IRQHandler+0xa0>)
 8000c6e:	695b      	ldr	r3, [r3, #20]
 8000c70:	4a22      	ldr	r2, [pc, #136]	@ (8000cfc <EXTI9_5_IRQHandler+0xa0>)
 8000c72:	f043 0320 	orr.w	r3, r3, #32
 8000c76:	6153      	str	r3, [r2, #20]
        G_IRQ_Callback[5]();
 8000c78:	4b21      	ldr	r3, [pc, #132]	@ (8000d00 <EXTI9_5_IRQHandler+0xa4>)
 8000c7a:	695b      	ldr	r3, [r3, #20]
 8000c7c:	4798      	blx	r3
    }
    if (EXTI->PR & (1 << 6))
 8000c7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cfc <EXTI9_5_IRQHandler+0xa0>)
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d008      	beq.n	8000c9c <EXTI9_5_IRQHandler+0x40>
    {
        EXTI->PR |= (1 << 6);
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cfc <EXTI9_5_IRQHandler+0xa0>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	4a1b      	ldr	r2, [pc, #108]	@ (8000cfc <EXTI9_5_IRQHandler+0xa0>)
 8000c90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c94:	6153      	str	r3, [r2, #20]
        G_IRQ_Callback[6]();
 8000c96:	4b1a      	ldr	r3, [pc, #104]	@ (8000d00 <EXTI9_5_IRQHandler+0xa4>)
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	4798      	blx	r3
    }
    if (EXTI->PR & (1 << 7))
 8000c9c:	4b17      	ldr	r3, [pc, #92]	@ (8000cfc <EXTI9_5_IRQHandler+0xa0>)
 8000c9e:	695b      	ldr	r3, [r3, #20]
 8000ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d008      	beq.n	8000cba <EXTI9_5_IRQHandler+0x5e>
    {
        EXTI->PR |= (1 << 7);
 8000ca8:	4b14      	ldr	r3, [pc, #80]	@ (8000cfc <EXTI9_5_IRQHandler+0xa0>)
 8000caa:	695b      	ldr	r3, [r3, #20]
 8000cac:	4a13      	ldr	r2, [pc, #76]	@ (8000cfc <EXTI9_5_IRQHandler+0xa0>)
 8000cae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cb2:	6153      	str	r3, [r2, #20]
        G_IRQ_Callback[7]();
 8000cb4:	4b12      	ldr	r3, [pc, #72]	@ (8000d00 <EXTI9_5_IRQHandler+0xa4>)
 8000cb6:	69db      	ldr	r3, [r3, #28]
 8000cb8:	4798      	blx	r3
    }
    if (EXTI->PR & (1 << 8))
 8000cba:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <EXTI9_5_IRQHandler+0xa0>)
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d008      	beq.n	8000cd8 <EXTI9_5_IRQHandler+0x7c>
    {
        EXTI->PR |= (1 << 8);
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cfc <EXTI9_5_IRQHandler+0xa0>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	4a0c      	ldr	r2, [pc, #48]	@ (8000cfc <EXTI9_5_IRQHandler+0xa0>)
 8000ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cd0:	6153      	str	r3, [r2, #20]
        G_IRQ_Callback[8]();
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d00 <EXTI9_5_IRQHandler+0xa4>)
 8000cd4:	6a1b      	ldr	r3, [r3, #32]
 8000cd6:	4798      	blx	r3
    }
    if (EXTI->PR & (1 << 9))
 8000cd8:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <EXTI9_5_IRQHandler+0xa0>)
 8000cda:	695b      	ldr	r3, [r3, #20]
 8000cdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d008      	beq.n	8000cf6 <EXTI9_5_IRQHandler+0x9a>
    {
        EXTI->PR |= (1 << 9);
 8000ce4:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <EXTI9_5_IRQHandler+0xa0>)
 8000ce6:	695b      	ldr	r3, [r3, #20]
 8000ce8:	4a04      	ldr	r2, [pc, #16]	@ (8000cfc <EXTI9_5_IRQHandler+0xa0>)
 8000cea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cee:	6153      	str	r3, [r2, #20]
        G_IRQ_Callback[9]();
 8000cf0:	4b03      	ldr	r3, [pc, #12]	@ (8000d00 <EXTI9_5_IRQHandler+0xa4>)
 8000cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cf4:	4798      	blx	r3
    }
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40010400 	.word	0x40010400
 8000d00:	20000020 	.word	0x20000020

08000d04 <ISR>:

#include "../HAL/inc/keypad.h"
#include "../HAL/inc/lcd.h"
#include "stm32f103c6_EXTI_Driver.h"
void ISR(void)
    {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
    LCD_clear_screen();
 8000d08:	f7ff faaa 	bl	8000260 <LCD_clear_screen>
    LCD_WRITE_STRING((char*) "ISR Enabled");
 8000d0c:	4805      	ldr	r0, [pc, #20]	@ (8000d24 <ISR+0x20>)
 8000d0e:	f7ff fba5 	bl	800045c <LCD_WRITE_STRING>
    delay_ms(3000);
 8000d12:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000d16:	f7ff fbce 	bl	80004b6 <delay_ms>
    LCD_clear_screen();
 8000d1a:	f7ff faa1 	bl	8000260 <LCD_clear_screen>
    }
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	08000e20 	.word	0x08000e20

08000d28 <main>:
int main(void)
    {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0
    LCD_INIT();
 8000d2e:	f7ff fad9 	bl	80002e4 <LCD_INIT>
    EXTI_PinConfig_t  Exti_Pin;
    Exti_Pin.EXI_Pin = EXTI0PA0
 8000d32:	4a0b      	ldr	r2, [pc, #44]	@ (8000d60 <main+0x38>)
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    ;
    Exti_Pin.IRQ_EN = EXTI_IRQ_Enable;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	767b      	strb	r3, [r7, #25]
    Exti_Pin.Trigger_Case = EXTI_Trigger_RISING;
 8000d42:	2300      	movs	r3, #0
 8000d44:	763b      	strb	r3, [r7, #24]
    Exti_Pin.P_IRQ_CallBack = ISR;
 8000d46:	4b07      	ldr	r3, [pc, #28]	@ (8000d64 <main+0x3c>)
 8000d48:	61fb      	str	r3, [r7, #28]
    MCAL_EXTI_GPIO_Init(&Exti_Pin);
 8000d4a:	f107 030c 	add.w	r3, r7, #12
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fe2e 	bl	80009b0 <MCAL_EXTI_GPIO_Init>
    LCD_WRITE_STRING((char*) "ISR Waiting")
 8000d54:	4804      	ldr	r0, [pc, #16]	@ (8000d68 <main+0x40>)
 8000d56:	f7ff fb81 	bl	800045c <LCD_WRITE_STRING>
	;
    while(1){
 8000d5a:	bf00      	nop
 8000d5c:	e7fd      	b.n	8000d5a <main+0x32>
 8000d5e:	bf00      	nop
 8000d60:	08000e38 	.word	0x08000e38
 8000d64:	08000d05 	.word	0x08000d05
 8000d68:	08000e2c 	.word	0x08000e2c

08000d6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d6c:	480d      	ldr	r0, [pc, #52]	@ (8000da4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d6e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d70:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d74:	480c      	ldr	r0, [pc, #48]	@ (8000da8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d76:	490d      	ldr	r1, [pc, #52]	@ (8000dac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d78:	4a0d      	ldr	r2, [pc, #52]	@ (8000db0 <LoopForever+0xe>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d7c:	e002      	b.n	8000d84 <LoopCopyDataInit>

08000d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d82:	3304      	adds	r3, #4

08000d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d88:	d3f9      	bcc.n	8000d7e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000db4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000db8 <LoopForever+0x16>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d90:	e001      	b.n	8000d96 <LoopFillZerobss>

08000d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d94:	3204      	adds	r2, #4

08000d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d98:	d3fb      	bcc.n	8000d92 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d9a:	f000 f811 	bl	8000dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d9e:	f7ff ffc3 	bl	8000d28 <main>

08000da2 <LoopForever>:

LoopForever:
  b LoopForever
 8000da2:	e7fe      	b.n	8000da2 <LoopForever>
  ldr   r0, =_estack
 8000da4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dac:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000db0:	08000e4c 	.word	0x08000e4c
  ldr r2, =_sbss
 8000db4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000db8:	20000060 	.word	0x20000060

08000dbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC1_2_IRQHandler>
	...

08000dc0 <__libc_init_array>:
 8000dc0:	b570      	push	{r4, r5, r6, lr}
 8000dc2:	2600      	movs	r6, #0
 8000dc4:	4d0c      	ldr	r5, [pc, #48]	@ (8000df8 <__libc_init_array+0x38>)
 8000dc6:	4c0d      	ldr	r4, [pc, #52]	@ (8000dfc <__libc_init_array+0x3c>)
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	10a4      	asrs	r4, r4, #2
 8000dcc:	42a6      	cmp	r6, r4
 8000dce:	d109      	bne.n	8000de4 <__libc_init_array+0x24>
 8000dd0:	f000 f81a 	bl	8000e08 <_init>
 8000dd4:	2600      	movs	r6, #0
 8000dd6:	4d0a      	ldr	r5, [pc, #40]	@ (8000e00 <__libc_init_array+0x40>)
 8000dd8:	4c0a      	ldr	r4, [pc, #40]	@ (8000e04 <__libc_init_array+0x44>)
 8000dda:	1b64      	subs	r4, r4, r5
 8000ddc:	10a4      	asrs	r4, r4, #2
 8000dde:	42a6      	cmp	r6, r4
 8000de0:	d105      	bne.n	8000dee <__libc_init_array+0x2e>
 8000de2:	bd70      	pop	{r4, r5, r6, pc}
 8000de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000de8:	4798      	blx	r3
 8000dea:	3601      	adds	r6, #1
 8000dec:	e7ee      	b.n	8000dcc <__libc_init_array+0xc>
 8000dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8000df2:	4798      	blx	r3
 8000df4:	3601      	adds	r6, #1
 8000df6:	e7f2      	b.n	8000dde <__libc_init_array+0x1e>
 8000df8:	08000e44 	.word	0x08000e44
 8000dfc:	08000e44 	.word	0x08000e44
 8000e00:	08000e44 	.word	0x08000e44
 8000e04:	08000e48 	.word	0x08000e48

08000e08 <_init>:
 8000e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e0a:	bf00      	nop
 8000e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e0e:	bc08      	pop	{r3}
 8000e10:	469e      	mov	lr, r3
 8000e12:	4770      	bx	lr

08000e14 <_fini>:
 8000e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e16:	bf00      	nop
 8000e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e1a:	bc08      	pop	{r3}
 8000e1c:	469e      	mov	lr, r3
 8000e1e:	4770      	bx	lr
