
Stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003dc  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800050c  08000514  00001514  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800050c  0800050c  00001514  2**0
                  CONTENTS
  4 .ARM          00000000  0800050c  0800050c  00001514  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800050c  08000514  00001514  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800050c  0800050c  0000150c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000510  08000510  00001510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001514  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000000  08000514  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08000514  000020b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001514  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000237b  00000000  00000000  0000153d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008ce  00000000  00000000  000038b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00001526  00000000  00000000  00004186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000220  00000000  00000000  000056b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001c8  00000000  00000000  000058d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000c62  00000000  00000000  00005a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000032d2  00000000  00000000  000066fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000cb2b  00000000  00000000  000099cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000164f7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004b8  00000000  00000000  0001653c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080004f4 	.word	0x080004f4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080004f4 	.word	0x080004f4

08000170 <EXTI0_IRQHandler>:
        Disable_NVIC(EXTI_Cfg->EXI_Pin.EXTI_InputLine_Number);
    }
}

void EXTI0_IRQHandler(void)
{
 8000170:	b508      	push	{r3, lr}
    EXTI->PR |= (1 << 0);
 8000172:	4a04      	ldr	r2, [pc, #16]	@ (8000184 <EXTI0_IRQHandler+0x14>)
 8000174:	6953      	ldr	r3, [r2, #20]
 8000176:	f043 0301 	orr.w	r3, r3, #1
 800017a:	6153      	str	r3, [r2, #20]
    G_IRQ_Callback[0]();
 800017c:	4b02      	ldr	r3, [pc, #8]	@ (8000188 <EXTI0_IRQHandler+0x18>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	4798      	blx	r3
}
 8000182:	bd08      	pop	{r3, pc}
 8000184:	40010400 	.word	0x40010400
 8000188:	2000001c 	.word	0x2000001c

0800018c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800018c:	b508      	push	{r3, lr}
    EXTI->PR |= (1 << 1);
 800018e:	4a04      	ldr	r2, [pc, #16]	@ (80001a0 <EXTI1_IRQHandler+0x14>)
 8000190:	6953      	ldr	r3, [r2, #20]
 8000192:	f043 0302 	orr.w	r3, r3, #2
 8000196:	6153      	str	r3, [r2, #20]
    G_IRQ_Callback[1]();
 8000198:	4b02      	ldr	r3, [pc, #8]	@ (80001a4 <EXTI1_IRQHandler+0x18>)
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	4798      	blx	r3
}
 800019e:	bd08      	pop	{r3, pc}
 80001a0:	40010400 	.word	0x40010400
 80001a4:	2000001c 	.word	0x2000001c

080001a8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80001a8:	b508      	push	{r3, lr}
    EXTI->PR |= (1 << 2);
 80001aa:	4a04      	ldr	r2, [pc, #16]	@ (80001bc <EXTI2_IRQHandler+0x14>)
 80001ac:	6953      	ldr	r3, [r2, #20]
 80001ae:	f043 0304 	orr.w	r3, r3, #4
 80001b2:	6153      	str	r3, [r2, #20]
    G_IRQ_Callback[2]();
 80001b4:	4b02      	ldr	r3, [pc, #8]	@ (80001c0 <EXTI2_IRQHandler+0x18>)
 80001b6:	689b      	ldr	r3, [r3, #8]
 80001b8:	4798      	blx	r3
}
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	40010400 	.word	0x40010400
 80001c0:	2000001c 	.word	0x2000001c

080001c4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80001c4:	b508      	push	{r3, lr}
    EXTI->PR |= (1 << 3);
 80001c6:	4a04      	ldr	r2, [pc, #16]	@ (80001d8 <EXTI3_IRQHandler+0x14>)
 80001c8:	6953      	ldr	r3, [r2, #20]
 80001ca:	f043 0308 	orr.w	r3, r3, #8
 80001ce:	6153      	str	r3, [r2, #20]
    G_IRQ_Callback[3]();
 80001d0:	4b02      	ldr	r3, [pc, #8]	@ (80001dc <EXTI3_IRQHandler+0x18>)
 80001d2:	68db      	ldr	r3, [r3, #12]
 80001d4:	4798      	blx	r3
}
 80001d6:	bd08      	pop	{r3, pc}
 80001d8:	40010400 	.word	0x40010400
 80001dc:	2000001c 	.word	0x2000001c

080001e0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80001e0:	b508      	push	{r3, lr}
    EXTI->PR |= (1 << 4);
 80001e2:	4a04      	ldr	r2, [pc, #16]	@ (80001f4 <EXTI4_IRQHandler+0x14>)
 80001e4:	6953      	ldr	r3, [r2, #20]
 80001e6:	f043 0310 	orr.w	r3, r3, #16
 80001ea:	6153      	str	r3, [r2, #20]
    G_IRQ_Callback[4]();
 80001ec:	4b02      	ldr	r3, [pc, #8]	@ (80001f8 <EXTI4_IRQHandler+0x18>)
 80001ee:	691b      	ldr	r3, [r3, #16]
 80001f0:	4798      	blx	r3
}
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	40010400 	.word	0x40010400
 80001f8:	2000001c 	.word	0x2000001c

080001fc <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80001fc:	b508      	push	{r3, lr}
    if (EXTI->PR & (1 << 5))
 80001fe:	4b21      	ldr	r3, [pc, #132]	@ (8000284 <EXTI9_5_IRQHandler+0x88>)
 8000200:	695b      	ldr	r3, [r3, #20]
 8000202:	f013 0f20 	tst.w	r3, #32
 8000206:	d007      	beq.n	8000218 <EXTI9_5_IRQHandler+0x1c>
    {
        EXTI->PR |= (1 << 5);
 8000208:	4a1e      	ldr	r2, [pc, #120]	@ (8000284 <EXTI9_5_IRQHandler+0x88>)
 800020a:	6953      	ldr	r3, [r2, #20]
 800020c:	f043 0320 	orr.w	r3, r3, #32
 8000210:	6153      	str	r3, [r2, #20]
        G_IRQ_Callback[5]();
 8000212:	4b1d      	ldr	r3, [pc, #116]	@ (8000288 <EXTI9_5_IRQHandler+0x8c>)
 8000214:	695b      	ldr	r3, [r3, #20]
 8000216:	4798      	blx	r3
    }
    if (EXTI->PR & (1 << 6))
 8000218:	4b1a      	ldr	r3, [pc, #104]	@ (8000284 <EXTI9_5_IRQHandler+0x88>)
 800021a:	695b      	ldr	r3, [r3, #20]
 800021c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8000220:	d007      	beq.n	8000232 <EXTI9_5_IRQHandler+0x36>
    {
        EXTI->PR |= (1 << 6);
 8000222:	4a18      	ldr	r2, [pc, #96]	@ (8000284 <EXTI9_5_IRQHandler+0x88>)
 8000224:	6953      	ldr	r3, [r2, #20]
 8000226:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800022a:	6153      	str	r3, [r2, #20]
        G_IRQ_Callback[6]();
 800022c:	4b16      	ldr	r3, [pc, #88]	@ (8000288 <EXTI9_5_IRQHandler+0x8c>)
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	4798      	blx	r3
    }
    if (EXTI->PR & (1 << 7))
 8000232:	4b14      	ldr	r3, [pc, #80]	@ (8000284 <EXTI9_5_IRQHandler+0x88>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800023a:	d007      	beq.n	800024c <EXTI9_5_IRQHandler+0x50>
    {
        EXTI->PR |= (1 << 7);
 800023c:	4a11      	ldr	r2, [pc, #68]	@ (8000284 <EXTI9_5_IRQHandler+0x88>)
 800023e:	6953      	ldr	r3, [r2, #20]
 8000240:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000244:	6153      	str	r3, [r2, #20]
        G_IRQ_Callback[7]();
 8000246:	4b10      	ldr	r3, [pc, #64]	@ (8000288 <EXTI9_5_IRQHandler+0x8c>)
 8000248:	69db      	ldr	r3, [r3, #28]
 800024a:	4798      	blx	r3
    }
    if (EXTI->PR & (1 << 8))
 800024c:	4b0d      	ldr	r3, [pc, #52]	@ (8000284 <EXTI9_5_IRQHandler+0x88>)
 800024e:	695b      	ldr	r3, [r3, #20]
 8000250:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000254:	d007      	beq.n	8000266 <EXTI9_5_IRQHandler+0x6a>
    {
        EXTI->PR |= (1 << 8);
 8000256:	4a0b      	ldr	r2, [pc, #44]	@ (8000284 <EXTI9_5_IRQHandler+0x88>)
 8000258:	6953      	ldr	r3, [r2, #20]
 800025a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800025e:	6153      	str	r3, [r2, #20]
        G_IRQ_Callback[8]();
 8000260:	4b09      	ldr	r3, [pc, #36]	@ (8000288 <EXTI9_5_IRQHandler+0x8c>)
 8000262:	6a1b      	ldr	r3, [r3, #32]
 8000264:	4798      	blx	r3
    }
    if (EXTI->PR & (1 << 9))
 8000266:	4b07      	ldr	r3, [pc, #28]	@ (8000284 <EXTI9_5_IRQHandler+0x88>)
 8000268:	695b      	ldr	r3, [r3, #20]
 800026a:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800026e:	d007      	beq.n	8000280 <EXTI9_5_IRQHandler+0x84>
    {
        EXTI->PR |= (1 << 9);
 8000270:	4a04      	ldr	r2, [pc, #16]	@ (8000284 <EXTI9_5_IRQHandler+0x88>)
 8000272:	6953      	ldr	r3, [r2, #20]
 8000274:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000278:	6153      	str	r3, [r2, #20]
        G_IRQ_Callback[9]();
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <EXTI9_5_IRQHandler+0x8c>)
 800027c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800027e:	4798      	blx	r3
    }
}
 8000280:	bd08      	pop	{r3, pc}
 8000282:	bf00      	nop
 8000284:	40010400 	.word	0x40010400
 8000288:	2000001c 	.word	0x2000001c

0800028c <I2C1_ER_IRQHandler>:
    }

void I2C1_ER_IRQHandler(void)
    {

    }
 800028c:	4770      	bx	lr
	...

08000290 <Slave_States>:
	    }
	}

    }
void Slave_States(I2C_TypeDef *I2Cx, Slave_State state)
    {
 8000290:	b508      	push	{r3, lr}
    uint8_t index = I2Cx == I2C1 ? I2C1_INDEX : I2C2_INDEX;
 8000292:	4b1e      	ldr	r3, [pc, #120]	@ (800030c <Slave_States+0x7c>)
 8000294:	1ac3      	subs	r3, r0, r3
 8000296:	bf18      	it	ne
 8000298:	2301      	movne	r3, #1

    switch (state)
 800029a:	2904      	cmp	r1, #4
 800029c:	d805      	bhi.n	80002aa <Slave_States+0x1a>
 800029e:	e8df f001 	tbb	[pc, r1]
 80002a2:	0305      	.short	0x0305
 80002a4:	1b12      	.short	0x1b12
 80002a6:	28          	.byte	0x28
 80002a7:	00          	.byte	0x00
	{

    case I2C_ERROR_AF:
	{
	//make sure that the slave is really in transmitter mode
	if (I2Cx->I2C_SR2 & ( I2C_SR2_TRA))
 80002a8:	6983      	ldr	r3, [r0, #24]

	break;
	}
	}

    }
 80002aa:	bd08      	pop	{r3, pc}
	if (I2Cx->I2C_SR2 & ( I2C_SR2_TRA))
 80002ac:	6982      	ldr	r2, [r0, #24]
 80002ae:	f012 0f04 	tst.w	r2, #4
 80002b2:	d0fa      	beq.n	80002aa <Slave_States+0x1a>
	    Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_STOP);
 80002b4:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80002b8:	4a15      	ldr	r2, [pc, #84]	@ (8000310 <Slave_States+0x80>)
 80002ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80002be:	6a1b      	ldr	r3, [r3, #32]
 80002c0:	2000      	movs	r0, #0
 80002c2:	4798      	blx	r3
 80002c4:	e7f1      	b.n	80002aa <Slave_States+0x1a>
	Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_ADDR_Matched);
 80002c6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80002ca:	4a11      	ldr	r2, [pc, #68]	@ (8000310 <Slave_States+0x80>)
 80002cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80002d0:	6a1b      	ldr	r3, [r3, #32]
 80002d2:	2002      	movs	r0, #2
 80002d4:	4798      	blx	r3
	break;
 80002d6:	e7e8      	b.n	80002aa <Slave_States+0x1a>
	if (I2Cx->I2C_SR2 & ( I2C_SR2_TRA))
 80002d8:	6982      	ldr	r2, [r0, #24]
 80002da:	f012 0f04 	tst.w	r2, #4
 80002de:	d0e4      	beq.n	80002aa <Slave_States+0x1a>
	    Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_DATA_REQ);
 80002e0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80002e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000310 <Slave_States+0x80>)
 80002e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80002ea:	6a1b      	ldr	r3, [r3, #32]
 80002ec:	2003      	movs	r0, #3
 80002ee:	4798      	blx	r3
 80002f0:	e7db      	b.n	80002aa <Slave_States+0x1a>
	if (!(I2Cx->I2C_SR2 & ( I2C_SR2_TRA)))
 80002f2:	6982      	ldr	r2, [r0, #24]
 80002f4:	f012 0f04 	tst.w	r2, #4
 80002f8:	d1d7      	bne.n	80002aa <Slave_States+0x1a>
	    Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_DATA_RCV);
 80002fa:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80002fe:	4a04      	ldr	r2, [pc, #16]	@ (8000310 <Slave_States+0x80>)
 8000300:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000304:	6a1b      	ldr	r3, [r3, #32]
 8000306:	2004      	movs	r0, #4
 8000308:	4798      	blx	r3
    }
 800030a:	e7ce      	b.n	80002aa <Slave_States+0x1a>
 800030c:	40005400 	.word	0x40005400
 8000310:	2000005c 	.word	0x2000005c

08000314 <I2C1_EV_IRQHandler>:
    {
 8000314:	b530      	push	{r4, r5, lr}
 8000316:	b083      	sub	sp, #12
    volatile uint32_t dummy_read = 0;
 8000318:	2300      	movs	r3, #0
 800031a:	9301      	str	r3, [sp, #4]
    temp1 = I2Cx->I2C_CR2 & ( I2C_CR2_ITEVTEN);
 800031c:	4b25      	ldr	r3, [pc, #148]	@ (80003b4 <I2C1_EV_IRQHandler+0xa0>)
 800031e:	685c      	ldr	r4, [r3, #4]
    temp2 = I2Cx->I2C_CR2 & ( I2C_CR2_ITBUFEN);
 8000320:	685d      	ldr	r5, [r3, #4]
 8000322:	f405 6580 	and.w	r5, r5, #1024	@ 0x400
    temp3 = I2Cx->I2C_SR1 & ( I2C_SR1_STOPF);
 8000326:	695b      	ldr	r3, [r3, #20]
    if (temp1 && temp3)
 8000328:	f414 7400 	ands.w	r4, r4, #512	@ 0x200
 800032c:	d002      	beq.n	8000334 <I2C1_EV_IRQHandler+0x20>
 800032e:	f003 0310 	and.w	r3, r3, #16
 8000332:	bb23      	cbnz	r3, 800037e <I2C1_EV_IRQHandler+0x6a>
    temp3 = I2Cx->I2C_SR1 & (I2C_SR1_ADDR);
 8000334:	4b1f      	ldr	r3, [pc, #124]	@ (80003b4 <I2C1_EV_IRQHandler+0xa0>)
 8000336:	695b      	ldr	r3, [r3, #20]
 8000338:	f003 0302 	and.w	r3, r3, #2
    if (temp1 && temp3)
 800033c:	b12c      	cbz	r4, 800034a <I2C1_EV_IRQHandler+0x36>
 800033e:	b123      	cbz	r3, 800034a <I2C1_EV_IRQHandler+0x36>
	if (I2Cx->I2C_SR2 & ( I2C_SR2_MSL))
 8000340:	4b1c      	ldr	r3, [pc, #112]	@ (80003b4 <I2C1_EV_IRQHandler+0xa0>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	f013 0f01 	tst.w	r3, #1
 8000348:	d020      	beq.n	800038c <I2C1_EV_IRQHandler+0x78>
    temp3 = I2Cx->I2C_SR1 & ( I2C_SR1_TXE);
 800034a:	4b1a      	ldr	r3, [pc, #104]	@ (80003b4 <I2C1_EV_IRQHandler+0xa0>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
    if (temp1 && temp2 && temp3)
 8000352:	b134      	cbz	r4, 8000362 <I2C1_EV_IRQHandler+0x4e>
 8000354:	b12d      	cbz	r5, 8000362 <I2C1_EV_IRQHandler+0x4e>
 8000356:	b123      	cbz	r3, 8000362 <I2C1_EV_IRQHandler+0x4e>
	if (I2Cx->I2C_SR2 & (I2C_SR2_MSL))
 8000358:	4b16      	ldr	r3, [pc, #88]	@ (80003b4 <I2C1_EV_IRQHandler+0xa0>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	f013 0f01 	tst.w	r3, #1
 8000360:	d01d      	beq.n	800039e <I2C1_EV_IRQHandler+0x8a>
    temp3 = I2Cx->I2C_SR1 & ( I2C_SR1_RXNE);
 8000362:	4b14      	ldr	r3, [pc, #80]	@ (80003b4 <I2C1_EV_IRQHandler+0xa0>)
 8000364:	695b      	ldr	r3, [r3, #20]
 8000366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if (temp1 && temp2 && temp3)
 800036a:	b134      	cbz	r4, 800037a <I2C1_EV_IRQHandler+0x66>
 800036c:	b12d      	cbz	r5, 800037a <I2C1_EV_IRQHandler+0x66>
 800036e:	b123      	cbz	r3, 800037a <I2C1_EV_IRQHandler+0x66>
	if (I2Cx->I2C_SR2 & ( I2C_SR2_MSL))
 8000370:	4b10      	ldr	r3, [pc, #64]	@ (80003b4 <I2C1_EV_IRQHandler+0xa0>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f013 0f01 	tst.w	r3, #1
 8000378:	d016      	beq.n	80003a8 <I2C1_EV_IRQHandler+0x94>
    }
 800037a:	b003      	add	sp, #12
 800037c:	bd30      	pop	{r4, r5, pc}
	I2Cx->I2C_CR1 |= 0x0000;
 800037e:	480d      	ldr	r0, [pc, #52]	@ (80003b4 <I2C1_EV_IRQHandler+0xa0>)
 8000380:	6803      	ldr	r3, [r0, #0]
 8000382:	6003      	str	r3, [r0, #0]
	Slave_States(I2Cx, I2C_EV_STOP);
 8000384:	2100      	movs	r1, #0
 8000386:	f7ff ff83 	bl	8000290 <Slave_States>
 800038a:	e7d3      	b.n	8000334 <I2C1_EV_IRQHandler+0x20>
	    dummy_read = I2Cx->I2C_SR1;
 800038c:	4809      	ldr	r0, [pc, #36]	@ (80003b4 <I2C1_EV_IRQHandler+0xa0>)
 800038e:	6943      	ldr	r3, [r0, #20]
 8000390:	9301      	str	r3, [sp, #4]
	    dummy_read = I2Cx->I2C_SR2;
 8000392:	6983      	ldr	r3, [r0, #24]
 8000394:	9301      	str	r3, [sp, #4]
	    Slave_States(I2Cx, I2C_EV_ADDR_Matched);
 8000396:	2102      	movs	r1, #2
 8000398:	f7ff ff7a 	bl	8000290 <Slave_States>
 800039c:	e7d5      	b.n	800034a <I2C1_EV_IRQHandler+0x36>
	    Slave_States(I2Cx, I2C_EV_DATA_REQ);
 800039e:	2103      	movs	r1, #3
 80003a0:	4804      	ldr	r0, [pc, #16]	@ (80003b4 <I2C1_EV_IRQHandler+0xa0>)
 80003a2:	f7ff ff75 	bl	8000290 <Slave_States>
 80003a6:	e7dc      	b.n	8000362 <I2C1_EV_IRQHandler+0x4e>
	    Slave_States(I2Cx, I2C_EV_DATA_RCV);
 80003a8:	2104      	movs	r1, #4
 80003aa:	4802      	ldr	r0, [pc, #8]	@ (80003b4 <I2C1_EV_IRQHandler+0xa0>)
 80003ac:	f7ff ff70 	bl	8000290 <Slave_States>
    }
 80003b0:	e7e3      	b.n	800037a <I2C1_EV_IRQHandler+0x66>
 80003b2:	bf00      	nop
 80003b4:	40005400 	.word	0x40005400

080003b8 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
    {

    }
 80003b8:	4770      	bx	lr

080003ba <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
    {

    }
 80003ba:	4770      	bx	lr

080003bc <SPI1_IRQHandler>:
 *                          Generic Functions
 * =======================================================================================
 */
// ISR
void SPI1_IRQHandler(void)
{
 80003bc:	b508      	push	{r3, lr}
    struct S_IRQ_SRC irq_src;
    irq_src.TXE = ((SPI1->SPI_SR & (1 << 1)) >> 1);
 80003be:	4b0a      	ldr	r3, [pc, #40]	@ (80003e8 <SPI1_IRQHandler+0x2c>)
 80003c0:	689a      	ldr	r2, [r3, #8]
 80003c2:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80003c6:	f04f 0000 	mov.w	r0, #0
 80003ca:	f362 0000 	bfi	r0, r2, #0, #1
    irq_src.RXNE = ((SPI1->SPI_SR & (1 << 0)) >> 0);
 80003ce:	689a      	ldr	r2, [r3, #8]
 80003d0:	f362 0041 	bfi	r0, r2, #1, #1
    irq_src.ERRI = ((SPI1->SPI_SR & (1 << 4)) >> 4);
 80003d4:	689b      	ldr	r3, [r3, #8]
 80003d6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80003da:	f363 0082 	bfi	r0, r3, #2, #1

    Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(irq_src);
 80003de:	4b03      	ldr	r3, [pc, #12]	@ (80003ec <SPI1_IRQHandler+0x30>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	695b      	ldr	r3, [r3, #20]
 80003e4:	4798      	blx	r3
}
 80003e6:	bd08      	pop	{r3, pc}
 80003e8:	40013000 	.word	0x40013000
 80003ec:	200000a4 	.word	0x200000a4

080003f0 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 80003f0:	b508      	push	{r3, lr}
    struct S_IRQ_SRC irq_src;
    irq_src.TXE = ((SPI2->SPI_SR & (1 << 1)) >> 1);
 80003f2:	4b0a      	ldr	r3, [pc, #40]	@ (800041c <SPI2_IRQHandler+0x2c>)
 80003f4:	689a      	ldr	r2, [r3, #8]
 80003f6:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80003fa:	f04f 0000 	mov.w	r0, #0
 80003fe:	f362 0000 	bfi	r0, r2, #0, #1
    irq_src.RXNE = ((SPI2->SPI_SR & (1 << 0)) >> 0);
 8000402:	689a      	ldr	r2, [r3, #8]
 8000404:	f362 0041 	bfi	r0, r2, #1, #1
    irq_src.ERRI = ((SPI2->SPI_SR & (1 << 4)) >> 4);
 8000408:	689b      	ldr	r3, [r3, #8]
 800040a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800040e:	f363 0082 	bfi	r0, r3, #2, #1

    Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(irq_src);
 8000412:	4b03      	ldr	r3, [pc, #12]	@ (8000420 <SPI2_IRQHandler+0x30>)
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	695b      	ldr	r3, [r3, #20]
 8000418:	4798      	blx	r3
}
 800041a:	bd08      	pop	{r3, pc}
 800041c:	40003800 	.word	0x40003800
 8000420:	200000a4 	.word	0x200000a4

08000424 <USART1_IRQHandler>:
	}
    }

//ISR
void USART1_IRQHandler(void)
    {
 8000424:	b508      	push	{r3, lr}

    Global_UART_Config->P_IRQ_CallBack();
 8000426:	4b02      	ldr	r3, [pc, #8]	@ (8000430 <USART1_IRQHandler+0xc>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	691b      	ldr	r3, [r3, #16]
 800042c:	4798      	blx	r3

    }
 800042e:	bd08      	pop	{r3, pc}
 8000430:	200000ac 	.word	0x200000ac

08000434 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
    {
 8000434:	b508      	push	{r3, lr}
    Global_UART_Config->P_IRQ_CallBack();
 8000436:	4b02      	ldr	r3, [pc, #8]	@ (8000440 <USART2_IRQHandler+0xc>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	691b      	ldr	r3, [r3, #16]
 800043c:	4798      	blx	r3

    }
 800043e:	bd08      	pop	{r3, pc}
 8000440:	200000ac 	.word	0x200000ac

08000444 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
    {
 8000444:	b508      	push	{r3, lr}
    Global_UART_Config->P_IRQ_CallBack();
 8000446:	4b02      	ldr	r3, [pc, #8]	@ (8000450 <USART3_IRQHandler+0xc>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	691b      	ldr	r3, [r3, #16]
 800044c:	4798      	blx	r3

    }
 800044e:	bd08      	pop	{r3, pc}
 8000450:	200000ac 	.word	0x200000ac

08000454 <main>:
int main(void)
    {
    // Enable necessary clocks


    while (1)
 8000454:	e7fe      	b.n	8000454 <main>
	...

08000458 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000458:	480d      	ldr	r0, [pc, #52]	@ (8000490 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800045a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800045c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000460:	480c      	ldr	r0, [pc, #48]	@ (8000494 <LoopForever+0x6>)
  ldr r1, =_edata
 8000462:	490d      	ldr	r1, [pc, #52]	@ (8000498 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000464:	4a0d      	ldr	r2, [pc, #52]	@ (800049c <LoopForever+0xe>)
  movs r3, #0
 8000466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000468:	e002      	b.n	8000470 <LoopCopyDataInit>

0800046a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800046a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800046c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800046e:	3304      	adds	r3, #4

08000470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000474:	d3f9      	bcc.n	800046a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000476:	4a0a      	ldr	r2, [pc, #40]	@ (80004a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000478:	4c0a      	ldr	r4, [pc, #40]	@ (80004a4 <LoopForever+0x16>)
  movs r3, #0
 800047a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800047c:	e001      	b.n	8000482 <LoopFillZerobss>

0800047e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800047e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000480:	3204      	adds	r2, #4

08000482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000484:	d3fb      	bcc.n	800047e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000486:	f000 f811 	bl	80004ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800048a:	f7ff ffe3 	bl	8000454 <main>

0800048e <LoopForever>:

LoopForever:
  b LoopForever
 800048e:	e7fe      	b.n	800048e <LoopForever>
  ldr   r0, =_estack
 8000490:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000498:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800049c:	08000514 	.word	0x08000514
  ldr r2, =_sbss
 80004a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004a4:	200000b0 	.word	0x200000b0

080004a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004a8:	e7fe      	b.n	80004a8 <ADC1_2_IRQHandler>
	...

080004ac <__libc_init_array>:
 80004ac:	b570      	push	{r4, r5, r6, lr}
 80004ae:	2600      	movs	r6, #0
 80004b0:	4d0c      	ldr	r5, [pc, #48]	@ (80004e4 <__libc_init_array+0x38>)
 80004b2:	4c0d      	ldr	r4, [pc, #52]	@ (80004e8 <__libc_init_array+0x3c>)
 80004b4:	1b64      	subs	r4, r4, r5
 80004b6:	10a4      	asrs	r4, r4, #2
 80004b8:	42a6      	cmp	r6, r4
 80004ba:	d109      	bne.n	80004d0 <__libc_init_array+0x24>
 80004bc:	f000 f81a 	bl	80004f4 <_init>
 80004c0:	2600      	movs	r6, #0
 80004c2:	4d0a      	ldr	r5, [pc, #40]	@ (80004ec <__libc_init_array+0x40>)
 80004c4:	4c0a      	ldr	r4, [pc, #40]	@ (80004f0 <__libc_init_array+0x44>)
 80004c6:	1b64      	subs	r4, r4, r5
 80004c8:	10a4      	asrs	r4, r4, #2
 80004ca:	42a6      	cmp	r6, r4
 80004cc:	d105      	bne.n	80004da <__libc_init_array+0x2e>
 80004ce:	bd70      	pop	{r4, r5, r6, pc}
 80004d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004d4:	4798      	blx	r3
 80004d6:	3601      	adds	r6, #1
 80004d8:	e7ee      	b.n	80004b8 <__libc_init_array+0xc>
 80004da:	f855 3b04 	ldr.w	r3, [r5], #4
 80004de:	4798      	blx	r3
 80004e0:	3601      	adds	r6, #1
 80004e2:	e7f2      	b.n	80004ca <__libc_init_array+0x1e>
 80004e4:	0800050c 	.word	0x0800050c
 80004e8:	0800050c 	.word	0x0800050c
 80004ec:	0800050c 	.word	0x0800050c
 80004f0:	08000510 	.word	0x08000510

080004f4 <_init>:
 80004f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f6:	bf00      	nop
 80004f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004fa:	bc08      	pop	{r3}
 80004fc:	469e      	mov	lr, r3
 80004fe:	4770      	bx	lr

08000500 <_fini>:
 8000500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000502:	bf00      	nop
 8000504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000506:	bc08      	pop	{r3}
 8000508:	469e      	mov	lr, r3
 800050a:	4770      	bx	lr
