
Avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008a0  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000696  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000536  00000000  00000000  00001382  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  000018b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036d  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000331  00000000  00000000  00001ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000201a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 8c 01 	jmp	0x318	; 0x318 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
*  Author: Nader
*/


int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <main+0x8>
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
	Pin_config_t p={
  78:	19 82       	std	Y+1, r1	; 0x01
  7a:	1a 82       	std	Y+2, r1	; 0x02
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	8b 83       	std	Y+3, r24	; 0x03
  80:	8c 83       	std	Y+4, r24	; 0x04
		.direction = Output,
		.port=A,
		.pin=0,
		.logic=High
	};
	Pin_logic_init(&p);
  82:	ce 01       	movw	r24, r28
  84:	01 96       	adiw	r24, 0x01	; 1
  86:	0e 94 70 01 	call	0x2e0	; 0x2e0 <Pin_logic_init>
  8a:	ff cf       	rjmp	.-2      	; 0x8a <main+0x1e>

0000008c <Pin_Set>:
 * @brief Sets the pin logic level to high.
 *
 * @param Pin Pointer to the pin configuration structure.
 * @return Std_return ROK if successful, NOK if the pin configuration is null.
 */
Std_return Pin_Set(Pin_config_t *Pin) {
  8c:	fc 01       	movw	r30, r24
	if (!Pin) {
  8e:	89 2b       	or	r24, r25
  90:	09 f4       	brne	.+2      	; 0x94 <Pin_Set+0x8>
  92:	45 c0       	rjmp	.+138    	; 0x11e <Pin_Set+0x92>
		return NOK;
	}
	switch (Pin->port) {
  94:	80 81       	ld	r24, Z
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	a9 f0       	breq	.+42     	; 0xc4 <Pin_Set+0x38>
  9a:	28 f0       	brcs	.+10     	; 0xa6 <Pin_Set+0x1a>
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	09 f1       	breq	.+66     	; 0xe2 <Pin_Set+0x56>
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	71 f1       	breq	.+92     	; 0x100 <Pin_Set+0x74>
  a4:	3e c0       	rjmp	.+124    	; 0x122 <Pin_Set+0x96>
		case A:
			SET_BIT(PORTA, Pin->pin);
  a6:	2b b3       	in	r18, 0x1b	; 27
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	01 80       	ldd	r0, Z+1	; 0x01
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <Pin_Set+0x28>
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	0a 94       	dec	r0
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <Pin_Set+0x24>
  b8:	82 2b       	or	r24, r18
  ba:	8b bb       	out	0x1b, r24	; 27
			Pin->logic = High;
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	83 83       	std	Z+3, r24	; 0x03
			Pin->logic = High;
			break;
		default:
			return NOK;
	}
	return ROK;
  c0:	80 e0       	ldi	r24, 0x00	; 0
	}
	switch (Pin->port) {
		case A:
			SET_BIT(PORTA, Pin->pin);
			Pin->logic = High;
			break;
  c2:	08 95       	ret
		case B:
			SET_BIT(PORTB, Pin->pin);
  c4:	28 b3       	in	r18, 0x18	; 24
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	01 80       	ldd	r0, Z+1	; 0x01
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <Pin_Set+0x46>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	0a 94       	dec	r0
  d4:	e2 f7       	brpl	.-8      	; 0xce <Pin_Set+0x42>
  d6:	82 2b       	or	r24, r18
  d8:	88 bb       	out	0x18, r24	; 24
			Pin->logic = High;
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	83 83       	std	Z+3, r24	; 0x03
			Pin->logic = High;
			break;
		default:
			return NOK;
	}
	return ROK;
  de:	80 e0       	ldi	r24, 0x00	; 0
			Pin->logic = High;
			break;
		case B:
			SET_BIT(PORTB, Pin->pin);
			Pin->logic = High;
			break;
  e0:	08 95       	ret
		case C:
			SET_BIT(PORTC, Pin->pin);
  e2:	25 b3       	in	r18, 0x15	; 21
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	01 80       	ldd	r0, Z+1	; 0x01
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <Pin_Set+0x64>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	0a 94       	dec	r0
  f2:	e2 f7       	brpl	.-8      	; 0xec <Pin_Set+0x60>
  f4:	82 2b       	or	r24, r18
  f6:	85 bb       	out	0x15, r24	; 21
			Pin->logic = High;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	83 83       	std	Z+3, r24	; 0x03
			Pin->logic = High;
			break;
		default:
			return NOK;
	}
	return ROK;
  fc:	80 e0       	ldi	r24, 0x00	; 0
			Pin->logic = High;
			break;
		case C:
			SET_BIT(PORTC, Pin->pin);
			Pin->logic = High;
			break;
  fe:	08 95       	ret
		case D:
			SET_BIT(PORTD, Pin->pin);
 100:	22 b3       	in	r18, 0x12	; 18
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	01 80       	ldd	r0, Z+1	; 0x01
 108:	02 c0       	rjmp	.+4      	; 0x10e <Pin_Set+0x82>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	0a 94       	dec	r0
 110:	e2 f7       	brpl	.-8      	; 0x10a <Pin_Set+0x7e>
 112:	82 2b       	or	r24, r18
 114:	82 bb       	out	0x12, r24	; 18
			Pin->logic = High;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	83 83       	std	Z+3, r24	; 0x03
			break;
		default:
			return NOK;
	}
	return ROK;
 11a:	80 e0       	ldi	r24, 0x00	; 0
			Pin->logic = High;
			break;
		case D:
			SET_BIT(PORTD, Pin->pin);
			Pin->logic = High;
			break;
 11c:	08 95       	ret
 * @param Pin Pointer to the pin configuration structure.
 * @return Std_return ROK if successful, NOK if the pin configuration is null.
 */
Std_return Pin_Set(Pin_config_t *Pin) {
	if (!Pin) {
		return NOK;
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	08 95       	ret
		case D:
			SET_BIT(PORTD, Pin->pin);
			Pin->logic = High;
			break;
		default:
			return NOK;
 122:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ROK;
}
 124:	08 95       	ret

00000126 <Pin_Clear>:
 * @brief Sets the pin logic level to low.
 *
 * @param Pin Pointer to the pin configuration structure.
 * @return Std_return ROK if successful, NOK if the pin configuration is null.
 */
Std_return Pin_Clear(Pin_config_t *Pin) {
 126:	fc 01       	movw	r30, r24
	if (!Pin) {
 128:	89 2b       	or	r24, r25
 12a:	09 f4       	brne	.+2      	; 0x12e <Pin_Clear+0x8>
 12c:	45 c0       	rjmp	.+138    	; 0x1b8 <Pin_Clear+0x92>
		return NOK;
	}
	switch (Pin->port) {
 12e:	80 81       	ld	r24, Z
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	a9 f0       	breq	.+42     	; 0x15e <Pin_Clear+0x38>
 134:	28 f0       	brcs	.+10     	; 0x140 <Pin_Clear+0x1a>
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	09 f1       	breq	.+66     	; 0x17c <Pin_Clear+0x56>
 13a:	83 30       	cpi	r24, 0x03	; 3
 13c:	71 f1       	breq	.+92     	; 0x19a <Pin_Clear+0x74>
 13e:	3e c0       	rjmp	.+124    	; 0x1bc <Pin_Clear+0x96>
		case A:
			CLEAR_BIT(PORTA, Pin->pin);
 140:	2b b3       	in	r18, 0x1b	; 27
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	01 80       	ldd	r0, Z+1	; 0x01
 148:	02 c0       	rjmp	.+4      	; 0x14e <Pin_Clear+0x28>
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	0a 94       	dec	r0
 150:	e2 f7       	brpl	.-8      	; 0x14a <Pin_Clear+0x24>
 152:	80 95       	com	r24
 154:	82 23       	and	r24, r18
 156:	8b bb       	out	0x1b, r24	; 27
			Pin->logic = Low;
 158:	13 82       	std	Z+3, r1	; 0x03
			Pin->logic = Low;
			break;
		default:
			return NOK;
	}
	return ROK;
 15a:	80 e0       	ldi	r24, 0x00	; 0
	}
	switch (Pin->port) {
		case A:
			CLEAR_BIT(PORTA, Pin->pin);
			Pin->logic = Low;
			break;
 15c:	08 95       	ret
		case B:
			CLEAR_BIT(PORTB, Pin->pin);
 15e:	28 b3       	in	r18, 0x18	; 24
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	01 80       	ldd	r0, Z+1	; 0x01
 166:	02 c0       	rjmp	.+4      	; 0x16c <Pin_Clear+0x46>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	0a 94       	dec	r0
 16e:	e2 f7       	brpl	.-8      	; 0x168 <Pin_Clear+0x42>
 170:	80 95       	com	r24
 172:	82 23       	and	r24, r18
 174:	88 bb       	out	0x18, r24	; 24
			Pin->logic = Low;
 176:	13 82       	std	Z+3, r1	; 0x03
			Pin->logic = Low;
			break;
		default:
			return NOK;
	}
	return ROK;
 178:	80 e0       	ldi	r24, 0x00	; 0
			Pin->logic = Low;
			break;
		case B:
			CLEAR_BIT(PORTB, Pin->pin);
			Pin->logic = Low;
			break;
 17a:	08 95       	ret
		case C:
			CLEAR_BIT(PORTC, Pin->pin);
 17c:	25 b3       	in	r18, 0x15	; 21
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	01 80       	ldd	r0, Z+1	; 0x01
 184:	02 c0       	rjmp	.+4      	; 0x18a <Pin_Clear+0x64>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	0a 94       	dec	r0
 18c:	e2 f7       	brpl	.-8      	; 0x186 <Pin_Clear+0x60>
 18e:	80 95       	com	r24
 190:	82 23       	and	r24, r18
 192:	85 bb       	out	0x15, r24	; 21
			Pin->logic = Low;
 194:	13 82       	std	Z+3, r1	; 0x03
			Pin->logic = Low;
			break;
		default:
			return NOK;
	}
	return ROK;
 196:	80 e0       	ldi	r24, 0x00	; 0
			Pin->logic = Low;
			break;
		case C:
			CLEAR_BIT(PORTC, Pin->pin);
			Pin->logic = Low;
			break;
 198:	08 95       	ret
		case D:
			CLEAR_BIT(PORTD, Pin->pin);
 19a:	22 b3       	in	r18, 0x12	; 18
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	01 80       	ldd	r0, Z+1	; 0x01
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <Pin_Clear+0x82>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	0a 94       	dec	r0
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <Pin_Clear+0x7e>
 1ac:	80 95       	com	r24
 1ae:	82 23       	and	r24, r18
 1b0:	82 bb       	out	0x12, r24	; 18
			Pin->logic = Low;
 1b2:	13 82       	std	Z+3, r1	; 0x03
			break;
		default:
			return NOK;
	}
	return ROK;
 1b4:	80 e0       	ldi	r24, 0x00	; 0
			Pin->logic = Low;
			break;
		case D:
			CLEAR_BIT(PORTD, Pin->pin);
			Pin->logic = Low;
			break;
 1b6:	08 95       	ret
 * @param Pin Pointer to the pin configuration structure.
 * @return Std_return ROK if successful, NOK if the pin configuration is null.
 */
Std_return Pin_Clear(Pin_config_t *Pin) {
	if (!Pin) {
		return NOK;
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	08 95       	ret
		case D:
			CLEAR_BIT(PORTD, Pin->pin);
			Pin->logic = Low;
			break;
		default:
			return NOK;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ROK;
}
 1be:	08 95       	ret

000001c0 <Pin_Direction>:
 * @brief Sets the pin direction to input or output.
 *
 * @param Pin Pointer to the pin configuration structure.
 * @return Std_return ROK if successful, NOK if the pin configuration is null.
 */
Std_return Pin_Direction(Pin_config_t *Pin) {
 1c0:	fc 01       	movw	r30, r24
	if (!Pin) {
 1c2:	89 2b       	or	r24, r25
 1c4:	09 f4       	brne	.+2      	; 0x1c8 <Pin_Direction+0x8>
 1c6:	84 c0       	rjmp	.+264    	; 0x2d0 <Pin_Direction+0x110>
		return NOK;
	}
	if (Pin->direction == Input) {
 1c8:	82 81       	ldd	r24, Z+2	; 0x02
 1ca:	81 11       	cpse	r24, r1
 1cc:	41 c0       	rjmp	.+130    	; 0x250 <Pin_Direction+0x90>
		switch (Pin->port) {
 1ce:	80 81       	ld	r24, Z
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	a1 f0       	breq	.+40     	; 0x1fc <Pin_Direction+0x3c>
 1d4:	28 f0       	brcs	.+10     	; 0x1e0 <Pin_Direction+0x20>
 1d6:	82 30       	cpi	r24, 0x02	; 2
 1d8:	f9 f0       	breq	.+62     	; 0x218 <Pin_Direction+0x58>
 1da:	83 30       	cpi	r24, 0x03	; 3
 1dc:	59 f1       	breq	.+86     	; 0x234 <Pin_Direction+0x74>
 1de:	7a c0       	rjmp	.+244    	; 0x2d4 <Pin_Direction+0x114>
			case A:
				CLEAR_BIT(DDRA, Pin->pin);
 1e0:	2a b3       	in	r18, 0x1a	; 26
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	01 80       	ldd	r0, Z+1	; 0x01
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <Pin_Direction+0x2e>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	0a 94       	dec	r0
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <Pin_Direction+0x2a>
 1f2:	80 95       	com	r24
 1f4:	82 23       	and	r24, r18
 1f6:	8a bb       	out	0x1a, r24	; 26
				break;
			default:
				return NOK;
		}
	}
	return ROK;
 1f8:	80 e0       	ldi	r24, 0x00	; 0
	}
	if (Pin->direction == Input) {
		switch (Pin->port) {
			case A:
				CLEAR_BIT(DDRA, Pin->pin);
				break;
 1fa:	08 95       	ret
			case B:
				CLEAR_BIT(DDRB, Pin->pin);
 1fc:	27 b3       	in	r18, 0x17	; 23
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	01 80       	ldd	r0, Z+1	; 0x01
 204:	02 c0       	rjmp	.+4      	; 0x20a <Pin_Direction+0x4a>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	0a 94       	dec	r0
 20c:	e2 f7       	brpl	.-8      	; 0x206 <Pin_Direction+0x46>
 20e:	80 95       	com	r24
 210:	82 23       	and	r24, r18
 212:	87 bb       	out	0x17, r24	; 23
				break;
			default:
				return NOK;
		}
	}
	return ROK;
 214:	80 e0       	ldi	r24, 0x00	; 0
			case A:
				CLEAR_BIT(DDRA, Pin->pin);
				break;
			case B:
				CLEAR_BIT(DDRB, Pin->pin);
				break;
 216:	08 95       	ret
			case C:
				CLEAR_BIT(DDRC, Pin->pin);
 218:	24 b3       	in	r18, 0x14	; 20
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	01 80       	ldd	r0, Z+1	; 0x01
 220:	02 c0       	rjmp	.+4      	; 0x226 <Pin_Direction+0x66>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	0a 94       	dec	r0
 228:	e2 f7       	brpl	.-8      	; 0x222 <Pin_Direction+0x62>
 22a:	80 95       	com	r24
 22c:	82 23       	and	r24, r18
 22e:	84 bb       	out	0x14, r24	; 20
				break;
			default:
				return NOK;
		}
	}
	return ROK;
 230:	80 e0       	ldi	r24, 0x00	; 0
			case B:
				CLEAR_BIT(DDRB, Pin->pin);
				break;
			case C:
				CLEAR_BIT(DDRC, Pin->pin);
				break;
 232:	08 95       	ret
			case D:
				CLEAR_BIT(DDRD, Pin->pin);
 234:	21 b3       	in	r18, 0x11	; 17
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	01 80       	ldd	r0, Z+1	; 0x01
 23c:	02 c0       	rjmp	.+4      	; 0x242 <Pin_Direction+0x82>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	0a 94       	dec	r0
 244:	e2 f7       	brpl	.-8      	; 0x23e <Pin_Direction+0x7e>
 246:	80 95       	com	r24
 248:	82 23       	and	r24, r18
 24a:	81 bb       	out	0x11, r24	; 17
				break;
			default:
				return NOK;
		}
	}
	return ROK;
 24c:	80 e0       	ldi	r24, 0x00	; 0
			case C:
				CLEAR_BIT(DDRC, Pin->pin);
				break;
			case D:
				CLEAR_BIT(DDRD, Pin->pin);
				break;
 24e:	08 95       	ret
			default:
				return NOK;
		}
	} else if (Pin->direction == Output) {
 250:	81 30       	cpi	r24, 0x01	; 1
 252:	09 f0       	breq	.+2      	; 0x256 <Pin_Direction+0x96>
 254:	41 c0       	rjmp	.+130    	; 0x2d8 <Pin_Direction+0x118>
		switch (Pin->port) {
 256:	80 81       	ld	r24, Z
 258:	81 30       	cpi	r24, 0x01	; 1
 25a:	99 f0       	breq	.+38     	; 0x282 <Pin_Direction+0xc2>
 25c:	28 f0       	brcs	.+10     	; 0x268 <Pin_Direction+0xa8>
 25e:	82 30       	cpi	r24, 0x02	; 2
 260:	e9 f0       	breq	.+58     	; 0x29c <Pin_Direction+0xdc>
 262:	83 30       	cpi	r24, 0x03	; 3
 264:	41 f1       	breq	.+80     	; 0x2b6 <Pin_Direction+0xf6>
 266:	3a c0       	rjmp	.+116    	; 0x2dc <Pin_Direction+0x11c>
			case A:
				SET_BIT(DDRA, Pin->pin);
 268:	2a b3       	in	r18, 0x1a	; 26
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	01 80       	ldd	r0, Z+1	; 0x01
 270:	02 c0       	rjmp	.+4      	; 0x276 <Pin_Direction+0xb6>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	0a 94       	dec	r0
 278:	e2 f7       	brpl	.-8      	; 0x272 <Pin_Direction+0xb2>
 27a:	82 2b       	or	r24, r18
 27c:	8a bb       	out	0x1a, r24	; 26
				break;
			default:
				return NOK;
		}
	}
	return ROK;
 27e:	80 e0       	ldi	r24, 0x00	; 0
		}
	} else if (Pin->direction == Output) {
		switch (Pin->port) {
			case A:
				SET_BIT(DDRA, Pin->pin);
				break;
 280:	08 95       	ret
			case B:
				SET_BIT(DDRB, Pin->pin);
 282:	27 b3       	in	r18, 0x17	; 23
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	01 80       	ldd	r0, Z+1	; 0x01
 28a:	02 c0       	rjmp	.+4      	; 0x290 <Pin_Direction+0xd0>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	0a 94       	dec	r0
 292:	e2 f7       	brpl	.-8      	; 0x28c <Pin_Direction+0xcc>
 294:	82 2b       	or	r24, r18
 296:	87 bb       	out	0x17, r24	; 23
				break;
			default:
				return NOK;
		}
	}
	return ROK;
 298:	80 e0       	ldi	r24, 0x00	; 0
			case A:
				SET_BIT(DDRA, Pin->pin);
				break;
			case B:
				SET_BIT(DDRB, Pin->pin);
				break;
 29a:	08 95       	ret
			case C:
				SET_BIT(DDRC, Pin->pin);
 29c:	24 b3       	in	r18, 0x14	; 20
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	01 80       	ldd	r0, Z+1	; 0x01
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <Pin_Direction+0xea>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	0a 94       	dec	r0
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <Pin_Direction+0xe6>
 2ae:	82 2b       	or	r24, r18
 2b0:	84 bb       	out	0x14, r24	; 20
				break;
			default:
				return NOK;
		}
	}
	return ROK;
 2b2:	80 e0       	ldi	r24, 0x00	; 0
			case B:
				SET_BIT(DDRB, Pin->pin);
				break;
			case C:
				SET_BIT(DDRC, Pin->pin);
				break;
 2b4:	08 95       	ret
			case D:
				SET_BIT(DDRD, Pin->pin);
 2b6:	21 b3       	in	r18, 0x11	; 17
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	01 80       	ldd	r0, Z+1	; 0x01
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <Pin_Direction+0x104>
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	0a 94       	dec	r0
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <Pin_Direction+0x100>
 2c8:	82 2b       	or	r24, r18
 2ca:	81 bb       	out	0x11, r24	; 17
				break;
			default:
				return NOK;
		}
	}
	return ROK;
 2cc:	80 e0       	ldi	r24, 0x00	; 0
			case C:
				SET_BIT(DDRC, Pin->pin);
				break;
			case D:
				SET_BIT(DDRD, Pin->pin);
				break;
 2ce:	08 95       	ret
 * @param Pin Pointer to the pin configuration structure.
 * @return Std_return ROK if successful, NOK if the pin configuration is null.
 */
Std_return Pin_Direction(Pin_config_t *Pin) {
	if (!Pin) {
		return NOK;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	08 95       	ret
				break;
			case D:
				CLEAR_BIT(DDRD, Pin->pin);
				break;
			default:
				return NOK;
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	08 95       	ret
				break;
			default:
				return NOK;
		}
	}
	return ROK;
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	08 95       	ret
				break;
			case D:
				SET_BIT(DDRD, Pin->pin);
				break;
			default:
				return NOK;
 2dc:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return ROK;
}
 2de:	08 95       	ret

000002e0 <Pin_logic_init>:
 * @brief Initializes the pin direction and sets its logic level.
 *
 * @param Pin Pointer to the pin configuration structure.
 * @return Std_return ROK if successful, NOK if the pin configuration is null.
 */
Std_return Pin_logic_init(Pin_config_t *Pin) {
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	ec 01       	movw	r28, r24
	Pin_Direction(Pin);
 2e6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Pin_Direction>
	if (!Pin) {
 2ea:	20 97       	sbiw	r28, 0x00	; 0
 2ec:	79 f0       	breq	.+30     	; 0x30c <Pin_logic_init+0x2c>
		return NOK;
	}
	if (Pin->logic == Low) {
 2ee:	8b 81       	ldd	r24, Y+3	; 0x03
 2f0:	81 11       	cpse	r24, r1
 2f2:	05 c0       	rjmp	.+10     	; 0x2fe <Pin_logic_init+0x1e>
		Pin_Clear(Pin);
 2f4:	ce 01       	movw	r24, r28
 2f6:	0e 94 93 00 	call	0x126	; 0x126 <Pin_Clear>
	} else if (Pin->logic == High) {
		Pin_Set(Pin);
	}
	return ROK;
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0a c0       	rjmp	.+20     	; 0x312 <Pin_logic_init+0x32>
	if (!Pin) {
		return NOK;
	}
	if (Pin->logic == Low) {
		Pin_Clear(Pin);
	} else if (Pin->logic == High) {
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	39 f4       	brne	.+14     	; 0x310 <Pin_logic_init+0x30>
		Pin_Set(Pin);
 302:	ce 01       	movw	r24, r28
 304:	0e 94 46 00 	call	0x8c	; 0x8c <Pin_Set>
	}
	return ROK;
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	03 c0       	rjmp	.+6      	; 0x312 <Pin_logic_init+0x32>
 * @return Std_return ROK if successful, NOK if the pin configuration is null.
 */
Std_return Pin_logic_init(Pin_config_t *Pin) {
	Pin_Direction(Pin);
	if (!Pin) {
		return NOK;
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	01 c0       	rjmp	.+2      	; 0x312 <Pin_logic_init+0x32>
	if (Pin->logic == Low) {
		Pin_Clear(Pin);
	} else if (Pin->logic == High) {
		Pin_Set(Pin);
	}
	return ROK;
 310:	80 e0       	ldi	r24, 0x00	; 0
}
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	08 95       	ret

00000318 <_exit>:
 318:	f8 94       	cli

0000031a <__stop_program>:
 31a:	ff cf       	rjmp	.-2      	; 0x31a <__stop_program>
