
Avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000320  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800060  00800060  00000394  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010e7  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a31  00000000  00000000  00001647  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e90  00000000  00000000  00002078  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d8  00000000  00000000  00002f08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000853  00000000  00000000  000032e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000df9  00000000  00000000  00003b33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000492c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_1>
   8:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__vector_2>
   c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__vector_10>
  2c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 8e 01 	jmp	0x31c	; 0x31c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

#include "MCAL/gpio/gpio.h"
int main(void) {
	uint8_t counter=0;
	Port_Direction(C,Output);
  92:	61 e0       	ldi	r22, 0x01	; 1
  94:	82 e0       	ldi	r24, 0x02	; 2
  96:	0e 94 88 00 	call	0x110	; 0x110 <Port_Direction>

#include "MCAL/gpio/gpio.h"
int main(void) {
	uint8_t counter=0;
  9a:	60 e0       	ldi	r22, 0x00	; 0
	Port_Direction(C,Output);
	while (1) {
		
		Port_Set(C,counter++);
  9c:	c1 e0       	ldi	r28, 0x01	; 1
  9e:	c6 0f       	add	r28, r22
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	0e 94 72 00 	call	0xe4	; 0xe4 <Port_Set>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	80 e7       	ldi	r24, 0x70	; 112
  aa:	92 e0       	ldi	r25, 0x02	; 2
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x1a>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x24>
  b6:	00 00       	nop
  b8:	6c 2f       	mov	r22, r28
  ba:	f0 cf       	rjmp	.-32     	; 0x9c <main+0xa>

000000bc <__vector_16>:

/**
 * @brief ADC Conversion Complete Interrupt Service Routine.
 * This function is called when an ADC conversion is complete.
 */
ISR(ADC_vect) {
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	8f 93       	push	r24
  c8:	9f 93       	push	r25
    adc_result = ADC;
  ca:	84 b1       	in	r24, 0x04	; 4
  cc:	95 b1       	in	r25, 0x05	; 5
  ce:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <adc_result+0x1>
  d2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <adc_result>
}
  d6:	9f 91       	pop	r25
  d8:	8f 91       	pop	r24
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <Port_Set>:
            break;
        default:
            return NOK;
    }
    return ROK;
}
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	49 f0       	breq	.+18     	; 0xfa <Port_Set+0x16>
  e8:	28 f0       	brcs	.+10     	; 0xf4 <Port_Set+0x10>
  ea:	82 30       	cpi	r24, 0x02	; 2
  ec:	49 f0       	breq	.+18     	; 0x100 <Port_Set+0x1c>
  ee:	83 30       	cpi	r24, 0x03	; 3
  f0:	51 f0       	breq	.+20     	; 0x106 <Port_Set+0x22>
  f2:	0c c0       	rjmp	.+24     	; 0x10c <Port_Set+0x28>
  f4:	6b bb       	out	0x1b, r22	; 27
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	08 95       	ret
  fa:	68 bb       	out	0x18, r22	; 24
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	08 95       	ret
 100:	65 bb       	out	0x15, r22	; 21
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	08 95       	ret
 106:	62 bb       	out	0x12, r22	; 18
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	08 95       	ret
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	08 95       	ret

00000110 <Port_Direction>:

/**
 * @brief Sets the direction of the entire port (input or output).
 */
Std_return Port_Direction(char port, Direction_t direction) {
    switch (port) {
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	71 f0       	breq	.+28     	; 0x130 <Port_Direction+0x20>
 114:	28 f0       	brcs	.+10     	; 0x120 <Port_Direction+0x10>
 116:	82 30       	cpi	r24, 0x02	; 2
 118:	99 f0       	breq	.+38     	; 0x140 <Port_Direction+0x30>
 11a:	83 30       	cpi	r24, 0x03	; 3
 11c:	c9 f0       	breq	.+50     	; 0x150 <Port_Direction+0x40>
 11e:	20 c0       	rjmp	.+64     	; 0x160 <Port_Direction+0x50>
        case A:
            DDRA = (direction == Output) ? 0xFF : 0x00;
 120:	61 30       	cpi	r22, 0x01	; 1
 122:	11 f4       	brne	.+4      	; 0x128 <Port_Direction+0x18>
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	01 c0       	rjmp	.+2      	; 0x12a <Port_Direction+0x1a>
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	8a bb       	out	0x1a, r24	; 26
            DDRD = (direction == Output) ? 0xFF : 0x00;
            break;
        default:
            return NOK;
    }
    return ROK;
 12c:	80 e0       	ldi	r24, 0x00	; 0
 */
Std_return Port_Direction(char port, Direction_t direction) {
    switch (port) {
        case A:
            DDRA = (direction == Output) ? 0xFF : 0x00;
            break;
 12e:	08 95       	ret
        case B:
            DDRB = (direction == Output) ? 0xFF : 0x00;
 130:	61 30       	cpi	r22, 0x01	; 1
 132:	11 f4       	brne	.+4      	; 0x138 <Port_Direction+0x28>
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	01 c0       	rjmp	.+2      	; 0x13a <Port_Direction+0x2a>
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	87 bb       	out	0x17, r24	; 23
            DDRD = (direction == Output) ? 0xFF : 0x00;
            break;
        default:
            return NOK;
    }
    return ROK;
 13c:	80 e0       	ldi	r24, 0x00	; 0
        case A:
            DDRA = (direction == Output) ? 0xFF : 0x00;
            break;
        case B:
            DDRB = (direction == Output) ? 0xFF : 0x00;
            break;
 13e:	08 95       	ret
        case C:
            DDRC = (direction == Output) ? 0xFF : 0x00;
 140:	61 30       	cpi	r22, 0x01	; 1
 142:	11 f4       	brne	.+4      	; 0x148 <Port_Direction+0x38>
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	01 c0       	rjmp	.+2      	; 0x14a <Port_Direction+0x3a>
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	84 bb       	out	0x14, r24	; 20
            DDRD = (direction == Output) ? 0xFF : 0x00;
            break;
        default:
            return NOK;
    }
    return ROK;
 14c:	80 e0       	ldi	r24, 0x00	; 0
        case B:
            DDRB = (direction == Output) ? 0xFF : 0x00;
            break;
        case C:
            DDRC = (direction == Output) ? 0xFF : 0x00;
            break;
 14e:	08 95       	ret
        case D:
            DDRD = (direction == Output) ? 0xFF : 0x00;
 150:	61 30       	cpi	r22, 0x01	; 1
 152:	11 f4       	brne	.+4      	; 0x158 <Port_Direction+0x48>
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	01 c0       	rjmp	.+2      	; 0x15a <Port_Direction+0x4a>
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	81 bb       	out	0x11, r24	; 17
            break;
        default:
            return NOK;
    }
    return ROK;
 15c:	80 e0       	ldi	r24, 0x00	; 0
        case C:
            DDRC = (direction == Output) ? 0xFF : 0x00;
            break;
        case D:
            DDRD = (direction == Output) ? 0xFF : 0x00;
            break;
 15e:	08 95       	ret
        default:
            return NOK;
 160:	81 e0       	ldi	r24, 0x01	; 1
    }
    return ROK;
}
 162:	08 95       	ret

00000164 <__vector_1>:
		break;
	}
}

// ISR for INT0
ISR(INT0_vect) {
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	2f 93       	push	r18
 170:	3f 93       	push	r19
 172:	4f 93       	push	r20
 174:	5f 93       	push	r21
 176:	6f 93       	push	r22
 178:	7f 93       	push	r23
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
 17e:	af 93       	push	r26
 180:	bf 93       	push	r27
 182:	ef 93       	push	r30
 184:	ff 93       	push	r31
	if (ExtInt0_Callback != 0) {
 186:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <ExtInt0_Callback>
 18a:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <ExtInt0_Callback+0x1>
 18e:	30 97       	sbiw	r30, 0x00	; 0
 190:	09 f0       	breq	.+2      	; 0x194 <__vector_1+0x30>
		ExtInt0_Callback();
 192:	09 95       	icall
	}
	GICR|=1<<6;
 194:	8b b7       	in	r24, 0x3b	; 59
 196:	80 64       	ori	r24, 0x40	; 64
 198:	8b bf       	out	0x3b, r24	; 59
}
 19a:	ff 91       	pop	r31
 19c:	ef 91       	pop	r30
 19e:	bf 91       	pop	r27
 1a0:	af 91       	pop	r26
 1a2:	9f 91       	pop	r25
 1a4:	8f 91       	pop	r24
 1a6:	7f 91       	pop	r23
 1a8:	6f 91       	pop	r22
 1aa:	5f 91       	pop	r21
 1ac:	4f 91       	pop	r20
 1ae:	3f 91       	pop	r19
 1b0:	2f 91       	pop	r18
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <__vector_2>:

// ISR for INT1
ISR(INT1_vect) {
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	2f 93       	push	r18
 1c8:	3f 93       	push	r19
 1ca:	4f 93       	push	r20
 1cc:	5f 93       	push	r21
 1ce:	6f 93       	push	r22
 1d0:	7f 93       	push	r23
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
 1d6:	af 93       	push	r26
 1d8:	bf 93       	push	r27
 1da:	ef 93       	push	r30
 1dc:	ff 93       	push	r31
	if (ExtInt1_Callback != 0) {
 1de:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <ExtInt1_Callback>
 1e2:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <ExtInt1_Callback+0x1>
 1e6:	30 97       	sbiw	r30, 0x00	; 0
 1e8:	09 f0       	breq	.+2      	; 0x1ec <__vector_2+0x30>
		ExtInt1_Callback();
 1ea:	09 95       	icall
	}
		GICR|=1<<7;
 1ec:	8b b7       	in	r24, 0x3b	; 59
 1ee:	80 68       	ori	r24, 0x80	; 128
 1f0:	8b bf       	out	0x3b, r24	; 59
}
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	bf 91       	pop	r27
 1f8:	af 91       	pop	r26
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	7f 91       	pop	r23
 200:	6f 91       	pop	r22
 202:	5f 91       	pop	r21
 204:	4f 91       	pop	r20
 206:	3f 91       	pop	r19
 208:	2f 91       	pop	r18
 20a:	0f 90       	pop	r0
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	0f 90       	pop	r0
 210:	1f 90       	pop	r1
 212:	18 95       	reti

00000214 <__vector_3>:

// ISR for INT2
ISR(INT2_vect) {
 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
 21e:	2f 93       	push	r18
 220:	3f 93       	push	r19
 222:	4f 93       	push	r20
 224:	5f 93       	push	r21
 226:	6f 93       	push	r22
 228:	7f 93       	push	r23
 22a:	8f 93       	push	r24
 22c:	9f 93       	push	r25
 22e:	af 93       	push	r26
 230:	bf 93       	push	r27
 232:	ef 93       	push	r30
 234:	ff 93       	push	r31
	if (ExtInt2_Callback != 0) {
 236:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 23a:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 23e:	30 97       	sbiw	r30, 0x00	; 0
 240:	09 f0       	breq	.+2      	; 0x244 <__vector_3+0x30>
		ExtInt2_Callback();
 242:	09 95       	icall
	}
		GICR|=1<<5;
 244:	8b b7       	in	r24, 0x3b	; 59
 246:	80 62       	ori	r24, 0x20	; 32
 248:	8b bf       	out	0x3b, r24	; 59
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	bf 91       	pop	r27
 250:	af 91       	pop	r26
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	7f 91       	pop	r23
 258:	6f 91       	pop	r22
 25a:	5f 91       	pop	r21
 25c:	4f 91       	pop	r20
 25e:	3f 91       	pop	r19
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <__vector_11>:
	};

	Timer0_Init(&timer);
}

ISR(TIMER0_OVF_vect) {
 26c:	1f 92       	push	r1
 26e:	0f 92       	push	r0
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	0f 92       	push	r0
 274:	11 24       	eor	r1, r1
 276:	2f 93       	push	r18
 278:	3f 93       	push	r19
 27a:	4f 93       	push	r20
 27c:	5f 93       	push	r21
 27e:	6f 93       	push	r22
 280:	7f 93       	push	r23
 282:	8f 93       	push	r24
 284:	9f 93       	push	r25
 286:	af 93       	push	r26
 288:	bf 93       	push	r27
 28a:	ef 93       	push	r30
 28c:	ff 93       	push	r31
	if (global_timer->Call_Back_Overflow != NULL) {
 28e:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <global_timer>
 292:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <global_timer+0x1>
 296:	06 80       	ldd	r0, Z+6	; 0x06
 298:	f7 81       	ldd	r31, Z+7	; 0x07
 29a:	e0 2d       	mov	r30, r0
 29c:	30 97       	sbiw	r30, 0x00	; 0
 29e:	09 f0       	breq	.+2      	; 0x2a2 <__vector_11+0x36>
		global_timer->Call_Back_Overflow();
 2a0:	09 95       	icall
	}
}
 2a2:	ff 91       	pop	r31
 2a4:	ef 91       	pop	r30
 2a6:	bf 91       	pop	r27
 2a8:	af 91       	pop	r26
 2aa:	9f 91       	pop	r25
 2ac:	8f 91       	pop	r24
 2ae:	7f 91       	pop	r23
 2b0:	6f 91       	pop	r22
 2b2:	5f 91       	pop	r21
 2b4:	4f 91       	pop	r20
 2b6:	3f 91       	pop	r19
 2b8:	2f 91       	pop	r18
 2ba:	0f 90       	pop	r0
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	0f 90       	pop	r0
 2c0:	1f 90       	pop	r1
 2c2:	18 95       	reti

000002c4 <__vector_10>:

ISR(TIMER0_COMP_vect) {
 2c4:	1f 92       	push	r1
 2c6:	0f 92       	push	r0
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	0f 92       	push	r0
 2cc:	11 24       	eor	r1, r1
 2ce:	2f 93       	push	r18
 2d0:	3f 93       	push	r19
 2d2:	4f 93       	push	r20
 2d4:	5f 93       	push	r21
 2d6:	6f 93       	push	r22
 2d8:	7f 93       	push	r23
 2da:	8f 93       	push	r24
 2dc:	9f 93       	push	r25
 2de:	af 93       	push	r26
 2e0:	bf 93       	push	r27
 2e2:	ef 93       	push	r30
 2e4:	ff 93       	push	r31
	if (global_timer->Call_Back_Compare != NULL) {
 2e6:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <global_timer>
 2ea:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <global_timer+0x1>
 2ee:	00 84       	ldd	r0, Z+8	; 0x08
 2f0:	f1 85       	ldd	r31, Z+9	; 0x09
 2f2:	e0 2d       	mov	r30, r0
 2f4:	30 97       	sbiw	r30, 0x00	; 0
 2f6:	09 f0       	breq	.+2      	; 0x2fa <__vector_10+0x36>
		global_timer->Call_Back_Compare();
 2f8:	09 95       	icall
	}
}
 2fa:	ff 91       	pop	r31
 2fc:	ef 91       	pop	r30
 2fe:	bf 91       	pop	r27
 300:	af 91       	pop	r26
 302:	9f 91       	pop	r25
 304:	8f 91       	pop	r24
 306:	7f 91       	pop	r23
 308:	6f 91       	pop	r22
 30a:	5f 91       	pop	r21
 30c:	4f 91       	pop	r20
 30e:	3f 91       	pop	r19
 310:	2f 91       	pop	r18
 312:	0f 90       	pop	r0
 314:	0f be       	out	0x3f, r0	; 63
 316:	0f 90       	pop	r0
 318:	1f 90       	pop	r1
 31a:	18 95       	reti

0000031c <_exit>:
 31c:	f8 94       	cli

0000031e <__stop_program>:
 31e:	ff cf       	rjmp	.-2      	; 0x31e <__stop_program>
