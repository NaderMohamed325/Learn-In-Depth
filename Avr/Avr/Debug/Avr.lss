
Avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000000e6  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000802  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b7  00000000  00000000  00000a36  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000376  00000000  00000000  000010ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001464  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000388  00000000  00000000  0000150c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000017a  00000000  00000000  00001894  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001a0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:


int main(void)
{
    // Initialize UART
    UART_Init();
  82:	0e 94 5a 00 	call	0xb4	; 0xb4 <UART_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	2f e3       	ldi	r18, 0x3F	; 63
  88:	80 e7       	ldi	r24, 0x70	; 112
  8a:	98 e1       	ldi	r25, 0x18	; 24
  8c:	21 50       	subi	r18, 0x01	; 1
  8e:	80 40       	sbci	r24, 0x00	; 0
  90:	90 40       	sbci	r25, 0x00	; 0
  92:	e1 f7       	brne	.-8      	; 0x8c <main+0xa>
  94:	00 c0       	rjmp	.+0      	; 0x96 <main+0x14>
  96:	00 00       	nop
    _delay_ms(1001);
    // Send a string over UART
    const char *str = "Hello, UART!\n";
  98:	c0 e6       	ldi	r28, 0x60	; 96
  9a:	d0 e0       	ldi	r29, 0x00	; 0
    while (*str) {
  9c:	03 c0       	rjmp	.+6      	; 0xa4 <main+0x22>
        UART_Send(*str++);
  9e:	21 96       	adiw	r28, 0x01	; 1
  a0:	0e 94 69 00 	call	0xd2	; 0xd2 <UART_Send>
    // Initialize UART
    UART_Init();
    _delay_ms(1001);
    // Send a string over UART
    const char *str = "Hello, UART!\n";
    while (*str) {
  a4:	88 81       	ld	r24, Y
  a6:	81 11       	cpse	r24, r1
  a8:	fa cf       	rjmp	.-12     	; 0x9e <main+0x1c>
        UART_Send(*str++);
    }
    
    // Receive data and echo it back
    while (1) {
        unsigned char received_data = UART_Receive();
  aa:	0e 94 6d 00 	call	0xda	; 0xda <UART_Receive>
        UART_Send(received_data);
  ae:	0e 94 69 00 	call	0xd2	; 0xd2 <UART_Send>
  b2:	fb cf       	rjmp	.-10     	; 0xaa <main+0x28>

000000b4 <UART_Init>:
* @param None
* @return None
*/
void UART_Init(void){
	// Set baud rate
	UBRRL=51;
  b4:	83 e3       	ldi	r24, 0x33	; 51
  b6:	89 b9       	out	0x09, r24	; 9
	CLEAR_BIT(UCSRA,U2X);
  b8:	8b b1       	in	r24, 0x0b	; 11
  ba:	8d 7f       	andi	r24, 0xFD	; 253
  bc:	8b b9       	out	0x0b, r24	; 11


	
	// Disable double speed mode
	CLEAR_BIT(UCSRA, U2X);
  be:	8b b1       	in	r24, 0x0b	; 11
  c0:	8d 7f       	andi	r24, 0xFD	; 253
  c2:	8b b9       	out	0x0b, r24	; 11
	


	
	// Enable transmitter and receiver
	SET_BIT(UCSRB, TXEN);
  c4:	8a b1       	in	r24, 0x0a	; 10
  c6:	88 60       	ori	r24, 0x08	; 8
  c8:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(UCSRB, RXEN);
  ca:	8a b1       	in	r24, 0x0a	; 10
  cc:	80 61       	ori	r24, 0x10	; 16
  ce:	8a b9       	out	0x0a, r24	; 10
  d0:	08 95       	ret

000000d2 <UART_Send>:
* @param data The byte to be transmitted
* @return None
*/
void UART_Send(unsigned char data){
	// Wait for the transmit buffer to be empty
	while (!READ_BIT(UCSRA, UDRE));
  d2:	5d 9b       	sbis	0x0b, 5	; 11
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <UART_Send>
	// Put data into the buffer, sends the data
	UDR = data;
  d6:	8c b9       	out	0x0c, r24	; 12
  d8:	08 95       	ret

000000da <UART_Receive>:
* @param None
* @return The received byte
*/
unsigned char UART_Receive(void){
	// Wait for data to be received
	while (!READ_BIT(UCSRA, RXC));
  da:	5f 9b       	sbis	0x0b, 7	; 11
  dc:	fe cf       	rjmp	.-4      	; 0xda <UART_Receive>
	// Get and return received data from buffer
	return UDR;
  de:	8c b1       	in	r24, 0x0c	; 12
}
  e0:	08 95       	ret

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
