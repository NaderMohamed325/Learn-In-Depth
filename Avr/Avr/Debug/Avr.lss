
Avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000005fe  00000672  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000068e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e9a  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000953  00000000  00000000  000026ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d2e  00000000  00000000  00003021  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003d0  00000000  00000000  00003d50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000661  00000000  00000000  00004120  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002118  00000000  00000000  00004781  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00006899  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ef       	ldi	r30, 0xFE	; 254
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 2b 01 	call	0x256	; 0x256 <main>
  7a:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_4bits_command>:
    } else {
        ret = lcd_4bit_set_cursor(Lcd, row, column);
        ret = lcd_4bit_send_char_data(Lcd, data);
    }
    return ret;
}
  82:	0f 93       	push	r16
  84:	1f 93       	push	r17
  86:	cf 93       	push	r28
  88:	8c 01       	movw	r16, r24
  8a:	c6 2f       	mov	r28, r22
  8c:	61 70       	andi	r22, 0x01	; 1
  8e:	08 96       	adiw	r24, 0x08	; 8
  90:	0e 94 ef 02 	call	0x5de	; 0x5de <Pin_write>
  94:	c1 fb       	bst	r28, 1
  96:	66 27       	eor	r22, r22
  98:	60 f9       	bld	r22, 0
  9a:	c8 01       	movw	r24, r16
  9c:	0c 96       	adiw	r24, 0x0c	; 12
  9e:	0e 94 ef 02 	call	0x5de	; 0x5de <Pin_write>
  a2:	c2 fb       	bst	r28, 2
  a4:	66 27       	eor	r22, r22
  a6:	60 f9       	bld	r22, 0
  a8:	c8 01       	movw	r24, r16
  aa:	40 96       	adiw	r24, 0x10	; 16
  ac:	0e 94 ef 02 	call	0x5de	; 0x5de <Pin_write>
  b0:	c3 fb       	bst	r28, 3
  b2:	66 27       	eor	r22, r22
  b4:	60 f9       	bld	r22, 0
  b6:	c8 01       	movw	r24, r16
  b8:	44 96       	adiw	r24, 0x14	; 20
  ba:	0e 94 ef 02 	call	0x5de	; 0x5de <Pin_write>
  be:	cf 91       	pop	r28
  c0:	1f 91       	pop	r17
  c2:	0f 91       	pop	r16
  c4:	08 95       	ret

000000c6 <lcd_4bits_send_enable>:
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	79 f0       	breq	.+30     	; 0xec <lcd_4bits_send_enable+0x26>
  ce:	ec 01       	movw	r28, r24
  d0:	24 96       	adiw	r28, 0x04	; 4
  d2:	61 e0       	ldi	r22, 0x01	; 1
  d4:	ce 01       	movw	r24, r28
  d6:	0e 94 ef 02 	call	0x5de	; 0x5de <Pin_write>
  da:	8d e0       	ldi	r24, 0x0D	; 13
  dc:	8a 95       	dec	r24
  de:	f1 f7       	brne	.-4      	; 0xdc <lcd_4bits_send_enable+0x16>
  e0:	00 00       	nop
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	ce 01       	movw	r24, r28
  e6:	0e 94 ef 02 	call	0x5de	; 0x5de <Pin_write>
  ea:	01 c0       	rjmp	.+2      	; 0xee <lcd_4bits_send_enable+0x28>
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <lcd_4bit_send_command>:
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	00 97       	sbiw	r24, 0x00	; 0
  fc:	b1 f0       	breq	.+44     	; 0x12a <lcd_4bit_send_command+0x36>
  fe:	16 2f       	mov	r17, r22
 100:	ec 01       	movw	r28, r24
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	0e 94 ef 02 	call	0x5de	; 0x5de <Pin_write>
 108:	61 2f       	mov	r22, r17
 10a:	62 95       	swap	r22
 10c:	6f 70       	andi	r22, 0x0F	; 15
 10e:	ce 01       	movw	r24, r28
 110:	0e 94 41 00 	call	0x82	; 0x82 <lcd_4bits_command>
 114:	ce 01       	movw	r24, r28
 116:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_4bits_send_enable>
 11a:	61 2f       	mov	r22, r17
 11c:	ce 01       	movw	r24, r28
 11e:	0e 94 41 00 	call	0x82	; 0x82 <lcd_4bits_command>
 122:	ce 01       	movw	r24, r28
 124:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_4bits_send_enable>
 128:	01 c0       	rjmp	.+2      	; 0x12c <lcd_4bit_send_command+0x38>
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	1f 91       	pop	r17
 132:	08 95       	ret

00000134 <lcd_4bit_initialize>:
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	00 97       	sbiw	r24, 0x00	; 0
 13c:	09 f4       	brne	.+2      	; 0x140 <lcd_4bit_initialize+0xc>
 13e:	4e c0       	rjmp	.+156    	; 0x1dc <lcd_4bit_initialize+0xa8>
 140:	ec 01       	movw	r28, r24
 142:	04 96       	adiw	r24, 0x04	; 4
 144:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <Pin_logic_init>
 148:	ce 01       	movw	r24, r28
 14a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <Pin_logic_init>
 14e:	10 e0       	ldi	r17, 0x00	; 0
 150:	0c c0       	rjmp	.+24     	; 0x16a <lcd_4bit_initialize+0x36>
 152:	81 2f       	mov	r24, r17
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 96       	adiw	r24, 0x02	; 2
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	8c 0f       	add	r24, r28
 162:	9d 1f       	adc	r25, r29
 164:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <Pin_logic_init>
 168:	1f 5f       	subi	r17, 0xFF	; 255
 16a:	14 30       	cpi	r17, 0x04	; 4
 16c:	90 f3       	brcs	.-28     	; 0x152 <lcd_4bit_initialize+0x1e>
 16e:	8f e3       	ldi	r24, 0x3F	; 63
 170:	9c e9       	ldi	r25, 0x9C	; 156
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <lcd_4bit_initialize+0x3e>
 176:	00 c0       	rjmp	.+0      	; 0x178 <lcd_4bit_initialize+0x44>
 178:	00 00       	nop
 17a:	68 e3       	ldi	r22, 0x38	; 56
 17c:	ce 01       	movw	r24, r28
 17e:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_4bit_send_command>
 182:	8f e0       	ldi	r24, 0x0F	; 15
 184:	97 e2       	ldi	r25, 0x27	; 39
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_4bit_initialize+0x52>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_4bit_initialize+0x58>
 18c:	00 00       	nop
 18e:	68 e3       	ldi	r22, 0x38	; 56
 190:	ce 01       	movw	r24, r28
 192:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_4bit_send_command>
 196:	8b e2       	ldi	r24, 0x2B	; 43
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_4bit_initialize+0x66>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcd_4bit_initialize+0x6c>
 1a0:	00 00       	nop
 1a2:	68 e3       	ldi	r22, 0x38	; 56
 1a4:	ce 01       	movw	r24, r28
 1a6:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_4bit_send_command>
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	ce 01       	movw	r24, r28
 1ae:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_4bit_send_command>
 1b2:	62 e0       	ldi	r22, 0x02	; 2
 1b4:	ce 01       	movw	r24, r28
 1b6:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_4bit_send_command>
 1ba:	66 e0       	ldi	r22, 0x06	; 6
 1bc:	ce 01       	movw	r24, r28
 1be:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_4bit_send_command>
 1c2:	6c e0       	ldi	r22, 0x0C	; 12
 1c4:	ce 01       	movw	r24, r28
 1c6:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_4bit_send_command>
 1ca:	68 e2       	ldi	r22, 0x28	; 40
 1cc:	ce 01       	movw	r24, r28
 1ce:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_4bit_send_command>
 1d2:	60 e8       	ldi	r22, 0x80	; 128
 1d4:	ce 01       	movw	r24, r28
 1d6:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_4bit_send_command>
 1da:	01 c0       	rjmp	.+2      	; 0x1de <lcd_4bit_initialize+0xaa>
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	1f 91       	pop	r17
 1e4:	08 95       	ret

000001e6 <lcd_4bit_send_char_data>:
 1e6:	1f 93       	push	r17
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	00 97       	sbiw	r24, 0x00	; 0
 1ee:	b1 f0       	breq	.+44     	; 0x21c <lcd_4bit_send_char_data+0x36>
 1f0:	16 2f       	mov	r17, r22
 1f2:	ec 01       	movw	r28, r24
 1f4:	61 e0       	ldi	r22, 0x01	; 1
 1f6:	0e 94 ef 02 	call	0x5de	; 0x5de <Pin_write>
 1fa:	61 2f       	mov	r22, r17
 1fc:	62 95       	swap	r22
 1fe:	6f 70       	andi	r22, 0x0F	; 15
 200:	ce 01       	movw	r24, r28
 202:	0e 94 41 00 	call	0x82	; 0x82 <lcd_4bits_command>
 206:	ce 01       	movw	r24, r28
 208:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_4bits_send_enable>
 20c:	61 2f       	mov	r22, r17
 20e:	ce 01       	movw	r24, r28
 210:	0e 94 41 00 	call	0x82	; 0x82 <lcd_4bits_command>
 214:	ce 01       	movw	r24, r28
 216:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_4bits_send_enable>
 21a:	01 c0       	rjmp	.+2      	; 0x21e <lcd_4bit_send_char_data+0x38>
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	1f 91       	pop	r17
 224:	08 95       	ret

00000226 <lcd_4bit_send_string>:
 * @brief   Sends a string to the LCD in 4-bit mode.
 * @param   Lcd: Pointer to the lcd_4bit_mode structure.
 * @param   str: Pointer to the string to be sent to the LCD.
 * @return  Returns ROK if the string is sent successfully, otherwise NOK.
 */
Std_return lcd_4bit_send_string(lcd_4bit_mode  *Lcd, unsigned char *str) {
 226:	0f 93       	push	r16
 228:	1f 93       	push	r17
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	8c 01       	movw	r16, r24
 230:	eb 01       	movw	r28, r22
    Std_return ret = ROK;
    if (NULL == Lcd) {
 232:	89 2b       	or	r24, r25
 234:	51 f0       	breq	.+20     	; 0x24a <lcd_4bit_send_string+0x24>
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	04 c0       	rjmp	.+8      	; 0x242 <lcd_4bit_send_string+0x1c>
        ret = NOK;
    } else {
        while (*str) {
            ret = lcd_4bit_send_char_data(Lcd, *str++);
 23a:	21 96       	adiw	r28, 0x01	; 1
 23c:	c8 01       	movw	r24, r16
 23e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_4bit_send_char_data>
Std_return lcd_4bit_send_string(lcd_4bit_mode  *Lcd, unsigned char *str) {
    Std_return ret = ROK;
    if (NULL == Lcd) {
        ret = NOK;
    } else {
        while (*str) {
 242:	68 81       	ld	r22, Y
 244:	61 11       	cpse	r22, r1
 246:	f9 cf       	rjmp	.-14     	; 0x23a <lcd_4bit_send_string+0x14>
 248:	01 c0       	rjmp	.+2      	; 0x24c <lcd_4bit_send_string+0x26>
 * @return  Returns ROK if the string is sent successfully, otherwise NOK.
 */
Std_return lcd_4bit_send_string(lcd_4bit_mode  *Lcd, unsigned char *str) {
    Std_return ret = ROK;
    if (NULL == Lcd) {
        ret = NOK;
 24a:	81 e0       	ldi	r24, 0x01	; 1
        while (*str) {
            ret = lcd_4bit_send_char_data(Lcd, *str++);
        }
    }
    return ret;
}
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	1f 91       	pop	r17
 252:	0f 91       	pop	r16
 254:	08 95       	ret

00000256 <main>:



#include "ECU/Lcd/lcd.h"

int main(void) {
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	cd b7       	in	r28, 0x3d	; 61
 25c:	de b7       	in	r29, 0x3e	; 62
 25e:	ec 97       	sbiw	r28, 0x3c	; 60
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	f8 94       	cli
 264:	de bf       	out	0x3e, r29	; 62
 266:	0f be       	out	0x3f, r0	; 63
 268:	cd bf       	out	0x3d, r28	; 61
	 Pin_config_t lcd_en = {A, 0, Output, Low};
 26a:	19 82       	std	Y+1, r1	; 0x01
 26c:	1a 82       	std	Y+2, r1	; 0x02
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	8b 83       	std	Y+3, r24	; 0x03
 272:	1c 82       	std	Y+4, r1	; 0x04
	 Pin_config_t lcd_rs = {A, 1, Output, Low};
 274:	1d 82       	std	Y+5, r1	; 0x05
 276:	8e 83       	std	Y+6, r24	; 0x06
 278:	8f 83       	std	Y+7, r24	; 0x07
 27a:	18 86       	std	Y+8, r1	; 0x08
	 Pin_config_t lcd_data[4] = {
 27c:	80 e1       	ldi	r24, 0x10	; 16
 27e:	e0 e6       	ldi	r30, 0x60	; 96
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	de 01       	movw	r26, r28
 284:	19 96       	adiw	r26, 0x09	; 9
 286:	01 90       	ld	r0, Z+
 288:	0d 92       	st	X+, r0
 28a:	8a 95       	dec	r24
 28c:	e1 f7       	brne	.-8      	; 0x286 <main+0x30>
		 {A, 4, Output, Low},  // D6
		 {A, 5, Output, Low}   // D7
	 };

	 // Initialize LCD structure for 4-bit mode
	 lcd_4bit_mode lcd = {lcd_en, lcd_rs, {lcd_data[0], lcd_data[1], lcd_data[2], lcd_data[3]}};
 28e:	89 81       	ldd	r24, Y+1	; 0x01
 290:	9a 81       	ldd	r25, Y+2	; 0x02
 292:	ab 81       	ldd	r26, Y+3	; 0x03
 294:	bc 81       	ldd	r27, Y+4	; 0x04
 296:	89 8f       	std	Y+25, r24	; 0x19
 298:	9a 8f       	std	Y+26, r25	; 0x1a
 29a:	ab 8f       	std	Y+27, r26	; 0x1b
 29c:	bc 8f       	std	Y+28, r27	; 0x1c
 29e:	8d 81       	ldd	r24, Y+5	; 0x05
 2a0:	9e 81       	ldd	r25, Y+6	; 0x06
 2a2:	af 81       	ldd	r26, Y+7	; 0x07
 2a4:	b8 85       	ldd	r27, Y+8	; 0x08
 2a6:	8d 8f       	std	Y+29, r24	; 0x1d
 2a8:	9e 8f       	std	Y+30, r25	; 0x1e
 2aa:	af 8f       	std	Y+31, r26	; 0x1f
 2ac:	b8 a3       	std	Y+32, r27	; 0x20
 2ae:	89 85       	ldd	r24, Y+9	; 0x09
 2b0:	9a 85       	ldd	r25, Y+10	; 0x0a
 2b2:	ab 85       	ldd	r26, Y+11	; 0x0b
 2b4:	bc 85       	ldd	r27, Y+12	; 0x0c
 2b6:	89 a3       	std	Y+33, r24	; 0x21
 2b8:	9a a3       	std	Y+34, r25	; 0x22
 2ba:	ab a3       	std	Y+35, r26	; 0x23
 2bc:	bc a3       	std	Y+36, r27	; 0x24
 2be:	8d 85       	ldd	r24, Y+13	; 0x0d
 2c0:	9e 85       	ldd	r25, Y+14	; 0x0e
 2c2:	af 85       	ldd	r26, Y+15	; 0x0f
 2c4:	b8 89       	ldd	r27, Y+16	; 0x10
 2c6:	8d a3       	std	Y+37, r24	; 0x25
 2c8:	9e a3       	std	Y+38, r25	; 0x26
 2ca:	af a3       	std	Y+39, r26	; 0x27
 2cc:	b8 a7       	std	Y+40, r27	; 0x28
 2ce:	89 89       	ldd	r24, Y+17	; 0x11
 2d0:	9a 89       	ldd	r25, Y+18	; 0x12
 2d2:	ab 89       	ldd	r26, Y+19	; 0x13
 2d4:	bc 89       	ldd	r27, Y+20	; 0x14
 2d6:	89 a7       	std	Y+41, r24	; 0x29
 2d8:	9a a7       	std	Y+42, r25	; 0x2a
 2da:	ab a7       	std	Y+43, r26	; 0x2b
 2dc:	bc a7       	std	Y+44, r27	; 0x2c
 2de:	8d 89       	ldd	r24, Y+21	; 0x15
 2e0:	9e 89       	ldd	r25, Y+22	; 0x16
 2e2:	af 89       	ldd	r26, Y+23	; 0x17
 2e4:	b8 8d       	ldd	r27, Y+24	; 0x18
 2e6:	8d a7       	std	Y+45, r24	; 0x2d
 2e8:	9e a7       	std	Y+46, r25	; 0x2e
 2ea:	af a7       	std	Y+47, r26	; 0x2f
 2ec:	b8 ab       	std	Y+48, r27	; 0x30
 Pin_logic_init(&lcd_en);
 2ee:	ce 01       	movw	r24, r28
 2f0:	01 96       	adiw	r24, 0x01	; 1
 2f2:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <Pin_logic_init>
 Pin_logic_init(&lcd_rs);
 2f6:	ce 01       	movw	r24, r28
 2f8:	05 96       	adiw	r24, 0x05	; 5
 2fa:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <Pin_logic_init>
 for (int i = 0; i < 4; i++) {
 2fe:	00 e0       	ldi	r16, 0x00	; 0
 300:	10 e0       	ldi	r17, 0x00	; 0
 302:	0f c0       	rjmp	.+30     	; 0x322 <main+0xcc>
	 Pin_logic_init(&lcd_data[i]);
 304:	c8 01       	movw	r24, r16
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	29 e0       	ldi	r18, 0x09	; 9
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	2c 0f       	add	r18, r28
 314:	3d 1f       	adc	r19, r29
 316:	82 0f       	add	r24, r18
 318:	93 1f       	adc	r25, r19
 31a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <Pin_logic_init>

	 // Initialize LCD structure for 4-bit mode
	 lcd_4bit_mode lcd = {lcd_en, lcd_rs, {lcd_data[0], lcd_data[1], lcd_data[2], lcd_data[3]}};
 Pin_logic_init(&lcd_en);
 Pin_logic_init(&lcd_rs);
 for (int i = 0; i < 4; i++) {
 31e:	0f 5f       	subi	r16, 0xFF	; 255
 320:	1f 4f       	sbci	r17, 0xFF	; 255
 322:	04 30       	cpi	r16, 0x04	; 4
 324:	11 05       	cpc	r17, r1
 326:	74 f3       	brlt	.-36     	; 0x304 <main+0xae>
	 Pin_logic_init(&lcd_data[i]);
 }

	 // Initialize LCD in 4-bit mode
	 lcd_4bit_initialize(&lcd);
 328:	ce 01       	movw	r24, r28
 32a:	49 96       	adiw	r24, 0x19	; 25
 32c:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_4bit_initialize>

	 // Example usage: Display a string on LCD
	 char display_str[] = "Hello, LCD!";
 330:	8c e0       	ldi	r24, 0x0C	; 12
 332:	e0 e7       	ldi	r30, 0x70	; 112
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	de 01       	movw	r26, r28
 338:	d1 96       	adiw	r26, 0x31	; 49
 33a:	01 90       	ld	r0, Z+
 33c:	0d 92       	st	X+, r0
 33e:	8a 95       	dec	r24
 340:	e1 f7       	brne	.-8      	; 0x33a <main+0xe4>
	 lcd_4bit_send_string(&lcd, (unsigned char *) display_str);
 342:	be 01       	movw	r22, r28
 344:	6f 5c       	subi	r22, 0xCF	; 207
 346:	7f 4f       	sbci	r23, 0xFF	; 255
 348:	ce 01       	movw	r24, r28
 34a:	49 96       	adiw	r24, 0x19	; 25
 34c:	0e 94 13 01 	call	0x226	; 0x226 <lcd_4bit_send_string>
 350:	ff cf       	rjmp	.-2      	; 0x350 <main+0xfa>

00000352 <Pin_Set>:
		default:
		return NOK;
	}

	return ROK;
}
 352:	fc 01       	movw	r30, r24
 354:	89 2b       	or	r24, r25
 356:	09 f4       	brne	.+2      	; 0x35a <Pin_Set+0x8>
 358:	45 c0       	rjmp	.+138    	; 0x3e4 <Pin_Set+0x92>
 35a:	80 81       	ld	r24, Z
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	a9 f0       	breq	.+42     	; 0x38a <Pin_Set+0x38>
 360:	28 f0       	brcs	.+10     	; 0x36c <Pin_Set+0x1a>
 362:	82 30       	cpi	r24, 0x02	; 2
 364:	09 f1       	breq	.+66     	; 0x3a8 <Pin_Set+0x56>
 366:	83 30       	cpi	r24, 0x03	; 3
 368:	71 f1       	breq	.+92     	; 0x3c6 <Pin_Set+0x74>
 36a:	3e c0       	rjmp	.+124    	; 0x3e8 <Pin_Set+0x96>
 36c:	2b b3       	in	r18, 0x1b	; 27
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	01 80       	ldd	r0, Z+1	; 0x01
 374:	02 c0       	rjmp	.+4      	; 0x37a <Pin_Set+0x28>
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	0a 94       	dec	r0
 37c:	e2 f7       	brpl	.-8      	; 0x376 <Pin_Set+0x24>
 37e:	82 2b       	or	r24, r18
 380:	8b bb       	out	0x1b, r24	; 27
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	83 83       	std	Z+3, r24	; 0x03
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	08 95       	ret
 38a:	28 b3       	in	r18, 0x18	; 24
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	01 80       	ldd	r0, Z+1	; 0x01
 392:	02 c0       	rjmp	.+4      	; 0x398 <Pin_Set+0x46>
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	0a 94       	dec	r0
 39a:	e2 f7       	brpl	.-8      	; 0x394 <Pin_Set+0x42>
 39c:	82 2b       	or	r24, r18
 39e:	88 bb       	out	0x18, r24	; 24
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	83 83       	std	Z+3, r24	; 0x03
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	08 95       	ret
 3a8:	25 b3       	in	r18, 0x15	; 21
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	01 80       	ldd	r0, Z+1	; 0x01
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <Pin_Set+0x64>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	0a 94       	dec	r0
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <Pin_Set+0x60>
 3ba:	82 2b       	or	r24, r18
 3bc:	85 bb       	out	0x15, r24	; 21
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	83 83       	std	Z+3, r24	; 0x03
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	08 95       	ret
 3c6:	22 b3       	in	r18, 0x12	; 18
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	01 80       	ldd	r0, Z+1	; 0x01
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <Pin_Set+0x82>
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	0a 94       	dec	r0
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <Pin_Set+0x7e>
 3d8:	82 2b       	or	r24, r18
 3da:	82 bb       	out	0x12, r24	; 18
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	83 83       	std	Z+3, r24	; 0x03
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	08 95       	ret
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	08 95       	ret
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	08 95       	ret

000003ec <Pin_Clear>:
 3ec:	fc 01       	movw	r30, r24
 3ee:	89 2b       	or	r24, r25
 3f0:	09 f4       	brne	.+2      	; 0x3f4 <Pin_Clear+0x8>
 3f2:	45 c0       	rjmp	.+138    	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 3f4:	80 81       	ld	r24, Z
 3f6:	81 30       	cpi	r24, 0x01	; 1
 3f8:	a9 f0       	breq	.+42     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 3fa:	28 f0       	brcs	.+10     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3fc:	82 30       	cpi	r24, 0x02	; 2
 3fe:	09 f1       	breq	.+66     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 400:	83 30       	cpi	r24, 0x03	; 3
 402:	71 f1       	breq	.+92     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 404:	3e c0       	rjmp	.+124    	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 406:	2b b3       	in	r18, 0x1b	; 27
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	01 80       	ldd	r0, Z+1	; 0x01
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	0a 94       	dec	r0
 416:	e2 f7       	brpl	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 418:	80 95       	com	r24
 41a:	82 23       	and	r24, r18
 41c:	8b bb       	out	0x1b, r24	; 27
 41e:	13 82       	std	Z+3, r1	; 0x03
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	08 95       	ret
 424:	28 b3       	in	r18, 0x18	; 24
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	01 80       	ldd	r0, Z+1	; 0x01
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	0a 94       	dec	r0
 434:	e2 f7       	brpl	.-8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 436:	80 95       	com	r24
 438:	82 23       	and	r24, r18
 43a:	88 bb       	out	0x18, r24	; 24
 43c:	13 82       	std	Z+3, r1	; 0x03
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	08 95       	ret
 442:	25 b3       	in	r18, 0x15	; 21
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	01 80       	ldd	r0, Z+1	; 0x01
 44a:	02 c0       	rjmp	.+4      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	0a 94       	dec	r0
 452:	e2 f7       	brpl	.-8      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 454:	80 95       	com	r24
 456:	82 23       	and	r24, r18
 458:	85 bb       	out	0x15, r24	; 21
 45a:	13 82       	std	Z+3, r1	; 0x03
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	08 95       	ret
 460:	22 b3       	in	r18, 0x12	; 18
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	01 80       	ldd	r0, Z+1	; 0x01
 468:	02 c0       	rjmp	.+4      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	0a 94       	dec	r0
 470:	e2 f7       	brpl	.-8      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 472:	80 95       	com	r24
 474:	82 23       	and	r24, r18
 476:	82 bb       	out	0x12, r24	; 18
 478:	13 82       	std	Z+3, r1	; 0x03
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	08 95       	ret
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	08 95       	ret
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	08 95       	ret

00000486 <Pin_Direction>:
 486:	fc 01       	movw	r30, r24
 488:	89 2b       	or	r24, r25
 48a:	09 f4       	brne	.+2      	; 0x48e <Pin_Direction+0x8>
 48c:	84 c0       	rjmp	.+264    	; 0x596 <Pin_Direction+0x110>
 48e:	82 81       	ldd	r24, Z+2	; 0x02
 490:	81 11       	cpse	r24, r1
 492:	41 c0       	rjmp	.+130    	; 0x516 <Pin_Direction+0x90>
 494:	80 81       	ld	r24, Z
 496:	81 30       	cpi	r24, 0x01	; 1
 498:	a1 f0       	breq	.+40     	; 0x4c2 <Pin_Direction+0x3c>
 49a:	28 f0       	brcs	.+10     	; 0x4a6 <Pin_Direction+0x20>
 49c:	82 30       	cpi	r24, 0x02	; 2
 49e:	f9 f0       	breq	.+62     	; 0x4de <Pin_Direction+0x58>
 4a0:	83 30       	cpi	r24, 0x03	; 3
 4a2:	59 f1       	breq	.+86     	; 0x4fa <Pin_Direction+0x74>
 4a4:	7a c0       	rjmp	.+244    	; 0x59a <Pin_Direction+0x114>
 4a6:	2a b3       	in	r18, 0x1a	; 26
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	01 80       	ldd	r0, Z+1	; 0x01
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <Pin_Direction+0x2e>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	0a 94       	dec	r0
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <Pin_Direction+0x2a>
 4b8:	80 95       	com	r24
 4ba:	82 23       	and	r24, r18
 4bc:	8a bb       	out	0x1a, r24	; 26
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	08 95       	ret
 4c2:	27 b3       	in	r18, 0x17	; 23
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	01 80       	ldd	r0, Z+1	; 0x01
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <Pin_Direction+0x4a>
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	0a 94       	dec	r0
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <Pin_Direction+0x46>
 4d4:	80 95       	com	r24
 4d6:	82 23       	and	r24, r18
 4d8:	87 bb       	out	0x17, r24	; 23
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	08 95       	ret
 4de:	24 b3       	in	r18, 0x14	; 20
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	01 80       	ldd	r0, Z+1	; 0x01
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <Pin_Direction+0x66>
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	0a 94       	dec	r0
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <Pin_Direction+0x62>
 4f0:	80 95       	com	r24
 4f2:	82 23       	and	r24, r18
 4f4:	84 bb       	out	0x14, r24	; 20
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	08 95       	ret
 4fa:	21 b3       	in	r18, 0x11	; 17
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	01 80       	ldd	r0, Z+1	; 0x01
 502:	02 c0       	rjmp	.+4      	; 0x508 <Pin_Direction+0x82>
 504:	88 0f       	add	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	0a 94       	dec	r0
 50a:	e2 f7       	brpl	.-8      	; 0x504 <Pin_Direction+0x7e>
 50c:	80 95       	com	r24
 50e:	82 23       	and	r24, r18
 510:	81 bb       	out	0x11, r24	; 17
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	08 95       	ret
 516:	81 30       	cpi	r24, 0x01	; 1
 518:	09 f0       	breq	.+2      	; 0x51c <Pin_Direction+0x96>
 51a:	41 c0       	rjmp	.+130    	; 0x59e <Pin_Direction+0x118>
 51c:	80 81       	ld	r24, Z
 51e:	81 30       	cpi	r24, 0x01	; 1
 520:	99 f0       	breq	.+38     	; 0x548 <Pin_Direction+0xc2>
 522:	28 f0       	brcs	.+10     	; 0x52e <Pin_Direction+0xa8>
 524:	82 30       	cpi	r24, 0x02	; 2
 526:	e9 f0       	breq	.+58     	; 0x562 <Pin_Direction+0xdc>
 528:	83 30       	cpi	r24, 0x03	; 3
 52a:	41 f1       	breq	.+80     	; 0x57c <Pin_Direction+0xf6>
 52c:	3a c0       	rjmp	.+116    	; 0x5a2 <Pin_Direction+0x11c>
 52e:	2a b3       	in	r18, 0x1a	; 26
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	01 80       	ldd	r0, Z+1	; 0x01
 536:	02 c0       	rjmp	.+4      	; 0x53c <Pin_Direction+0xb6>
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	0a 94       	dec	r0
 53e:	e2 f7       	brpl	.-8      	; 0x538 <Pin_Direction+0xb2>
 540:	82 2b       	or	r24, r18
 542:	8a bb       	out	0x1a, r24	; 26
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	08 95       	ret
 548:	27 b3       	in	r18, 0x17	; 23
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	01 80       	ldd	r0, Z+1	; 0x01
 550:	02 c0       	rjmp	.+4      	; 0x556 <Pin_Direction+0xd0>
 552:	88 0f       	add	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	0a 94       	dec	r0
 558:	e2 f7       	brpl	.-8      	; 0x552 <Pin_Direction+0xcc>
 55a:	82 2b       	or	r24, r18
 55c:	87 bb       	out	0x17, r24	; 23
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	08 95       	ret
 562:	24 b3       	in	r18, 0x14	; 20
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	01 80       	ldd	r0, Z+1	; 0x01
 56a:	02 c0       	rjmp	.+4      	; 0x570 <Pin_Direction+0xea>
 56c:	88 0f       	add	r24, r24
 56e:	99 1f       	adc	r25, r25
 570:	0a 94       	dec	r0
 572:	e2 f7       	brpl	.-8      	; 0x56c <Pin_Direction+0xe6>
 574:	82 2b       	or	r24, r18
 576:	84 bb       	out	0x14, r24	; 20
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	08 95       	ret
 57c:	21 b3       	in	r18, 0x11	; 17
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	01 80       	ldd	r0, Z+1	; 0x01
 584:	02 c0       	rjmp	.+4      	; 0x58a <Pin_Direction+0x104>
 586:	88 0f       	add	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	0a 94       	dec	r0
 58c:	e2 f7       	brpl	.-8      	; 0x586 <Pin_Direction+0x100>
 58e:	82 2b       	or	r24, r18
 590:	81 bb       	out	0x11, r24	; 17
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	08 95       	ret
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	08 95       	ret
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	08 95       	ret
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	08 95       	ret
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	08 95       	ret

000005a6 <Pin_logic_init>:
 5a6:	cf 93       	push	r28
 5a8:	df 93       	push	r29
 5aa:	ec 01       	movw	r28, r24
 5ac:	0e 94 43 02 	call	0x486	; 0x486 <Pin_Direction>
 5b0:	20 97       	sbiw	r28, 0x00	; 0
 5b2:	79 f0       	breq	.+30     	; 0x5d2 <Pin_logic_init+0x2c>
 5b4:	8b 81       	ldd	r24, Y+3	; 0x03
 5b6:	81 11       	cpse	r24, r1
 5b8:	05 c0       	rjmp	.+10     	; 0x5c4 <Pin_logic_init+0x1e>
 5ba:	ce 01       	movw	r24, r28
 5bc:	0e 94 f6 01 	call	0x3ec	; 0x3ec <Pin_Clear>
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	0a c0       	rjmp	.+20     	; 0x5d8 <Pin_logic_init+0x32>
 5c4:	81 30       	cpi	r24, 0x01	; 1
 5c6:	39 f4       	brne	.+14     	; 0x5d6 <Pin_logic_init+0x30>
 5c8:	ce 01       	movw	r24, r28
 5ca:	0e 94 a9 01 	call	0x352	; 0x352 <Pin_Set>
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	03 c0       	rjmp	.+6      	; 0x5d8 <Pin_logic_init+0x32>
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	01 c0       	rjmp	.+2      	; 0x5d8 <Pin_logic_init+0x32>
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	df 91       	pop	r29
 5da:	cf 91       	pop	r28
 5dc:	08 95       	ret

000005de <Pin_write>:
Std_return Pin_write(Pin_config_t *pin,Logic_t volt){
	if (!pin ) {
 5de:	00 97       	sbiw	r24, 0x00	; 0
 5e0:	51 f0       	breq	.+20     	; 0x5f6 <Pin_write+0x18>
		return NOK;
	}
	if(volt){
 5e2:	66 23       	and	r22, r22
 5e4:	21 f0       	breq	.+8      	; 0x5ee <Pin_write+0x10>
		Pin_Set(pin);
 5e6:	0e 94 a9 01 	call	0x352	; 0x352 <Pin_Set>
	}else
	{
		Pin_Clear(pin);
	}
	return ROK;
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	08 95       	ret
	}
	if(volt){
		Pin_Set(pin);
	}else
	{
		Pin_Clear(pin);
 5ee:	0e 94 f6 01 	call	0x3ec	; 0x3ec <Pin_Clear>
	}
	return ROK;
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	08 95       	ret

	return ROK;
}
Std_return Pin_write(Pin_config_t *pin,Logic_t volt){
	if (!pin ) {
		return NOK;
 5f6:	81 e0       	ldi	r24, 0x01	; 1
	}else
	{
		Pin_Clear(pin);
	}
	return ROK;
}
 5f8:	08 95       	ret

000005fa <_exit>:
 5fa:	f8 94       	cli

000005fc <__stop_program>:
 5fc:	ff cf       	rjmp	.-2      	; 0x5fc <__stop_program>
