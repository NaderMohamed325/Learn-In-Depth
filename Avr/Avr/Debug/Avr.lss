
Avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000566  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000566  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000566  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000598  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000edc  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000091b  00000000  00000000  00001598  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008f6  00000000  00000000  00001eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  000027ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000783  00000000  00000000  000029e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006f8  00000000  00000000  0000316b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003863  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 4b 02 	jmp	0x496	; 0x496 <__vector_10>
  2c:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ef       	ldi	r30, 0xF2	; 242
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
* Author : Nader
*/

#include "MCAL/Timer/Timer.h"

int main(void) {
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <main+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <main+0x8>
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
	// Configure the pin for PWM output
	Pin_config_t Pin;
	Pin.port = B;
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	89 83       	std	Y+1, r24	; 0x01
	Pin.pin = 3;
  a2:	93 e0       	ldi	r25, 0x03	; 3
  a4:	9a 83       	std	Y+2, r25	; 0x02
	Pin.direction = Output;
  a6:	8b 83       	std	Y+3, r24	; 0x03
	Pin.logic = Low;
  a8:	1c 82       	std	Y+4, r1	; 0x04
	Pin_logic_init(&Pin);
  aa:	ce 01       	movw	r24, r28
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	0e 94 9d 01 	call	0x33a	; 0x33a <Pin_logic_init>

	// Initialize Timer0 for PWM generation with 50% duty cycle
	Timer0_PWM_Init(128, OC0_Clear, Prescaller_64);
  b2:	43 e0       	ldi	r20, 0x03	; 3
  b4:	60 e2       	ldi	r22, 0x20	; 32
  b6:	80 e8       	ldi	r24, 0x80	; 128
  b8:	0e 94 fd 01 	call	0x3fa	; 0x3fa <Timer0_PWM_Init>
  bc:	ff cf       	rjmp	.-2      	; 0xbc <main+0x2a>

000000be <__vector_16>:

/**
 * @brief ADC Conversion Complete Interrupt Service Routine.
 * This function is called when an ADC conversion is complete.
 */
ISR(ADC_vect) {
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
    adc_result = ADC;
  cc:	84 b1       	in	r24, 0x04	; 4
  ce:	95 b1       	in	r25, 0x05	; 5
  d0:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <adc_result+0x1>
  d4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <adc_result>
}
  d8:	9f 91       	pop	r25
  da:	8f 91       	pop	r24
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <Pin_Set>:
* @brief Sets the pin logic level to high.
*
* @param Pin Pointer to the pin configuration structure.
* @return Std_return ROK if successful, NOK if the pin configuration is null.
*/
Std_return Pin_Set(Pin_config_t *Pin) {
  e6:	fc 01       	movw	r30, r24
	if (!Pin) {
  e8:	89 2b       	or	r24, r25
  ea:	09 f4       	brne	.+2      	; 0xee <Pin_Set+0x8>
  ec:	45 c0       	rjmp	.+138    	; 0x178 <Pin_Set+0x92>
		return NOK;
	}
	switch (Pin->port) {
  ee:	80 81       	ld	r24, Z
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	a9 f0       	breq	.+42     	; 0x11e <Pin_Set+0x38>
  f4:	28 f0       	brcs	.+10     	; 0x100 <Pin_Set+0x1a>
  f6:	82 30       	cpi	r24, 0x02	; 2
  f8:	09 f1       	breq	.+66     	; 0x13c <Pin_Set+0x56>
  fa:	83 30       	cpi	r24, 0x03	; 3
  fc:	71 f1       	breq	.+92     	; 0x15a <Pin_Set+0x74>
  fe:	3e c0       	rjmp	.+124    	; 0x17c <Pin_Set+0x96>
		case A:
		SET_BIT(PORTA, Pin->pin);
 100:	2b b3       	in	r18, 0x1b	; 27
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	01 80       	ldd	r0, Z+1	; 0x01
 108:	02 c0       	rjmp	.+4      	; 0x10e <Pin_Set+0x28>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	0a 94       	dec	r0
 110:	e2 f7       	brpl	.-8      	; 0x10a <Pin_Set+0x24>
 112:	82 2b       	or	r24, r18
 114:	8b bb       	out	0x1b, r24	; 27
		Pin->logic = High;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	83 83       	std	Z+3, r24	; 0x03
		Pin->logic = High;
		break;
		default:
		return NOK;
	}
	return ROK;
 11a:	80 e0       	ldi	r24, 0x00	; 0
	}
	switch (Pin->port) {
		case A:
		SET_BIT(PORTA, Pin->pin);
		Pin->logic = High;
		break;
 11c:	08 95       	ret
		case B:
		SET_BIT(PORTB, Pin->pin);
 11e:	28 b3       	in	r18, 0x18	; 24
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	01 80       	ldd	r0, Z+1	; 0x01
 126:	02 c0       	rjmp	.+4      	; 0x12c <Pin_Set+0x46>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	0a 94       	dec	r0
 12e:	e2 f7       	brpl	.-8      	; 0x128 <Pin_Set+0x42>
 130:	82 2b       	or	r24, r18
 132:	88 bb       	out	0x18, r24	; 24
		Pin->logic = High;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	83 83       	std	Z+3, r24	; 0x03
		Pin->logic = High;
		break;
		default:
		return NOK;
	}
	return ROK;
 138:	80 e0       	ldi	r24, 0x00	; 0
		Pin->logic = High;
		break;
		case B:
		SET_BIT(PORTB, Pin->pin);
		Pin->logic = High;
		break;
 13a:	08 95       	ret
		case C:
		SET_BIT(PORTC, Pin->pin);
 13c:	25 b3       	in	r18, 0x15	; 21
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	01 80       	ldd	r0, Z+1	; 0x01
 144:	02 c0       	rjmp	.+4      	; 0x14a <Pin_Set+0x64>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	0a 94       	dec	r0
 14c:	e2 f7       	brpl	.-8      	; 0x146 <Pin_Set+0x60>
 14e:	82 2b       	or	r24, r18
 150:	85 bb       	out	0x15, r24	; 21
		Pin->logic = High;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	83 83       	std	Z+3, r24	; 0x03
		Pin->logic = High;
		break;
		default:
		return NOK;
	}
	return ROK;
 156:	80 e0       	ldi	r24, 0x00	; 0
		Pin->logic = High;
		break;
		case C:
		SET_BIT(PORTC, Pin->pin);
		Pin->logic = High;
		break;
 158:	08 95       	ret
		case D:
		SET_BIT(PORTD, Pin->pin);
 15a:	22 b3       	in	r18, 0x12	; 18
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	01 80       	ldd	r0, Z+1	; 0x01
 162:	02 c0       	rjmp	.+4      	; 0x168 <Pin_Set+0x82>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	0a 94       	dec	r0
 16a:	e2 f7       	brpl	.-8      	; 0x164 <Pin_Set+0x7e>
 16c:	82 2b       	or	r24, r18
 16e:	82 bb       	out	0x12, r24	; 18
		Pin->logic = High;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	83 83       	std	Z+3, r24	; 0x03
		break;
		default:
		return NOK;
	}
	return ROK;
 174:	80 e0       	ldi	r24, 0x00	; 0
		Pin->logic = High;
		break;
		case D:
		SET_BIT(PORTD, Pin->pin);
		Pin->logic = High;
		break;
 176:	08 95       	ret
* @param Pin Pointer to the pin configuration structure.
* @return Std_return ROK if successful, NOK if the pin configuration is null.
*/
Std_return Pin_Set(Pin_config_t *Pin) {
	if (!Pin) {
		return NOK;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	08 95       	ret
		case D:
		SET_BIT(PORTD, Pin->pin);
		Pin->logic = High;
		break;
		default:
		return NOK;
 17c:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ROK;
}
 17e:	08 95       	ret

00000180 <Pin_Clear>:
* @brief Sets the pin logic level to low.
*
* @param Pin Pointer to the pin configuration structure.
* @return Std_return ROK if successful, NOK if the pin configuration is null.
*/
Std_return Pin_Clear(Pin_config_t *Pin) {
 180:	fc 01       	movw	r30, r24
	if (!Pin) {
 182:	89 2b       	or	r24, r25
 184:	09 f4       	brne	.+2      	; 0x188 <Pin_Clear+0x8>
 186:	45 c0       	rjmp	.+138    	; 0x212 <Pin_Clear+0x92>
		return NOK;
	}
	switch (Pin->port) {
 188:	80 81       	ld	r24, Z
 18a:	81 30       	cpi	r24, 0x01	; 1
 18c:	a9 f0       	breq	.+42     	; 0x1b8 <Pin_Clear+0x38>
 18e:	28 f0       	brcs	.+10     	; 0x19a <Pin_Clear+0x1a>
 190:	82 30       	cpi	r24, 0x02	; 2
 192:	09 f1       	breq	.+66     	; 0x1d6 <Pin_Clear+0x56>
 194:	83 30       	cpi	r24, 0x03	; 3
 196:	71 f1       	breq	.+92     	; 0x1f4 <Pin_Clear+0x74>
 198:	3e c0       	rjmp	.+124    	; 0x216 <Pin_Clear+0x96>
		case A:
		CLEAR_BIT(PORTA, Pin->pin);
 19a:	2b b3       	in	r18, 0x1b	; 27
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	01 80       	ldd	r0, Z+1	; 0x01
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <Pin_Clear+0x28>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	0a 94       	dec	r0
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <Pin_Clear+0x24>
 1ac:	80 95       	com	r24
 1ae:	82 23       	and	r24, r18
 1b0:	8b bb       	out	0x1b, r24	; 27
		Pin->logic = Low;
 1b2:	13 82       	std	Z+3, r1	; 0x03
		Pin->logic = Low;
		break;
		default:
		return NOK;
	}
	return ROK;
 1b4:	80 e0       	ldi	r24, 0x00	; 0
	}
	switch (Pin->port) {
		case A:
		CLEAR_BIT(PORTA, Pin->pin);
		Pin->logic = Low;
		break;
 1b6:	08 95       	ret
		case B:
		CLEAR_BIT(PORTB, Pin->pin);
 1b8:	28 b3       	in	r18, 0x18	; 24
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	01 80       	ldd	r0, Z+1	; 0x01
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <Pin_Clear+0x46>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	0a 94       	dec	r0
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <Pin_Clear+0x42>
 1ca:	80 95       	com	r24
 1cc:	82 23       	and	r24, r18
 1ce:	88 bb       	out	0x18, r24	; 24
		Pin->logic = Low;
 1d0:	13 82       	std	Z+3, r1	; 0x03
		Pin->logic = Low;
		break;
		default:
		return NOK;
	}
	return ROK;
 1d2:	80 e0       	ldi	r24, 0x00	; 0
		Pin->logic = Low;
		break;
		case B:
		CLEAR_BIT(PORTB, Pin->pin);
		Pin->logic = Low;
		break;
 1d4:	08 95       	ret
		case C:
		CLEAR_BIT(PORTC, Pin->pin);
 1d6:	25 b3       	in	r18, 0x15	; 21
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	01 80       	ldd	r0, Z+1	; 0x01
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <Pin_Clear+0x64>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	0a 94       	dec	r0
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <Pin_Clear+0x60>
 1e8:	80 95       	com	r24
 1ea:	82 23       	and	r24, r18
 1ec:	85 bb       	out	0x15, r24	; 21
		Pin->logic = Low;
 1ee:	13 82       	std	Z+3, r1	; 0x03
		Pin->logic = Low;
		break;
		default:
		return NOK;
	}
	return ROK;
 1f0:	80 e0       	ldi	r24, 0x00	; 0
		Pin->logic = Low;
		break;
		case C:
		CLEAR_BIT(PORTC, Pin->pin);
		Pin->logic = Low;
		break;
 1f2:	08 95       	ret
		case D:
		CLEAR_BIT(PORTD, Pin->pin);
 1f4:	22 b3       	in	r18, 0x12	; 18
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	01 80       	ldd	r0, Z+1	; 0x01
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <Pin_Clear+0x82>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	0a 94       	dec	r0
 204:	e2 f7       	brpl	.-8      	; 0x1fe <Pin_Clear+0x7e>
 206:	80 95       	com	r24
 208:	82 23       	and	r24, r18
 20a:	82 bb       	out	0x12, r24	; 18
		Pin->logic = Low;
 20c:	13 82       	std	Z+3, r1	; 0x03
		break;
		default:
		return NOK;
	}
	return ROK;
 20e:	80 e0       	ldi	r24, 0x00	; 0
		Pin->logic = Low;
		break;
		case D:
		CLEAR_BIT(PORTD, Pin->pin);
		Pin->logic = Low;
		break;
 210:	08 95       	ret
* @param Pin Pointer to the pin configuration structure.
* @return Std_return ROK if successful, NOK if the pin configuration is null.
*/
Std_return Pin_Clear(Pin_config_t *Pin) {
	if (!Pin) {
		return NOK;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	08 95       	ret
		case D:
		CLEAR_BIT(PORTD, Pin->pin);
		Pin->logic = Low;
		break;
		default:
		return NOK;
 216:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ROK;
}
 218:	08 95       	ret

0000021a <Pin_Direction>:
* @brief Sets the pin direction to input or output.
*
* @param Pin Pointer to the pin configuration structure.
* @return Std_return ROK if successful, NOK if the pin configuration is null.
*/
Std_return Pin_Direction(Pin_config_t *Pin) {
 21a:	fc 01       	movw	r30, r24
	if (!Pin) {
 21c:	89 2b       	or	r24, r25
 21e:	09 f4       	brne	.+2      	; 0x222 <Pin_Direction+0x8>
 220:	84 c0       	rjmp	.+264    	; 0x32a <Pin_Direction+0x110>
		return NOK;
	}
	if (Pin->direction == Input) {
 222:	82 81       	ldd	r24, Z+2	; 0x02
 224:	81 11       	cpse	r24, r1
 226:	41 c0       	rjmp	.+130    	; 0x2aa <Pin_Direction+0x90>
		switch (Pin->port) {
 228:	80 81       	ld	r24, Z
 22a:	81 30       	cpi	r24, 0x01	; 1
 22c:	a1 f0       	breq	.+40     	; 0x256 <Pin_Direction+0x3c>
 22e:	28 f0       	brcs	.+10     	; 0x23a <Pin_Direction+0x20>
 230:	82 30       	cpi	r24, 0x02	; 2
 232:	f9 f0       	breq	.+62     	; 0x272 <Pin_Direction+0x58>
 234:	83 30       	cpi	r24, 0x03	; 3
 236:	59 f1       	breq	.+86     	; 0x28e <Pin_Direction+0x74>
 238:	7a c0       	rjmp	.+244    	; 0x32e <Pin_Direction+0x114>
			case A:
			CLEAR_BIT(DDRA, Pin->pin);
 23a:	2a b3       	in	r18, 0x1a	; 26
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	01 80       	ldd	r0, Z+1	; 0x01
 242:	02 c0       	rjmp	.+4      	; 0x248 <Pin_Direction+0x2e>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	0a 94       	dec	r0
 24a:	e2 f7       	brpl	.-8      	; 0x244 <Pin_Direction+0x2a>
 24c:	80 95       	com	r24
 24e:	82 23       	and	r24, r18
 250:	8a bb       	out	0x1a, r24	; 26
			break;
			default:
			return NOK;
		}
	}
	return ROK;
 252:	80 e0       	ldi	r24, 0x00	; 0
	}
	if (Pin->direction == Input) {
		switch (Pin->port) {
			case A:
			CLEAR_BIT(DDRA, Pin->pin);
			break;
 254:	08 95       	ret
			case B:
			CLEAR_BIT(DDRB, Pin->pin);
 256:	27 b3       	in	r18, 0x17	; 23
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	01 80       	ldd	r0, Z+1	; 0x01
 25e:	02 c0       	rjmp	.+4      	; 0x264 <Pin_Direction+0x4a>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	0a 94       	dec	r0
 266:	e2 f7       	brpl	.-8      	; 0x260 <Pin_Direction+0x46>
 268:	80 95       	com	r24
 26a:	82 23       	and	r24, r18
 26c:	87 bb       	out	0x17, r24	; 23
			break;
			default:
			return NOK;
		}
	}
	return ROK;
 26e:	80 e0       	ldi	r24, 0x00	; 0
			case A:
			CLEAR_BIT(DDRA, Pin->pin);
			break;
			case B:
			CLEAR_BIT(DDRB, Pin->pin);
			break;
 270:	08 95       	ret
			case C:
			CLEAR_BIT(DDRC, Pin->pin);
 272:	24 b3       	in	r18, 0x14	; 20
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	01 80       	ldd	r0, Z+1	; 0x01
 27a:	02 c0       	rjmp	.+4      	; 0x280 <Pin_Direction+0x66>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	0a 94       	dec	r0
 282:	e2 f7       	brpl	.-8      	; 0x27c <Pin_Direction+0x62>
 284:	80 95       	com	r24
 286:	82 23       	and	r24, r18
 288:	84 bb       	out	0x14, r24	; 20
			break;
			default:
			return NOK;
		}
	}
	return ROK;
 28a:	80 e0       	ldi	r24, 0x00	; 0
			case B:
			CLEAR_BIT(DDRB, Pin->pin);
			break;
			case C:
			CLEAR_BIT(DDRC, Pin->pin);
			break;
 28c:	08 95       	ret
			case D:
			CLEAR_BIT(DDRD, Pin->pin);
 28e:	21 b3       	in	r18, 0x11	; 17
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	01 80       	ldd	r0, Z+1	; 0x01
 296:	02 c0       	rjmp	.+4      	; 0x29c <Pin_Direction+0x82>
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	0a 94       	dec	r0
 29e:	e2 f7       	brpl	.-8      	; 0x298 <Pin_Direction+0x7e>
 2a0:	80 95       	com	r24
 2a2:	82 23       	and	r24, r18
 2a4:	81 bb       	out	0x11, r24	; 17
			break;
			default:
			return NOK;
		}
	}
	return ROK;
 2a6:	80 e0       	ldi	r24, 0x00	; 0
			case C:
			CLEAR_BIT(DDRC, Pin->pin);
			break;
			case D:
			CLEAR_BIT(DDRD, Pin->pin);
			break;
 2a8:	08 95       	ret
			default:
			return NOK;
		}
		} else if (Pin->direction == Output) {
 2aa:	81 30       	cpi	r24, 0x01	; 1
 2ac:	09 f0       	breq	.+2      	; 0x2b0 <Pin_Direction+0x96>
 2ae:	41 c0       	rjmp	.+130    	; 0x332 <Pin_Direction+0x118>
		switch (Pin->port) {
 2b0:	80 81       	ld	r24, Z
 2b2:	81 30       	cpi	r24, 0x01	; 1
 2b4:	99 f0       	breq	.+38     	; 0x2dc <Pin_Direction+0xc2>
 2b6:	28 f0       	brcs	.+10     	; 0x2c2 <Pin_Direction+0xa8>
 2b8:	82 30       	cpi	r24, 0x02	; 2
 2ba:	e9 f0       	breq	.+58     	; 0x2f6 <Pin_Direction+0xdc>
 2bc:	83 30       	cpi	r24, 0x03	; 3
 2be:	41 f1       	breq	.+80     	; 0x310 <Pin_Direction+0xf6>
 2c0:	3a c0       	rjmp	.+116    	; 0x336 <Pin_Direction+0x11c>
			case A:
			SET_BIT(DDRA, Pin->pin);
 2c2:	2a b3       	in	r18, 0x1a	; 26
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	01 80       	ldd	r0, Z+1	; 0x01
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <Pin_Direction+0xb6>
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	0a 94       	dec	r0
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <Pin_Direction+0xb2>
 2d4:	82 2b       	or	r24, r18
 2d6:	8a bb       	out	0x1a, r24	; 26
			break;
			default:
			return NOK;
		}
	}
	return ROK;
 2d8:	80 e0       	ldi	r24, 0x00	; 0
		}
		} else if (Pin->direction == Output) {
		switch (Pin->port) {
			case A:
			SET_BIT(DDRA, Pin->pin);
			break;
 2da:	08 95       	ret
			case B:
			SET_BIT(DDRB, Pin->pin);
 2dc:	27 b3       	in	r18, 0x17	; 23
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	01 80       	ldd	r0, Z+1	; 0x01
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <Pin_Direction+0xd0>
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	0a 94       	dec	r0
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <Pin_Direction+0xcc>
 2ee:	82 2b       	or	r24, r18
 2f0:	87 bb       	out	0x17, r24	; 23
			break;
			default:
			return NOK;
		}
	}
	return ROK;
 2f2:	80 e0       	ldi	r24, 0x00	; 0
			case A:
			SET_BIT(DDRA, Pin->pin);
			break;
			case B:
			SET_BIT(DDRB, Pin->pin);
			break;
 2f4:	08 95       	ret
			case C:
			SET_BIT(DDRC, Pin->pin);
 2f6:	24 b3       	in	r18, 0x14	; 20
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	01 80       	ldd	r0, Z+1	; 0x01
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <Pin_Direction+0xea>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	0a 94       	dec	r0
 306:	e2 f7       	brpl	.-8      	; 0x300 <Pin_Direction+0xe6>
 308:	82 2b       	or	r24, r18
 30a:	84 bb       	out	0x14, r24	; 20
			break;
			default:
			return NOK;
		}
	}
	return ROK;
 30c:	80 e0       	ldi	r24, 0x00	; 0
			case B:
			SET_BIT(DDRB, Pin->pin);
			break;
			case C:
			SET_BIT(DDRC, Pin->pin);
			break;
 30e:	08 95       	ret
			case D:
			SET_BIT(DDRD, Pin->pin);
 310:	21 b3       	in	r18, 0x11	; 17
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	01 80       	ldd	r0, Z+1	; 0x01
 318:	02 c0       	rjmp	.+4      	; 0x31e <Pin_Direction+0x104>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	0a 94       	dec	r0
 320:	e2 f7       	brpl	.-8      	; 0x31a <Pin_Direction+0x100>
 322:	82 2b       	or	r24, r18
 324:	81 bb       	out	0x11, r24	; 17
			break;
			default:
			return NOK;
		}
	}
	return ROK;
 326:	80 e0       	ldi	r24, 0x00	; 0
			case C:
			SET_BIT(DDRC, Pin->pin);
			break;
			case D:
			SET_BIT(DDRD, Pin->pin);
			break;
 328:	08 95       	ret
* @param Pin Pointer to the pin configuration structure.
* @return Std_return ROK if successful, NOK if the pin configuration is null.
*/
Std_return Pin_Direction(Pin_config_t *Pin) {
	if (!Pin) {
		return NOK;
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	08 95       	ret
			break;
			case D:
			CLEAR_BIT(DDRD, Pin->pin);
			break;
			default:
			return NOK;
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	08 95       	ret
			break;
			default:
			return NOK;
		}
	}
	return ROK;
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	08 95       	ret
			break;
			case D:
			SET_BIT(DDRD, Pin->pin);
			break;
			default:
			return NOK;
 336:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return ROK;
}
 338:	08 95       	ret

0000033a <Pin_logic_init>:
* @brief Initializes the pin direction and sets its logic level.
*
* @param Pin Pointer to the pin configuration structure.
* @return Std_return ROK if successful, NOK if the pin configuration is null.
*/
Std_return Pin_logic_init(Pin_config_t *Pin) {
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	ec 01       	movw	r28, r24
	Pin_Direction(Pin);
 340:	0e 94 0d 01 	call	0x21a	; 0x21a <Pin_Direction>
	if (!Pin) {
 344:	20 97       	sbiw	r28, 0x00	; 0
 346:	79 f0       	breq	.+30     	; 0x366 <Pin_logic_init+0x2c>
		return NOK;
	}
	if (Pin->logic == Low) {
 348:	8b 81       	ldd	r24, Y+3	; 0x03
 34a:	81 11       	cpse	r24, r1
 34c:	05 c0       	rjmp	.+10     	; 0x358 <Pin_logic_init+0x1e>
		Pin_Clear(Pin);
 34e:	ce 01       	movw	r24, r28
 350:	0e 94 c0 00 	call	0x180	; 0x180 <Pin_Clear>
		} else if (Pin->logic == High) {
		Pin_Set(Pin);
	}
	return ROK;
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	0a c0       	rjmp	.+20     	; 0x36c <Pin_logic_init+0x32>
	if (!Pin) {
		return NOK;
	}
	if (Pin->logic == Low) {
		Pin_Clear(Pin);
		} else if (Pin->logic == High) {
 358:	81 30       	cpi	r24, 0x01	; 1
 35a:	39 f4       	brne	.+14     	; 0x36a <Pin_logic_init+0x30>
		Pin_Set(Pin);
 35c:	ce 01       	movw	r24, r28
 35e:	0e 94 73 00 	call	0xe6	; 0xe6 <Pin_Set>
	}
	return ROK;
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	03 c0       	rjmp	.+6      	; 0x36c <Pin_logic_init+0x32>
* @return Std_return ROK if successful, NOK if the pin configuration is null.
*/
Std_return Pin_logic_init(Pin_config_t *Pin) {
	Pin_Direction(Pin);
	if (!Pin) {
		return NOK;
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	01 c0       	rjmp	.+2      	; 0x36c <Pin_logic_init+0x32>
	if (Pin->logic == Low) {
		Pin_Clear(Pin);
		} else if (Pin->logic == High) {
		Pin_Set(Pin);
	}
	return ROK;
 36a:	80 e0       	ldi	r24, 0x00	; 0
}
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	08 95       	ret

00000372 <Timer_OCR0_Set_Compare_Value>:
* a compare match interrupt or to set the output pin behavior.
*
* @param value The compare value to be set in the OCR0 register.
*/
void Timer_OCR0_Set_Compare_Value(uint8_t value) {
	OCR0 = value;
 372:	8c bf       	out	0x3c, r24	; 60
 374:	08 95       	ret

00000376 <Timer0_Init>:
* prescaler, and compare value.
*
* @param timer Pointer to the Timer0_t structure containing the configuration.
* @return true if initialization is successful, false otherwise.
*/
bool Timer0_Init(Timer0_t *timer) {
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
	if (!timer) {
 37a:	00 97       	sbiw	r24, 0x00	; 0
 37c:	d1 f1       	breq	.+116    	; 0x3f2 <Timer0_Init+0x7c>
		return false;
	}

	global_timer = timer;
 37e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 382:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

	// Reset TCCR0 register
	TCCR0 = 0x00;
 386:	13 be       	out	0x33, r1	; 51

	// Set Timer mode
	TCCR0 |= timer->Timer_Mode;
 388:	33 b7       	in	r19, 0x33	; 51
 38a:	fc 01       	movw	r30, r24
 38c:	20 81       	ld	r18, Z
 38e:	23 2b       	or	r18, r19
 390:	23 bf       	out	0x33, r18	; 51

	// Configure Output Pin Functionality
	if (timer->Output_Pin_Functionality == OC0_Off) {
 392:	21 81       	ldd	r18, Z+1	; 0x01
 394:	21 11       	cpse	r18, r1
 396:	04 c0       	rjmp	.+8      	; 0x3a0 <Timer0_Init+0x2a>
		// Clear bits 4 and 5 for OC0 Off
		TCCR0 &= ~(3 << 4);
 398:	23 b7       	in	r18, 0x33	; 51
 39a:	2f 7c       	andi	r18, 0xCF	; 207
 39c:	23 bf       	out	0x33, r18	; 51
 39e:	03 c0       	rjmp	.+6      	; 0x3a6 <Timer0_Init+0x30>
		} else {
		// Set Output Pin Functionality
		TCCR0 |= timer->Output_Pin_Functionality;
 3a0:	33 b7       	in	r19, 0x33	; 51
 3a2:	23 2b       	or	r18, r19
 3a4:	23 bf       	out	0x33, r18	; 51
 3a6:	ec 01       	movw	r28, r24
	}

	// Set Compare Value
	Timer_OCR0_Set_Compare_Value(timer->Compare_Value);
 3a8:	8b 81       	ldd	r24, Y+3	; 0x03
 3aa:	0e 94 b9 01 	call	0x372	; 0x372 <Timer_OCR0_Set_Compare_Value>

	// Force Output Compare Pin
	if (timer->Force_Output_Pin) {
 3ae:	8c 81       	ldd	r24, Y+4	; 0x04
 3b0:	88 23       	and	r24, r24
 3b2:	19 f0       	breq	.+6      	; 0x3ba <Timer0_Init+0x44>
		TCCR0 |= (1 << FOC0);
 3b4:	83 b7       	in	r24, 0x33	; 51
 3b6:	80 68       	ori	r24, 0x80	; 128
 3b8:	83 bf       	out	0x33, r24	; 51
	}

	// Enable interrupts in TIMSK
	TIMSK &= ~(1 << TOIE0) & ~(1 << OCIE0); // Disable both interrupts initially
 3ba:	89 b7       	in	r24, 0x39	; 57
 3bc:	8c 7f       	andi	r24, 0xFC	; 252
 3be:	89 bf       	out	0x39, r24	; 57
	if (timer->interrupt_status == OverFlow_Interrupt) {
 3c0:	8d 81       	ldd	r24, Y+5	; 0x05
 3c2:	81 30       	cpi	r24, 0x01	; 1
 3c4:	21 f4       	brne	.+8      	; 0x3ce <Timer0_Init+0x58>
		TIMSK |= (1 << TOIE0); // Enable Overflow Interrupt
 3c6:	89 b7       	in	r24, 0x39	; 57
 3c8:	81 60       	ori	r24, 0x01	; 1
 3ca:	89 bf       	out	0x39, r24	; 57
 3cc:	0b c0       	rjmp	.+22     	; 0x3e4 <Timer0_Init+0x6e>
		} else if (timer->interrupt_status == Compare_Interrupt) {
 3ce:	82 30       	cpi	r24, 0x02	; 2
 3d0:	21 f4       	brne	.+8      	; 0x3da <Timer0_Init+0x64>
		TIMSK |= (1 << OCIE0); // Enable Compare Match Interrupt
 3d2:	89 b7       	in	r24, 0x39	; 57
 3d4:	82 60       	ori	r24, 0x02	; 2
 3d6:	89 bf       	out	0x39, r24	; 57
 3d8:	05 c0       	rjmp	.+10     	; 0x3e4 <Timer0_Init+0x6e>
		} else if (timer->interrupt_status == OverCompare_Interrupt) {
 3da:	83 30       	cpi	r24, 0x03	; 3
 3dc:	19 f4       	brne	.+6      	; 0x3e4 <Timer0_Init+0x6e>
		TIMSK |= (1 << TOIE0) | (1 << OCIE0); // Enable both interrupts
 3de:	89 b7       	in	r24, 0x39	; 57
 3e0:	83 60       	ori	r24, 0x03	; 3
 3e2:	89 bf       	out	0x39, r24	; 57
	}

	// Set Prescaler
	TCCR0 |= timer->Precaller;
 3e4:	93 b7       	in	r25, 0x33	; 51
 3e6:	8a 81       	ldd	r24, Y+2	; 0x02
 3e8:	89 2b       	or	r24, r25
 3ea:	83 bf       	out	0x33, r24	; 51

	// Enable global interrupts
	sei();
 3ec:	78 94       	sei

	return true;
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <Timer0_Init+0x7e>
* @param timer Pointer to the Timer0_t structure containing the configuration.
* @return true if initialization is successful, false otherwise.
*/
bool Timer0_Init(Timer0_t *timer) {
	if (!timer) {
		return false;
 3f2:	80 e0       	ldi	r24, 0x00	; 0

	// Enable global interrupts
	sei();

	return true;
}
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	08 95       	ret

000003fa <Timer0_PWM_Init>:
*
* @param duty_cycle The duty cycle of the PWM signal (0-255).
* @param output_mode The output mode for the PWM signal (OC0_Clear or OC0_Set).
* @param prescaler The prescaler value for the timer.
*/
void Timer0_PWM_Init(uint8_t duty_cycle, T_OC0Pin_t output_mode, T_clk_t prescaler) {
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	cd b7       	in	r28, 0x3d	; 61
 400:	de b7       	in	r29, 0x3e	; 62
 402:	2a 97       	sbiw	r28, 0x0a	; 10
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	f8 94       	cli
 408:	de bf       	out	0x3e, r29	; 62
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	cd bf       	out	0x3d, r28	; 61
	Timer0_t timer = {
 40e:	98 e4       	ldi	r25, 0x48	; 72
 410:	99 83       	std	Y+1, r25	; 0x01
 412:	6a 83       	std	Y+2, r22	; 0x02
 414:	4b 83       	std	Y+3, r20	; 0x03
 416:	8c 83       	std	Y+4, r24	; 0x04
 418:	1d 82       	std	Y+5, r1	; 0x05
 41a:	1e 82       	std	Y+6, r1	; 0x06
 41c:	18 86       	std	Y+8, r1	; 0x08
 41e:	1f 82       	std	Y+7, r1	; 0x07
 420:	1a 86       	std	Y+10, r1	; 0x0a
 422:	19 86       	std	Y+9, r1	; 0x09
		.interrupt_status = interrupt_Disable,
		.Call_Back_Overflow = NULL,
		.Call_Back_Compare = NULL
	};

	Timer0_Init(&timer);
 424:	ce 01       	movw	r24, r28
 426:	01 96       	adiw	r24, 0x01	; 1
 428:	0e 94 bb 01 	call	0x376	; 0x376 <Timer0_Init>
}
 42c:	2a 96       	adiw	r28, 0x0a	; 10
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	f8 94       	cli
 432:	de bf       	out	0x3e, r29	; 62
 434:	0f be       	out	0x3f, r0	; 63
 436:	cd bf       	out	0x3d, r28	; 61
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	08 95       	ret

0000043e <__vector_11>:

// ISR for Timer0 Overflow
ISR(TIMER0_OVF_vect) {
 43e:	1f 92       	push	r1
 440:	0f 92       	push	r0
 442:	0f b6       	in	r0, 0x3f	; 63
 444:	0f 92       	push	r0
 446:	11 24       	eor	r1, r1
 448:	2f 93       	push	r18
 44a:	3f 93       	push	r19
 44c:	4f 93       	push	r20
 44e:	5f 93       	push	r21
 450:	6f 93       	push	r22
 452:	7f 93       	push	r23
 454:	8f 93       	push	r24
 456:	9f 93       	push	r25
 458:	af 93       	push	r26
 45a:	bf 93       	push	r27
 45c:	ef 93       	push	r30
 45e:	ff 93       	push	r31
	if (global_timer->Call_Back_Overflow != NULL) {
 460:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 464:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 468:	06 80       	ldd	r0, Z+6	; 0x06
 46a:	f7 81       	ldd	r31, Z+7	; 0x07
 46c:	e0 2d       	mov	r30, r0
 46e:	30 97       	sbiw	r30, 0x00	; 0
 470:	09 f0       	breq	.+2      	; 0x474 <__vector_11+0x36>
		global_timer->Call_Back_Overflow();
 472:	09 95       	icall
	}
}
 474:	ff 91       	pop	r31
 476:	ef 91       	pop	r30
 478:	bf 91       	pop	r27
 47a:	af 91       	pop	r26
 47c:	9f 91       	pop	r25
 47e:	8f 91       	pop	r24
 480:	7f 91       	pop	r23
 482:	6f 91       	pop	r22
 484:	5f 91       	pop	r21
 486:	4f 91       	pop	r20
 488:	3f 91       	pop	r19
 48a:	2f 91       	pop	r18
 48c:	0f 90       	pop	r0
 48e:	0f be       	out	0x3f, r0	; 63
 490:	0f 90       	pop	r0
 492:	1f 90       	pop	r1
 494:	18 95       	reti

00000496 <__vector_10>:

// ISR for Timer0 Compare Match
ISR(TIMER0_COMP_vect) {
 496:	1f 92       	push	r1
 498:	0f 92       	push	r0
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	0f 92       	push	r0
 49e:	11 24       	eor	r1, r1
 4a0:	2f 93       	push	r18
 4a2:	3f 93       	push	r19
 4a4:	4f 93       	push	r20
 4a6:	5f 93       	push	r21
 4a8:	6f 93       	push	r22
 4aa:	7f 93       	push	r23
 4ac:	8f 93       	push	r24
 4ae:	9f 93       	push	r25
 4b0:	af 93       	push	r26
 4b2:	bf 93       	push	r27
 4b4:	ef 93       	push	r30
 4b6:	ff 93       	push	r31
	if (global_timer->Call_Back_Compare != NULL) {
 4b8:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4bc:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 4c0:	00 84       	ldd	r0, Z+8	; 0x08
 4c2:	f1 85       	ldd	r31, Z+9	; 0x09
 4c4:	e0 2d       	mov	r30, r0
 4c6:	30 97       	sbiw	r30, 0x00	; 0
 4c8:	09 f0       	breq	.+2      	; 0x4cc <__vector_10+0x36>
		global_timer->Call_Back_Compare();
 4ca:	09 95       	icall
	}
}
 4cc:	ff 91       	pop	r31
 4ce:	ef 91       	pop	r30
 4d0:	bf 91       	pop	r27
 4d2:	af 91       	pop	r26
 4d4:	9f 91       	pop	r25
 4d6:	8f 91       	pop	r24
 4d8:	7f 91       	pop	r23
 4da:	6f 91       	pop	r22
 4dc:	5f 91       	pop	r21
 4de:	4f 91       	pop	r20
 4e0:	3f 91       	pop	r19
 4e2:	2f 91       	pop	r18
 4e4:	0f 90       	pop	r0
 4e6:	0f be       	out	0x3f, r0	; 63
 4e8:	0f 90       	pop	r0
 4ea:	1f 90       	pop	r1
 4ec:	18 95       	reti

000004ee <_exit>:
 4ee:	f8 94       	cli

000004f0 <__stop_program>:
 4f0:	ff cf       	rjmp	.-2      	; 0x4f0 <__stop_program>
