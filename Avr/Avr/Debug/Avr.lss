
Avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000766  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800060  00800060  00000766  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000766  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000798  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000109e  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d6  00000000  00000000  000019b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb5  00000000  00000000  00002388  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000398  00000000  00000000  00002f40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007c7  00000000  00000000  000032d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ab9  00000000  00000000  00003a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004558  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 9b 02 	jmp	0x536	; 0x536 <__vector_1>
   8:	0c 94 c7 02 	jmp	0x58e	; 0x58e <__vector_2>
   c:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 4b 03 	jmp	0x696	; 0x696 <__vector_10>
  2c:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ef       	ldi	r30, 0xF2	; 242
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  8a:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Fun>:

	return 0;
}

void Fun(void){
	Pin_Toggle(&A1);
  92:	8c e6       	ldi	r24, 0x6C	; 108
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 c7 01 	call	0x38e	; 0x38e <Pin_Toggle>
  9a:	08 95       	ret

0000009c <main>:
Pin_config_t P;
Pin_config_t A1;
void Fun(void);
int main(void) {

	ExtInterrupt_Init(EXT_INT0,RISING_EDGE);
  9c:	63 e0       	ldi	r22, 0x03	; 3
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	0e 94 24 02 	call	0x448	; 0x448 <ExtInterrupt_Init>
	ExtInterrupt_Enable(EXT_INT0);
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	0e 94 73 02 	call	0x4e6	; 0x4e6 <ExtInterrupt_Enable>

	P.direction=Input;
  aa:	e8 e6       	ldi	r30, 0x68	; 104
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	12 82       	std	Z+2, r1	; 0x02
	P.logic=Low;
  b0:	13 82       	std	Z+3, r1	; 0x03
	P.pin=2;
  b2:	82 e0       	ldi	r24, 0x02	; 2
  b4:	81 83       	std	Z+1, r24	; 0x01
	P.port=D;
  b6:	93 e0       	ldi	r25, 0x03	; 3
  b8:	90 83       	st	Z, r25
	
	
	A1.direction=Output;
  ba:	ec e6       	ldi	r30, 0x6C	; 108
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	92 83       	std	Z+2, r25	; 0x02
	A1.logic=High;
  c2:	93 83       	std	Z+3, r25	; 0x03
	A1.pin=2;
  c4:	81 83       	std	Z+1, r24	; 0x01
	A1.port=C;
  c6:	80 83       	st	Z, r24
	Pin_logic_init(&A1);
  c8:	cf 01       	movw	r24, r30
  ca:	0e 94 ab 01 	call	0x356	; 0x356 <Pin_logic_init>
	ExtInterrupt_SetCallback(EXT_INT0,Fun);
  ce:	69 e4       	ldi	r22, 0x49	; 73
  d0:	70 e0       	ldi	r23, 0x00	; 0
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	0e 94 86 02 	call	0x50c	; 0x50c <ExtInterrupt_SetCallback>
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <main+0x3c>

000000da <__vector_16>:

/**
 * @brief ADC Conversion Complete Interrupt Service Routine.
 * This function is called when an ADC conversion is complete.
 */
ISR(ADC_vect) {
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
    adc_result = ADC;
  e8:	84 b1       	in	r24, 0x04	; 4
  ea:	95 b1       	in	r25, 0x05	; 5
  ec:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <adc_result+0x1>
  f0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <adc_result>
}
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <Pin_Set>:
* @brief Sets the pin logic level to high.
*
* @param Pin Pointer to the pin configuration structure.
* @return Std_return ROK if successful, NOK if the pin configuration is null.
*/
Std_return Pin_Set(Pin_config_t *Pin) {
 102:	fc 01       	movw	r30, r24
	if (!Pin) {
 104:	89 2b       	or	r24, r25
 106:	09 f4       	brne	.+2      	; 0x10a <Pin_Set+0x8>
 108:	45 c0       	rjmp	.+138    	; 0x194 <Pin_Set+0x92>
		return NOK;
	}
	switch (Pin->port) {
 10a:	80 81       	ld	r24, Z
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	a9 f0       	breq	.+42     	; 0x13a <Pin_Set+0x38>
 110:	28 f0       	brcs	.+10     	; 0x11c <Pin_Set+0x1a>
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	09 f1       	breq	.+66     	; 0x158 <Pin_Set+0x56>
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	71 f1       	breq	.+92     	; 0x176 <Pin_Set+0x74>
 11a:	3e c0       	rjmp	.+124    	; 0x198 <Pin_Set+0x96>
		case A:
		SET_BIT(PORTA, Pin->pin);
 11c:	2b b3       	in	r18, 0x1b	; 27
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	01 80       	ldd	r0, Z+1	; 0x01
 124:	02 c0       	rjmp	.+4      	; 0x12a <Pin_Set+0x28>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	0a 94       	dec	r0
 12c:	e2 f7       	brpl	.-8      	; 0x126 <Pin_Set+0x24>
 12e:	82 2b       	or	r24, r18
 130:	8b bb       	out	0x1b, r24	; 27
		Pin->logic = High;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	83 83       	std	Z+3, r24	; 0x03
		Pin->logic = High;
		break;
		default:
		return NOK;
	}
	return ROK;
 136:	80 e0       	ldi	r24, 0x00	; 0
	}
	switch (Pin->port) {
		case A:
		SET_BIT(PORTA, Pin->pin);
		Pin->logic = High;
		break;
 138:	08 95       	ret
		case B:
		SET_BIT(PORTB, Pin->pin);
 13a:	28 b3       	in	r18, 0x18	; 24
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	01 80       	ldd	r0, Z+1	; 0x01
 142:	02 c0       	rjmp	.+4      	; 0x148 <Pin_Set+0x46>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	0a 94       	dec	r0
 14a:	e2 f7       	brpl	.-8      	; 0x144 <Pin_Set+0x42>
 14c:	82 2b       	or	r24, r18
 14e:	88 bb       	out	0x18, r24	; 24
		Pin->logic = High;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	83 83       	std	Z+3, r24	; 0x03
		Pin->logic = High;
		break;
		default:
		return NOK;
	}
	return ROK;
 154:	80 e0       	ldi	r24, 0x00	; 0
		Pin->logic = High;
		break;
		case B:
		SET_BIT(PORTB, Pin->pin);
		Pin->logic = High;
		break;
 156:	08 95       	ret
		case C:
		SET_BIT(PORTC, Pin->pin);
 158:	25 b3       	in	r18, 0x15	; 21
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	01 80       	ldd	r0, Z+1	; 0x01
 160:	02 c0       	rjmp	.+4      	; 0x166 <Pin_Set+0x64>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	0a 94       	dec	r0
 168:	e2 f7       	brpl	.-8      	; 0x162 <Pin_Set+0x60>
 16a:	82 2b       	or	r24, r18
 16c:	85 bb       	out	0x15, r24	; 21
		Pin->logic = High;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	83 83       	std	Z+3, r24	; 0x03
		Pin->logic = High;
		break;
		default:
		return NOK;
	}
	return ROK;
 172:	80 e0       	ldi	r24, 0x00	; 0
		Pin->logic = High;
		break;
		case C:
		SET_BIT(PORTC, Pin->pin);
		Pin->logic = High;
		break;
 174:	08 95       	ret
		case D:
		SET_BIT(PORTD, Pin->pin);
 176:	22 b3       	in	r18, 0x12	; 18
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	01 80       	ldd	r0, Z+1	; 0x01
 17e:	02 c0       	rjmp	.+4      	; 0x184 <Pin_Set+0x82>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	0a 94       	dec	r0
 186:	e2 f7       	brpl	.-8      	; 0x180 <Pin_Set+0x7e>
 188:	82 2b       	or	r24, r18
 18a:	82 bb       	out	0x12, r24	; 18
		Pin->logic = High;
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	83 83       	std	Z+3, r24	; 0x03
		break;
		default:
		return NOK;
	}
	return ROK;
 190:	80 e0       	ldi	r24, 0x00	; 0
		Pin->logic = High;
		break;
		case D:
		SET_BIT(PORTD, Pin->pin);
		Pin->logic = High;
		break;
 192:	08 95       	ret
* @param Pin Pointer to the pin configuration structure.
* @return Std_return ROK if successful, NOK if the pin configuration is null.
*/
Std_return Pin_Set(Pin_config_t *Pin) {
	if (!Pin) {
		return NOK;
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	08 95       	ret
		case D:
		SET_BIT(PORTD, Pin->pin);
		Pin->logic = High;
		break;
		default:
		return NOK;
 198:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ROK;
}
 19a:	08 95       	ret

0000019c <Pin_Clear>:
* @brief Sets the pin logic level to low.
*
* @param Pin Pointer to the pin configuration structure.
* @return Std_return ROK if successful, NOK if the pin configuration is null.
*/
Std_return Pin_Clear(Pin_config_t *Pin) {
 19c:	fc 01       	movw	r30, r24
	if (!Pin) {
 19e:	89 2b       	or	r24, r25
 1a0:	09 f4       	brne	.+2      	; 0x1a4 <Pin_Clear+0x8>
 1a2:	45 c0       	rjmp	.+138    	; 0x22e <Pin_Clear+0x92>
		return NOK;
	}
	switch (Pin->port) {
 1a4:	80 81       	ld	r24, Z
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	a9 f0       	breq	.+42     	; 0x1d4 <Pin_Clear+0x38>
 1aa:	28 f0       	brcs	.+10     	; 0x1b6 <Pin_Clear+0x1a>
 1ac:	82 30       	cpi	r24, 0x02	; 2
 1ae:	09 f1       	breq	.+66     	; 0x1f2 <Pin_Clear+0x56>
 1b0:	83 30       	cpi	r24, 0x03	; 3
 1b2:	71 f1       	breq	.+92     	; 0x210 <Pin_Clear+0x74>
 1b4:	3e c0       	rjmp	.+124    	; 0x232 <Pin_Clear+0x96>
		case A:
		CLEAR_BIT(PORTA, Pin->pin);
 1b6:	2b b3       	in	r18, 0x1b	; 27
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	01 80       	ldd	r0, Z+1	; 0x01
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <Pin_Clear+0x28>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	0a 94       	dec	r0
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <Pin_Clear+0x24>
 1c8:	80 95       	com	r24
 1ca:	82 23       	and	r24, r18
 1cc:	8b bb       	out	0x1b, r24	; 27
		Pin->logic = Low;
 1ce:	13 82       	std	Z+3, r1	; 0x03
		Pin->logic = Low;
		break;
		default:
		return NOK;
	}
	return ROK;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
	}
	switch (Pin->port) {
		case A:
		CLEAR_BIT(PORTA, Pin->pin);
		Pin->logic = Low;
		break;
 1d2:	08 95       	ret
		case B:
		CLEAR_BIT(PORTB, Pin->pin);
 1d4:	28 b3       	in	r18, 0x18	; 24
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	01 80       	ldd	r0, Z+1	; 0x01
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <Pin_Clear+0x46>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	0a 94       	dec	r0
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <Pin_Clear+0x42>
 1e6:	80 95       	com	r24
 1e8:	82 23       	and	r24, r18
 1ea:	88 bb       	out	0x18, r24	; 24
		Pin->logic = Low;
 1ec:	13 82       	std	Z+3, r1	; 0x03
		Pin->logic = Low;
		break;
		default:
		return NOK;
	}
	return ROK;
 1ee:	80 e0       	ldi	r24, 0x00	; 0
		Pin->logic = Low;
		break;
		case B:
		CLEAR_BIT(PORTB, Pin->pin);
		Pin->logic = Low;
		break;
 1f0:	08 95       	ret
		case C:
		CLEAR_BIT(PORTC, Pin->pin);
 1f2:	25 b3       	in	r18, 0x15	; 21
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	01 80       	ldd	r0, Z+1	; 0x01
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <Pin_Clear+0x64>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	0a 94       	dec	r0
 202:	e2 f7       	brpl	.-8      	; 0x1fc <Pin_Clear+0x60>
 204:	80 95       	com	r24
 206:	82 23       	and	r24, r18
 208:	85 bb       	out	0x15, r24	; 21
		Pin->logic = Low;
 20a:	13 82       	std	Z+3, r1	; 0x03
		Pin->logic = Low;
		break;
		default:
		return NOK;
	}
	return ROK;
 20c:	80 e0       	ldi	r24, 0x00	; 0
		Pin->logic = Low;
		break;
		case C:
		CLEAR_BIT(PORTC, Pin->pin);
		Pin->logic = Low;
		break;
 20e:	08 95       	ret
		case D:
		CLEAR_BIT(PORTD, Pin->pin);
 210:	22 b3       	in	r18, 0x12	; 18
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	01 80       	ldd	r0, Z+1	; 0x01
 218:	02 c0       	rjmp	.+4      	; 0x21e <Pin_Clear+0x82>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	0a 94       	dec	r0
 220:	e2 f7       	brpl	.-8      	; 0x21a <Pin_Clear+0x7e>
 222:	80 95       	com	r24
 224:	82 23       	and	r24, r18
 226:	82 bb       	out	0x12, r24	; 18
		Pin->logic = Low;
 228:	13 82       	std	Z+3, r1	; 0x03
		break;
		default:
		return NOK;
	}
	return ROK;
 22a:	80 e0       	ldi	r24, 0x00	; 0
		Pin->logic = Low;
		break;
		case D:
		CLEAR_BIT(PORTD, Pin->pin);
		Pin->logic = Low;
		break;
 22c:	08 95       	ret
* @param Pin Pointer to the pin configuration structure.
* @return Std_return ROK if successful, NOK if the pin configuration is null.
*/
Std_return Pin_Clear(Pin_config_t *Pin) {
	if (!Pin) {
		return NOK;
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	08 95       	ret
		case D:
		CLEAR_BIT(PORTD, Pin->pin);
		Pin->logic = Low;
		break;
		default:
		return NOK;
 232:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ROK;
}
 234:	08 95       	ret

00000236 <Pin_Direction>:
* @brief Sets the pin direction to input or output.
*
* @param Pin Pointer to the pin configuration structure.
* @return Std_return ROK if successful, NOK if the pin configuration is null.
*/
Std_return Pin_Direction(Pin_config_t *Pin) {
 236:	fc 01       	movw	r30, r24
	if (!Pin) {
 238:	89 2b       	or	r24, r25
 23a:	09 f4       	brne	.+2      	; 0x23e <Pin_Direction+0x8>
 23c:	84 c0       	rjmp	.+264    	; 0x346 <Pin_Direction+0x110>
		return NOK;
	}
	if (Pin->direction == Input) {
 23e:	82 81       	ldd	r24, Z+2	; 0x02
 240:	81 11       	cpse	r24, r1
 242:	41 c0       	rjmp	.+130    	; 0x2c6 <Pin_Direction+0x90>
		switch (Pin->port) {
 244:	80 81       	ld	r24, Z
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	a1 f0       	breq	.+40     	; 0x272 <Pin_Direction+0x3c>
 24a:	28 f0       	brcs	.+10     	; 0x256 <Pin_Direction+0x20>
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	f9 f0       	breq	.+62     	; 0x28e <Pin_Direction+0x58>
 250:	83 30       	cpi	r24, 0x03	; 3
 252:	59 f1       	breq	.+86     	; 0x2aa <Pin_Direction+0x74>
 254:	7a c0       	rjmp	.+244    	; 0x34a <Pin_Direction+0x114>
			case A:
			CLEAR_BIT(DDRA, Pin->pin);
 256:	2a b3       	in	r18, 0x1a	; 26
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	01 80       	ldd	r0, Z+1	; 0x01
 25e:	02 c0       	rjmp	.+4      	; 0x264 <Pin_Direction+0x2e>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	0a 94       	dec	r0
 266:	e2 f7       	brpl	.-8      	; 0x260 <Pin_Direction+0x2a>
 268:	80 95       	com	r24
 26a:	82 23       	and	r24, r18
 26c:	8a bb       	out	0x1a, r24	; 26
			break;
			default:
			return NOK;
		}
	}
	return ROK;
 26e:	80 e0       	ldi	r24, 0x00	; 0
	}
	if (Pin->direction == Input) {
		switch (Pin->port) {
			case A:
			CLEAR_BIT(DDRA, Pin->pin);
			break;
 270:	08 95       	ret
			case B:
			CLEAR_BIT(DDRB, Pin->pin);
 272:	27 b3       	in	r18, 0x17	; 23
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	01 80       	ldd	r0, Z+1	; 0x01
 27a:	02 c0       	rjmp	.+4      	; 0x280 <Pin_Direction+0x4a>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	0a 94       	dec	r0
 282:	e2 f7       	brpl	.-8      	; 0x27c <Pin_Direction+0x46>
 284:	80 95       	com	r24
 286:	82 23       	and	r24, r18
 288:	87 bb       	out	0x17, r24	; 23
			break;
			default:
			return NOK;
		}
	}
	return ROK;
 28a:	80 e0       	ldi	r24, 0x00	; 0
			case A:
			CLEAR_BIT(DDRA, Pin->pin);
			break;
			case B:
			CLEAR_BIT(DDRB, Pin->pin);
			break;
 28c:	08 95       	ret
			case C:
			CLEAR_BIT(DDRC, Pin->pin);
 28e:	24 b3       	in	r18, 0x14	; 20
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	01 80       	ldd	r0, Z+1	; 0x01
 296:	02 c0       	rjmp	.+4      	; 0x29c <Pin_Direction+0x66>
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	0a 94       	dec	r0
 29e:	e2 f7       	brpl	.-8      	; 0x298 <Pin_Direction+0x62>
 2a0:	80 95       	com	r24
 2a2:	82 23       	and	r24, r18
 2a4:	84 bb       	out	0x14, r24	; 20
			break;
			default:
			return NOK;
		}
	}
	return ROK;
 2a6:	80 e0       	ldi	r24, 0x00	; 0
			case B:
			CLEAR_BIT(DDRB, Pin->pin);
			break;
			case C:
			CLEAR_BIT(DDRC, Pin->pin);
			break;
 2a8:	08 95       	ret
			case D:
			CLEAR_BIT(DDRD, Pin->pin);
 2aa:	21 b3       	in	r18, 0x11	; 17
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	01 80       	ldd	r0, Z+1	; 0x01
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <Pin_Direction+0x82>
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	0a 94       	dec	r0
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <Pin_Direction+0x7e>
 2bc:	80 95       	com	r24
 2be:	82 23       	and	r24, r18
 2c0:	81 bb       	out	0x11, r24	; 17
			break;
			default:
			return NOK;
		}
	}
	return ROK;
 2c2:	80 e0       	ldi	r24, 0x00	; 0
			case C:
			CLEAR_BIT(DDRC, Pin->pin);
			break;
			case D:
			CLEAR_BIT(DDRD, Pin->pin);
			break;
 2c4:	08 95       	ret
			default:
			return NOK;
		}
		} else if (Pin->direction == Output) {
 2c6:	81 30       	cpi	r24, 0x01	; 1
 2c8:	09 f0       	breq	.+2      	; 0x2cc <Pin_Direction+0x96>
 2ca:	41 c0       	rjmp	.+130    	; 0x34e <Pin_Direction+0x118>
		switch (Pin->port) {
 2cc:	80 81       	ld	r24, Z
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	99 f0       	breq	.+38     	; 0x2f8 <Pin_Direction+0xc2>
 2d2:	28 f0       	brcs	.+10     	; 0x2de <Pin_Direction+0xa8>
 2d4:	82 30       	cpi	r24, 0x02	; 2
 2d6:	e9 f0       	breq	.+58     	; 0x312 <Pin_Direction+0xdc>
 2d8:	83 30       	cpi	r24, 0x03	; 3
 2da:	41 f1       	breq	.+80     	; 0x32c <Pin_Direction+0xf6>
 2dc:	3a c0       	rjmp	.+116    	; 0x352 <Pin_Direction+0x11c>
			case A:
			SET_BIT(DDRA, Pin->pin);
 2de:	2a b3       	in	r18, 0x1a	; 26
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	01 80       	ldd	r0, Z+1	; 0x01
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <Pin_Direction+0xb6>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	0a 94       	dec	r0
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <Pin_Direction+0xb2>
 2f0:	82 2b       	or	r24, r18
 2f2:	8a bb       	out	0x1a, r24	; 26
			break;
			default:
			return NOK;
		}
	}
	return ROK;
 2f4:	80 e0       	ldi	r24, 0x00	; 0
		}
		} else if (Pin->direction == Output) {
		switch (Pin->port) {
			case A:
			SET_BIT(DDRA, Pin->pin);
			break;
 2f6:	08 95       	ret
			case B:
			SET_BIT(DDRB, Pin->pin);
 2f8:	27 b3       	in	r18, 0x17	; 23
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	01 80       	ldd	r0, Z+1	; 0x01
 300:	02 c0       	rjmp	.+4      	; 0x306 <Pin_Direction+0xd0>
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	0a 94       	dec	r0
 308:	e2 f7       	brpl	.-8      	; 0x302 <Pin_Direction+0xcc>
 30a:	82 2b       	or	r24, r18
 30c:	87 bb       	out	0x17, r24	; 23
			break;
			default:
			return NOK;
		}
	}
	return ROK;
 30e:	80 e0       	ldi	r24, 0x00	; 0
			case A:
			SET_BIT(DDRA, Pin->pin);
			break;
			case B:
			SET_BIT(DDRB, Pin->pin);
			break;
 310:	08 95       	ret
			case C:
			SET_BIT(DDRC, Pin->pin);
 312:	24 b3       	in	r18, 0x14	; 20
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	01 80       	ldd	r0, Z+1	; 0x01
 31a:	02 c0       	rjmp	.+4      	; 0x320 <Pin_Direction+0xea>
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	0a 94       	dec	r0
 322:	e2 f7       	brpl	.-8      	; 0x31c <Pin_Direction+0xe6>
 324:	82 2b       	or	r24, r18
 326:	84 bb       	out	0x14, r24	; 20
			break;
			default:
			return NOK;
		}
	}
	return ROK;
 328:	80 e0       	ldi	r24, 0x00	; 0
			case B:
			SET_BIT(DDRB, Pin->pin);
			break;
			case C:
			SET_BIT(DDRC, Pin->pin);
			break;
 32a:	08 95       	ret
			case D:
			SET_BIT(DDRD, Pin->pin);
 32c:	21 b3       	in	r18, 0x11	; 17
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	01 80       	ldd	r0, Z+1	; 0x01
 334:	02 c0       	rjmp	.+4      	; 0x33a <Pin_Direction+0x104>
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	0a 94       	dec	r0
 33c:	e2 f7       	brpl	.-8      	; 0x336 <Pin_Direction+0x100>
 33e:	82 2b       	or	r24, r18
 340:	81 bb       	out	0x11, r24	; 17
			break;
			default:
			return NOK;
		}
	}
	return ROK;
 342:	80 e0       	ldi	r24, 0x00	; 0
			case C:
			SET_BIT(DDRC, Pin->pin);
			break;
			case D:
			SET_BIT(DDRD, Pin->pin);
			break;
 344:	08 95       	ret
* @param Pin Pointer to the pin configuration structure.
* @return Std_return ROK if successful, NOK if the pin configuration is null.
*/
Std_return Pin_Direction(Pin_config_t *Pin) {
	if (!Pin) {
		return NOK;
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	08 95       	ret
			break;
			case D:
			CLEAR_BIT(DDRD, Pin->pin);
			break;
			default:
			return NOK;
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	08 95       	ret
			break;
			default:
			return NOK;
		}
	}
	return ROK;
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	08 95       	ret
			break;
			case D:
			SET_BIT(DDRD, Pin->pin);
			break;
			default:
			return NOK;
 352:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return ROK;
}
 354:	08 95       	ret

00000356 <Pin_logic_init>:
* @brief Initializes the pin direction and sets its logic level.
*
* @param Pin Pointer to the pin configuration structure.
* @return Std_return ROK if successful, NOK if the pin configuration is null.
*/
Std_return Pin_logic_init(Pin_config_t *Pin) {
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	ec 01       	movw	r28, r24
	Pin_Direction(Pin);
 35c:	0e 94 1b 01 	call	0x236	; 0x236 <Pin_Direction>
	if (!Pin) {
 360:	20 97       	sbiw	r28, 0x00	; 0
 362:	79 f0       	breq	.+30     	; 0x382 <Pin_logic_init+0x2c>
		return NOK;
	}
	if (Pin->logic == Low) {
 364:	8b 81       	ldd	r24, Y+3	; 0x03
 366:	81 11       	cpse	r24, r1
 368:	05 c0       	rjmp	.+10     	; 0x374 <Pin_logic_init+0x1e>
		Pin_Clear(Pin);
 36a:	ce 01       	movw	r24, r28
 36c:	0e 94 ce 00 	call	0x19c	; 0x19c <Pin_Clear>
		} else if (Pin->logic == High) {
		Pin_Set(Pin);
	}
	return ROK;
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	0a c0       	rjmp	.+20     	; 0x388 <Pin_logic_init+0x32>
	if (!Pin) {
		return NOK;
	}
	if (Pin->logic == Low) {
		Pin_Clear(Pin);
		} else if (Pin->logic == High) {
 374:	81 30       	cpi	r24, 0x01	; 1
 376:	39 f4       	brne	.+14     	; 0x386 <Pin_logic_init+0x30>
		Pin_Set(Pin);
 378:	ce 01       	movw	r24, r28
 37a:	0e 94 81 00 	call	0x102	; 0x102 <Pin_Set>
	}
	return ROK;
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	03 c0       	rjmp	.+6      	; 0x388 <Pin_logic_init+0x32>
* @return Std_return ROK if successful, NOK if the pin configuration is null.
*/
Std_return Pin_logic_init(Pin_config_t *Pin) {
	Pin_Direction(Pin);
	if (!Pin) {
		return NOK;
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	01 c0       	rjmp	.+2      	; 0x388 <Pin_logic_init+0x32>
	if (Pin->logic == Low) {
		Pin_Clear(Pin);
		} else if (Pin->logic == High) {
		Pin_Set(Pin);
	}
	return ROK;
 386:	80 e0       	ldi	r24, 0x00	; 0
}
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	08 95       	ret

0000038e <Pin_Toggle>:
* @brief Toggles the pin logic level.
*
* @param Pin Pointer to the pin configuration structure.
* @return Std_return ROK if successful, NOK if the pin configuration is null.
*/
Std_return Pin_Toggle(Pin_config_t *Pin) {
 38e:	fc 01       	movw	r30, r24
	if (!Pin) {
 390:	89 2b       	or	r24, r25
 392:	09 f4       	brne	.+2      	; 0x396 <Pin_Toggle+0x8>
 394:	55 c0       	rjmp	.+170    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		return NOK;
	}
	switch (Pin->port) {
 396:	80 81       	ld	r24, Z
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	c9 f0       	breq	.+50     	; 0x3ce <Pin_Toggle+0x40>
 39c:	28 f0       	brcs	.+10     	; 0x3a8 <Pin_Toggle+0x1a>
 39e:	82 30       	cpi	r24, 0x02	; 2
 3a0:	49 f1       	breq	.+82     	; 0x3f4 <Pin_Toggle+0x66>
 3a2:	83 30       	cpi	r24, 0x03	; 3
 3a4:	d1 f1       	breq	.+116    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 3a6:	4e c0       	rjmp	.+156    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
		case A:
		TOGGLE_BIT(PORTA, Pin->pin);
 3a8:	2b b3       	in	r18, 0x1b	; 27
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	01 80       	ldd	r0, Z+1	; 0x01
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <Pin_Toggle+0x28>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	0a 94       	dec	r0
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <Pin_Toggle+0x24>
 3ba:	82 27       	eor	r24, r18
 3bc:	8b bb       	out	0x1b, r24	; 27
		Pin->logic = (Pin->logic == High) ? Low : High;
 3be:	93 81       	ldd	r25, Z+3	; 0x03
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	91 30       	cpi	r25, 0x01	; 1
 3c4:	09 f4       	brne	.+2      	; 0x3c8 <Pin_Toggle+0x3a>
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	83 83       	std	Z+3, r24	; 0x03
		Pin->logic = (Pin->logic == High) ? Low : High;
		break;
		default:
		return NOK;
	}
	return ROK;
 3ca:	80 e0       	ldi	r24, 0x00	; 0
	}
	switch (Pin->port) {
		case A:
		TOGGLE_BIT(PORTA, Pin->pin);
		Pin->logic = (Pin->logic == High) ? Low : High;
		break;
 3cc:	08 95       	ret
		case B:
		TOGGLE_BIT(PORTB, Pin->pin);
 3ce:	28 b3       	in	r18, 0x18	; 24
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	01 80       	ldd	r0, Z+1	; 0x01
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <Pin_Toggle+0x4e>
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	0a 94       	dec	r0
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <Pin_Toggle+0x4a>
 3e0:	82 27       	eor	r24, r18
 3e2:	88 bb       	out	0x18, r24	; 24
		Pin->logic = (Pin->logic == High) ? Low : High;
 3e4:	93 81       	ldd	r25, Z+3	; 0x03
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	91 30       	cpi	r25, 0x01	; 1
 3ea:	09 f4       	brne	.+2      	; 0x3ee <Pin_Toggle+0x60>
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	83 83       	std	Z+3, r24	; 0x03
		Pin->logic = (Pin->logic == High) ? Low : High;
		break;
		default:
		return NOK;
	}
	return ROK;
 3f0:	80 e0       	ldi	r24, 0x00	; 0
		Pin->logic = (Pin->logic == High) ? Low : High;
		break;
		case B:
		TOGGLE_BIT(PORTB, Pin->pin);
		Pin->logic = (Pin->logic == High) ? Low : High;
		break;
 3f2:	08 95       	ret
		case C:
		TOGGLE_BIT(PORTC, Pin->pin);
 3f4:	25 b3       	in	r18, 0x15	; 21
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	01 80       	ldd	r0, Z+1	; 0x01
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	0a 94       	dec	r0
 404:	e2 f7       	brpl	.-8      	; 0x3fe <Pin_Toggle+0x70>
 406:	82 27       	eor	r24, r18
 408:	85 bb       	out	0x15, r24	; 21
		Pin->logic = (Pin->logic == High) ? Low : High;
 40a:	93 81       	ldd	r25, Z+3	; 0x03
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	91 30       	cpi	r25, 0x01	; 1
 410:	09 f4       	brne	.+2      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	83 83       	std	Z+3, r24	; 0x03
		Pin->logic = (Pin->logic == High) ? Low : High;
		break;
		default:
		return NOK;
	}
	return ROK;
 416:	80 e0       	ldi	r24, 0x00	; 0
		Pin->logic = (Pin->logic == High) ? Low : High;
		break;
		case C:
		TOGGLE_BIT(PORTC, Pin->pin);
		Pin->logic = (Pin->logic == High) ? Low : High;
		break;
 418:	08 95       	ret
		case D:
		TOGGLE_BIT(PORTD, Pin->pin);
 41a:	22 b3       	in	r18, 0x12	; 18
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	01 80       	ldd	r0, Z+1	; 0x01
 422:	02 c0       	rjmp	.+4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 424:	88 0f       	add	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	0a 94       	dec	r0
 42a:	e2 f7       	brpl	.-8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 42c:	82 27       	eor	r24, r18
 42e:	82 bb       	out	0x12, r24	; 18
		Pin->logic = (Pin->logic == High) ? Low : High;
 430:	93 81       	ldd	r25, Z+3	; 0x03
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	91 30       	cpi	r25, 0x01	; 1
 436:	09 f4       	brne	.+2      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	83 83       	std	Z+3, r24	; 0x03
		break;
		default:
		return NOK;
	}
	return ROK;
 43c:	80 e0       	ldi	r24, 0x00	; 0
		Pin->logic = (Pin->logic == High) ? Low : High;
		break;
		case D:
		TOGGLE_BIT(PORTD, Pin->pin);
		Pin->logic = (Pin->logic == High) ? Low : High;
		break;
 43e:	08 95       	ret
* @param Pin Pointer to the pin configuration structure.
* @return Std_return ROK if successful, NOK if the pin configuration is null.
*/
Std_return Pin_Toggle(Pin_config_t *Pin) {
	if (!Pin) {
		return NOK;
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	08 95       	ret
		case D:
		TOGGLE_BIT(PORTD, Pin->pin);
		Pin->logic = (Pin->logic == High) ? Low : High;
		break;
		default:
		return NOK;
 444:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ROK;
}
 446:	08 95       	ret

00000448 <ExtInterrupt_Init>:
		break;
		case EXT_INT1:
		GICR &= ~(1 << INT1);
		break;
		case EXT_INT2:
		GICR &= ~(1 << INT2);
 448:	81 30       	cpi	r24, 0x01	; 1
 44a:	11 f1       	breq	.+68     	; 0x490 <ExtInterrupt_Init+0x48>
 44c:	18 f0       	brcs	.+6      	; 0x454 <ExtInterrupt_Init+0xc>
 44e:	82 30       	cpi	r24, 0x02	; 2
 450:	e9 f1       	breq	.+122    	; 0x4cc <ExtInterrupt_Init+0x84>
 452:	08 95       	ret
 454:	61 30       	cpi	r22, 0x01	; 1
 456:	51 f0       	breq	.+20     	; 0x46c <ExtInterrupt_Init+0x24>
 458:	28 f0       	brcs	.+10     	; 0x464 <ExtInterrupt_Init+0x1c>
 45a:	62 30       	cpi	r22, 0x02	; 2
 45c:	71 f0       	breq	.+28     	; 0x47a <ExtInterrupt_Init+0x32>
 45e:	63 30       	cpi	r22, 0x03	; 3
 460:	99 f0       	breq	.+38     	; 0x488 <ExtInterrupt_Init+0x40>
 462:	08 95       	ret
 464:	85 b7       	in	r24, 0x35	; 53
 466:	8c 7f       	andi	r24, 0xFC	; 252
 468:	85 bf       	out	0x35, r24	; 53
 46a:	08 95       	ret
 46c:	85 b7       	in	r24, 0x35	; 53
 46e:	81 60       	ori	r24, 0x01	; 1
 470:	85 bf       	out	0x35, r24	; 53
 472:	85 b7       	in	r24, 0x35	; 53
 474:	8d 7f       	andi	r24, 0xFD	; 253
 476:	85 bf       	out	0x35, r24	; 53
 478:	08 95       	ret
 47a:	85 b7       	in	r24, 0x35	; 53
 47c:	82 60       	ori	r24, 0x02	; 2
 47e:	85 bf       	out	0x35, r24	; 53
 480:	85 b7       	in	r24, 0x35	; 53
 482:	8e 7f       	andi	r24, 0xFE	; 254
 484:	85 bf       	out	0x35, r24	; 53
 486:	08 95       	ret
 488:	85 b7       	in	r24, 0x35	; 53
 48a:	83 60       	ori	r24, 0x03	; 3
 48c:	85 bf       	out	0x35, r24	; 53
 48e:	08 95       	ret
 490:	61 30       	cpi	r22, 0x01	; 1
 492:	51 f0       	breq	.+20     	; 0x4a8 <ExtInterrupt_Init+0x60>
 494:	28 f0       	brcs	.+10     	; 0x4a0 <ExtInterrupt_Init+0x58>
 496:	62 30       	cpi	r22, 0x02	; 2
 498:	71 f0       	breq	.+28     	; 0x4b6 <ExtInterrupt_Init+0x6e>
 49a:	63 30       	cpi	r22, 0x03	; 3
 49c:	99 f0       	breq	.+38     	; 0x4c4 <ExtInterrupt_Init+0x7c>
 49e:	08 95       	ret
 4a0:	85 b7       	in	r24, 0x35	; 53
 4a2:	83 7f       	andi	r24, 0xF3	; 243
 4a4:	85 bf       	out	0x35, r24	; 53
 4a6:	08 95       	ret
 4a8:	85 b7       	in	r24, 0x35	; 53
 4aa:	84 60       	ori	r24, 0x04	; 4
 4ac:	85 bf       	out	0x35, r24	; 53
 4ae:	85 b7       	in	r24, 0x35	; 53
 4b0:	87 7f       	andi	r24, 0xF7	; 247
 4b2:	85 bf       	out	0x35, r24	; 53
 4b4:	08 95       	ret
 4b6:	85 b7       	in	r24, 0x35	; 53
 4b8:	88 60       	ori	r24, 0x08	; 8
 4ba:	85 bf       	out	0x35, r24	; 53
 4bc:	85 b7       	in	r24, 0x35	; 53
 4be:	8b 7f       	andi	r24, 0xFB	; 251
 4c0:	85 bf       	out	0x35, r24	; 53
 4c2:	08 95       	ret
 4c4:	85 b7       	in	r24, 0x35	; 53
 4c6:	8c 60       	ori	r24, 0x0C	; 12
 4c8:	85 bf       	out	0x35, r24	; 53
 4ca:	08 95       	ret
 4cc:	62 30       	cpi	r22, 0x02	; 2
 4ce:	19 f0       	breq	.+6      	; 0x4d6 <ExtInterrupt_Init+0x8e>
 4d0:	63 30       	cpi	r22, 0x03	; 3
 4d2:	29 f0       	breq	.+10     	; 0x4de <ExtInterrupt_Init+0x96>
 4d4:	08 95       	ret
 4d6:	84 b7       	in	r24, 0x34	; 52
 4d8:	8f 7b       	andi	r24, 0xBF	; 191
 4da:	84 bf       	out	0x34, r24	; 52
 4dc:	08 95       	ret
 4de:	84 b7       	in	r24, 0x34	; 52
 4e0:	80 64       	ori	r24, 0x40	; 64
 4e2:	84 bf       	out	0x34, r24	; 52
 4e4:	08 95       	ret

000004e6 <ExtInterrupt_Enable>:
 4e6:	78 94       	sei
 4e8:	81 30       	cpi	r24, 0x01	; 1
 4ea:	41 f0       	breq	.+16     	; 0x4fc <ExtInterrupt_Enable+0x16>
 4ec:	18 f0       	brcs	.+6      	; 0x4f4 <ExtInterrupt_Enable+0xe>
 4ee:	82 30       	cpi	r24, 0x02	; 2
 4f0:	49 f0       	breq	.+18     	; 0x504 <ExtInterrupt_Enable+0x1e>
 4f2:	08 95       	ret
 4f4:	8b b7       	in	r24, 0x3b	; 59
 4f6:	80 64       	ori	r24, 0x40	; 64
 4f8:	8b bf       	out	0x3b, r24	; 59
 4fa:	08 95       	ret
 4fc:	8b b7       	in	r24, 0x3b	; 59
 4fe:	80 68       	ori	r24, 0x80	; 128
 500:	8b bf       	out	0x3b, r24	; 59
 502:	08 95       	ret
 504:	8b b7       	in	r24, 0x3b	; 59
 506:	80 62       	ori	r24, 0x20	; 32
 508:	8b bf       	out	0x3b, r24	; 59
 50a:	08 95       	ret

0000050c <ExtInterrupt_SetCallback>:
	}
}

// Set callback functions
void ExtInterrupt_SetCallback(ExtInterrupt_t intPin, void (*callback)(void)) {
	switch (intPin) {
 50c:	81 30       	cpi	r24, 0x01	; 1
 50e:	49 f0       	breq	.+18     	; 0x522 <ExtInterrupt_SetCallback+0x16>
 510:	18 f0       	brcs	.+6      	; 0x518 <ExtInterrupt_SetCallback+0xc>
 512:	82 30       	cpi	r24, 0x02	; 2
 514:	59 f0       	breq	.+22     	; 0x52c <ExtInterrupt_SetCallback+0x20>
 516:	08 95       	ret
		case EXT_INT0:
		ExtInt0_Callback = callback;
 518:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <ExtInt0_Callback+0x1>
 51c:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <ExtInt0_Callback>
		break;
 520:	08 95       	ret
		case EXT_INT1:
		ExtInt1_Callback = callback;
 522:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <ExtInt1_Callback+0x1>
 526:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <ExtInt1_Callback>
		break;
 52a:	08 95       	ret
		case EXT_INT2:
		ExtInt2_Callback = callback;
 52c:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 530:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
 534:	08 95       	ret

00000536 <__vector_1>:
		break;
	}
}

// ISR for INT0
ISR(INT0_vect) {
 536:	1f 92       	push	r1
 538:	0f 92       	push	r0
 53a:	0f b6       	in	r0, 0x3f	; 63
 53c:	0f 92       	push	r0
 53e:	11 24       	eor	r1, r1
 540:	2f 93       	push	r18
 542:	3f 93       	push	r19
 544:	4f 93       	push	r20
 546:	5f 93       	push	r21
 548:	6f 93       	push	r22
 54a:	7f 93       	push	r23
 54c:	8f 93       	push	r24
 54e:	9f 93       	push	r25
 550:	af 93       	push	r26
 552:	bf 93       	push	r27
 554:	ef 93       	push	r30
 556:	ff 93       	push	r31
	if (ExtInt0_Callback != 0) {
 558:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <ExtInt0_Callback>
 55c:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <ExtInt0_Callback+0x1>
 560:	30 97       	sbiw	r30, 0x00	; 0
 562:	09 f0       	breq	.+2      	; 0x566 <__vector_1+0x30>
		ExtInt0_Callback();
 564:	09 95       	icall
	}
	GICR|=1<<6;
 566:	8b b7       	in	r24, 0x3b	; 59
 568:	80 64       	ori	r24, 0x40	; 64
 56a:	8b bf       	out	0x3b, r24	; 59
}
 56c:	ff 91       	pop	r31
 56e:	ef 91       	pop	r30
 570:	bf 91       	pop	r27
 572:	af 91       	pop	r26
 574:	9f 91       	pop	r25
 576:	8f 91       	pop	r24
 578:	7f 91       	pop	r23
 57a:	6f 91       	pop	r22
 57c:	5f 91       	pop	r21
 57e:	4f 91       	pop	r20
 580:	3f 91       	pop	r19
 582:	2f 91       	pop	r18
 584:	0f 90       	pop	r0
 586:	0f be       	out	0x3f, r0	; 63
 588:	0f 90       	pop	r0
 58a:	1f 90       	pop	r1
 58c:	18 95       	reti

0000058e <__vector_2>:

// ISR for INT1
ISR(INT1_vect) {
 58e:	1f 92       	push	r1
 590:	0f 92       	push	r0
 592:	0f b6       	in	r0, 0x3f	; 63
 594:	0f 92       	push	r0
 596:	11 24       	eor	r1, r1
 598:	2f 93       	push	r18
 59a:	3f 93       	push	r19
 59c:	4f 93       	push	r20
 59e:	5f 93       	push	r21
 5a0:	6f 93       	push	r22
 5a2:	7f 93       	push	r23
 5a4:	8f 93       	push	r24
 5a6:	9f 93       	push	r25
 5a8:	af 93       	push	r26
 5aa:	bf 93       	push	r27
 5ac:	ef 93       	push	r30
 5ae:	ff 93       	push	r31
	if (ExtInt1_Callback != 0) {
 5b0:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <ExtInt1_Callback>
 5b4:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <ExtInt1_Callback+0x1>
 5b8:	30 97       	sbiw	r30, 0x00	; 0
 5ba:	09 f0       	breq	.+2      	; 0x5be <__vector_2+0x30>
		ExtInt1_Callback();
 5bc:	09 95       	icall
	}
		GICR|=1<<7;
 5be:	8b b7       	in	r24, 0x3b	; 59
 5c0:	80 68       	ori	r24, 0x80	; 128
 5c2:	8b bf       	out	0x3b, r24	; 59
}
 5c4:	ff 91       	pop	r31
 5c6:	ef 91       	pop	r30
 5c8:	bf 91       	pop	r27
 5ca:	af 91       	pop	r26
 5cc:	9f 91       	pop	r25
 5ce:	8f 91       	pop	r24
 5d0:	7f 91       	pop	r23
 5d2:	6f 91       	pop	r22
 5d4:	5f 91       	pop	r21
 5d6:	4f 91       	pop	r20
 5d8:	3f 91       	pop	r19
 5da:	2f 91       	pop	r18
 5dc:	0f 90       	pop	r0
 5de:	0f be       	out	0x3f, r0	; 63
 5e0:	0f 90       	pop	r0
 5e2:	1f 90       	pop	r1
 5e4:	18 95       	reti

000005e6 <__vector_3>:

// ISR for INT2
ISR(INT2_vect) {
 5e6:	1f 92       	push	r1
 5e8:	0f 92       	push	r0
 5ea:	0f b6       	in	r0, 0x3f	; 63
 5ec:	0f 92       	push	r0
 5ee:	11 24       	eor	r1, r1
 5f0:	2f 93       	push	r18
 5f2:	3f 93       	push	r19
 5f4:	4f 93       	push	r20
 5f6:	5f 93       	push	r21
 5f8:	6f 93       	push	r22
 5fa:	7f 93       	push	r23
 5fc:	8f 93       	push	r24
 5fe:	9f 93       	push	r25
 600:	af 93       	push	r26
 602:	bf 93       	push	r27
 604:	ef 93       	push	r30
 606:	ff 93       	push	r31
	if (ExtInt2_Callback != 0) {
 608:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 60c:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 610:	30 97       	sbiw	r30, 0x00	; 0
 612:	09 f0       	breq	.+2      	; 0x616 <__vector_3+0x30>
		ExtInt2_Callback();
 614:	09 95       	icall
	}
		GICR|=1<<5;
 616:	8b b7       	in	r24, 0x3b	; 59
 618:	80 62       	ori	r24, 0x20	; 32
 61a:	8b bf       	out	0x3b, r24	; 59
 61c:	ff 91       	pop	r31
 61e:	ef 91       	pop	r30
 620:	bf 91       	pop	r27
 622:	af 91       	pop	r26
 624:	9f 91       	pop	r25
 626:	8f 91       	pop	r24
 628:	7f 91       	pop	r23
 62a:	6f 91       	pop	r22
 62c:	5f 91       	pop	r21
 62e:	4f 91       	pop	r20
 630:	3f 91       	pop	r19
 632:	2f 91       	pop	r18
 634:	0f 90       	pop	r0
 636:	0f be       	out	0x3f, r0	; 63
 638:	0f 90       	pop	r0
 63a:	1f 90       	pop	r1
 63c:	18 95       	reti

0000063e <__vector_11>:
	};

	Timer0_Init(&timer);
}

ISR(TIMER0_OVF_vect) {
 63e:	1f 92       	push	r1
 640:	0f 92       	push	r0
 642:	0f b6       	in	r0, 0x3f	; 63
 644:	0f 92       	push	r0
 646:	11 24       	eor	r1, r1
 648:	2f 93       	push	r18
 64a:	3f 93       	push	r19
 64c:	4f 93       	push	r20
 64e:	5f 93       	push	r21
 650:	6f 93       	push	r22
 652:	7f 93       	push	r23
 654:	8f 93       	push	r24
 656:	9f 93       	push	r25
 658:	af 93       	push	r26
 65a:	bf 93       	push	r27
 65c:	ef 93       	push	r30
 65e:	ff 93       	push	r31
	if (global_timer->Call_Back_Overflow != NULL) {
 660:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <global_timer>
 664:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <global_timer+0x1>
 668:	06 80       	ldd	r0, Z+6	; 0x06
 66a:	f7 81       	ldd	r31, Z+7	; 0x07
 66c:	e0 2d       	mov	r30, r0
 66e:	30 97       	sbiw	r30, 0x00	; 0
 670:	09 f0       	breq	.+2      	; 0x674 <__vector_11+0x36>
		global_timer->Call_Back_Overflow();
 672:	09 95       	icall
	}
}
 674:	ff 91       	pop	r31
 676:	ef 91       	pop	r30
 678:	bf 91       	pop	r27
 67a:	af 91       	pop	r26
 67c:	9f 91       	pop	r25
 67e:	8f 91       	pop	r24
 680:	7f 91       	pop	r23
 682:	6f 91       	pop	r22
 684:	5f 91       	pop	r21
 686:	4f 91       	pop	r20
 688:	3f 91       	pop	r19
 68a:	2f 91       	pop	r18
 68c:	0f 90       	pop	r0
 68e:	0f be       	out	0x3f, r0	; 63
 690:	0f 90       	pop	r0
 692:	1f 90       	pop	r1
 694:	18 95       	reti

00000696 <__vector_10>:

ISR(TIMER0_COMP_vect) {
 696:	1f 92       	push	r1
 698:	0f 92       	push	r0
 69a:	0f b6       	in	r0, 0x3f	; 63
 69c:	0f 92       	push	r0
 69e:	11 24       	eor	r1, r1
 6a0:	2f 93       	push	r18
 6a2:	3f 93       	push	r19
 6a4:	4f 93       	push	r20
 6a6:	5f 93       	push	r21
 6a8:	6f 93       	push	r22
 6aa:	7f 93       	push	r23
 6ac:	8f 93       	push	r24
 6ae:	9f 93       	push	r25
 6b0:	af 93       	push	r26
 6b2:	bf 93       	push	r27
 6b4:	ef 93       	push	r30
 6b6:	ff 93       	push	r31
	if (global_timer->Call_Back_Compare != NULL) {
 6b8:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <global_timer>
 6bc:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <global_timer+0x1>
 6c0:	00 84       	ldd	r0, Z+8	; 0x08
 6c2:	f1 85       	ldd	r31, Z+9	; 0x09
 6c4:	e0 2d       	mov	r30, r0
 6c6:	30 97       	sbiw	r30, 0x00	; 0
 6c8:	09 f0       	breq	.+2      	; 0x6cc <__vector_10+0x36>
		global_timer->Call_Back_Compare();
 6ca:	09 95       	icall
	}
}
 6cc:	ff 91       	pop	r31
 6ce:	ef 91       	pop	r30
 6d0:	bf 91       	pop	r27
 6d2:	af 91       	pop	r26
 6d4:	9f 91       	pop	r25
 6d6:	8f 91       	pop	r24
 6d8:	7f 91       	pop	r23
 6da:	6f 91       	pop	r22
 6dc:	5f 91       	pop	r21
 6de:	4f 91       	pop	r20
 6e0:	3f 91       	pop	r19
 6e2:	2f 91       	pop	r18
 6e4:	0f 90       	pop	r0
 6e6:	0f be       	out	0x3f, r0	; 63
 6e8:	0f 90       	pop	r0
 6ea:	1f 90       	pop	r1
 6ec:	18 95       	reti

000006ee <_exit>:
 6ee:	f8 94       	cli

000006f0 <__stop_program>:
 6f0:	ff cf       	rjmp	.-2      	; 0x6f0 <__stop_program>
