
Avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000055a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000055a  000005ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000610  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001dde  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000092a  00000000  00000000  00002562  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d4a  00000000  00000000  00002e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003d0  00000000  00000000  00003bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000655  00000000  00000000  00003fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000020f3  00000000  00000000  000045fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  000066f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e5       	ldi	r30, 0x5A	; 90
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 2b 01 	call	0x256	; 0x256 <main>
  7a:	0c 94 ab 02 	jmp	0x556	; 0x556 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_4bits_command>:
    } else {
        ret = lcd_4bit_set_cursor(Lcd, row, column);
        ret = lcd_4bit_send_char_data(Lcd, data);
    }
    return ret;
}
  82:	0f 93       	push	r16
  84:	1f 93       	push	r17
  86:	cf 93       	push	r28
  88:	8c 01       	movw	r16, r24
  8a:	c6 2f       	mov	r28, r22
  8c:	61 70       	andi	r22, 0x01	; 1
  8e:	08 96       	adiw	r24, 0x08	; 8
  90:	0e 94 9d 02 	call	0x53a	; 0x53a <Pin_write>
  94:	c1 fb       	bst	r28, 1
  96:	66 27       	eor	r22, r22
  98:	60 f9       	bld	r22, 0
  9a:	c8 01       	movw	r24, r16
  9c:	0c 96       	adiw	r24, 0x0c	; 12
  9e:	0e 94 9d 02 	call	0x53a	; 0x53a <Pin_write>
  a2:	c2 fb       	bst	r28, 2
  a4:	66 27       	eor	r22, r22
  a6:	60 f9       	bld	r22, 0
  a8:	c8 01       	movw	r24, r16
  aa:	40 96       	adiw	r24, 0x10	; 16
  ac:	0e 94 9d 02 	call	0x53a	; 0x53a <Pin_write>
  b0:	c3 fb       	bst	r28, 3
  b2:	66 27       	eor	r22, r22
  b4:	60 f9       	bld	r22, 0
  b6:	c8 01       	movw	r24, r16
  b8:	44 96       	adiw	r24, 0x14	; 20
  ba:	0e 94 9d 02 	call	0x53a	; 0x53a <Pin_write>
  be:	cf 91       	pop	r28
  c0:	1f 91       	pop	r17
  c2:	0f 91       	pop	r16
  c4:	08 95       	ret

000000c6 <lcd_4bits_send_enable>:
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	79 f0       	breq	.+30     	; 0xec <lcd_4bits_send_enable+0x26>
  ce:	ec 01       	movw	r28, r24
  d0:	24 96       	adiw	r28, 0x04	; 4
  d2:	61 e0       	ldi	r22, 0x01	; 1
  d4:	ce 01       	movw	r24, r28
  d6:	0e 94 9d 02 	call	0x53a	; 0x53a <Pin_write>
  da:	8d e0       	ldi	r24, 0x0D	; 13
  dc:	8a 95       	dec	r24
  de:	f1 f7       	brne	.-4      	; 0xdc <lcd_4bits_send_enable+0x16>
  e0:	00 00       	nop
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	ce 01       	movw	r24, r28
  e6:	0e 94 9d 02 	call	0x53a	; 0x53a <Pin_write>
  ea:	01 c0       	rjmp	.+2      	; 0xee <lcd_4bits_send_enable+0x28>
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <lcd_4bit_send_command>:
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	00 97       	sbiw	r24, 0x00	; 0
  fc:	b1 f0       	breq	.+44     	; 0x12a <lcd_4bit_send_command+0x36>
  fe:	16 2f       	mov	r17, r22
 100:	ec 01       	movw	r28, r24
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	0e 94 9d 02 	call	0x53a	; 0x53a <Pin_write>
 108:	61 2f       	mov	r22, r17
 10a:	62 95       	swap	r22
 10c:	6f 70       	andi	r22, 0x0F	; 15
 10e:	ce 01       	movw	r24, r28
 110:	0e 94 41 00 	call	0x82	; 0x82 <lcd_4bits_command>
 114:	ce 01       	movw	r24, r28
 116:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_4bits_send_enable>
 11a:	61 2f       	mov	r22, r17
 11c:	ce 01       	movw	r24, r28
 11e:	0e 94 41 00 	call	0x82	; 0x82 <lcd_4bits_command>
 122:	ce 01       	movw	r24, r28
 124:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_4bits_send_enable>
 128:	01 c0       	rjmp	.+2      	; 0x12c <lcd_4bit_send_command+0x38>
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	1f 91       	pop	r17
 132:	08 95       	ret

00000134 <lcd_4bit_initialize>:
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	00 97       	sbiw	r24, 0x00	; 0
 13c:	09 f4       	brne	.+2      	; 0x140 <lcd_4bit_initialize+0xc>
 13e:	4e c0       	rjmp	.+156    	; 0x1dc <lcd_4bit_initialize+0xa8>
 140:	ec 01       	movw	r28, r24
 142:	04 96       	adiw	r24, 0x04	; 4
 144:	0e 94 81 02 	call	0x502	; 0x502 <Pin_logic_init>
 148:	ce 01       	movw	r24, r28
 14a:	0e 94 81 02 	call	0x502	; 0x502 <Pin_logic_init>
 14e:	10 e0       	ldi	r17, 0x00	; 0
 150:	0c c0       	rjmp	.+24     	; 0x16a <lcd_4bit_initialize+0x36>
 152:	81 2f       	mov	r24, r17
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 96       	adiw	r24, 0x02	; 2
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	8c 0f       	add	r24, r28
 162:	9d 1f       	adc	r25, r29
 164:	0e 94 81 02 	call	0x502	; 0x502 <Pin_logic_init>
 168:	1f 5f       	subi	r17, 0xFF	; 255
 16a:	14 30       	cpi	r17, 0x04	; 4
 16c:	90 f3       	brcs	.-28     	; 0x152 <lcd_4bit_initialize+0x1e>
 16e:	8f e3       	ldi	r24, 0x3F	; 63
 170:	9c e9       	ldi	r25, 0x9C	; 156
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <lcd_4bit_initialize+0x3e>
 176:	00 c0       	rjmp	.+0      	; 0x178 <lcd_4bit_initialize+0x44>
 178:	00 00       	nop
 17a:	68 e3       	ldi	r22, 0x38	; 56
 17c:	ce 01       	movw	r24, r28
 17e:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_4bit_send_command>
 182:	8f e0       	ldi	r24, 0x0F	; 15
 184:	97 e2       	ldi	r25, 0x27	; 39
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_4bit_initialize+0x52>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_4bit_initialize+0x58>
 18c:	00 00       	nop
 18e:	68 e3       	ldi	r22, 0x38	; 56
 190:	ce 01       	movw	r24, r28
 192:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_4bit_send_command>
 196:	8b e2       	ldi	r24, 0x2B	; 43
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_4bit_initialize+0x66>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcd_4bit_initialize+0x6c>
 1a0:	00 00       	nop
 1a2:	68 e3       	ldi	r22, 0x38	; 56
 1a4:	ce 01       	movw	r24, r28
 1a6:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_4bit_send_command>
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	ce 01       	movw	r24, r28
 1ae:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_4bit_send_command>
 1b2:	62 e0       	ldi	r22, 0x02	; 2
 1b4:	ce 01       	movw	r24, r28
 1b6:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_4bit_send_command>
 1ba:	66 e0       	ldi	r22, 0x06	; 6
 1bc:	ce 01       	movw	r24, r28
 1be:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_4bit_send_command>
 1c2:	6c e0       	ldi	r22, 0x0C	; 12
 1c4:	ce 01       	movw	r24, r28
 1c6:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_4bit_send_command>
 1ca:	68 e2       	ldi	r22, 0x28	; 40
 1cc:	ce 01       	movw	r24, r28
 1ce:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_4bit_send_command>
 1d2:	60 e8       	ldi	r22, 0x80	; 128
 1d4:	ce 01       	movw	r24, r28
 1d6:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_4bit_send_command>
 1da:	01 c0       	rjmp	.+2      	; 0x1de <lcd_4bit_initialize+0xaa>
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	1f 91       	pop	r17
 1e4:	08 95       	ret

000001e6 <lcd_4bit_send_char_data>:
 1e6:	1f 93       	push	r17
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	00 97       	sbiw	r24, 0x00	; 0
 1ee:	b1 f0       	breq	.+44     	; 0x21c <lcd_4bit_send_char_data+0x36>
 1f0:	16 2f       	mov	r17, r22
 1f2:	ec 01       	movw	r28, r24
 1f4:	61 e0       	ldi	r22, 0x01	; 1
 1f6:	0e 94 9d 02 	call	0x53a	; 0x53a <Pin_write>
 1fa:	61 2f       	mov	r22, r17
 1fc:	62 95       	swap	r22
 1fe:	6f 70       	andi	r22, 0x0F	; 15
 200:	ce 01       	movw	r24, r28
 202:	0e 94 41 00 	call	0x82	; 0x82 <lcd_4bits_command>
 206:	ce 01       	movw	r24, r28
 208:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_4bits_send_enable>
 20c:	61 2f       	mov	r22, r17
 20e:	ce 01       	movw	r24, r28
 210:	0e 94 41 00 	call	0x82	; 0x82 <lcd_4bits_command>
 214:	ce 01       	movw	r24, r28
 216:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_4bits_send_enable>
 21a:	01 c0       	rjmp	.+2      	; 0x21e <lcd_4bit_send_char_data+0x38>
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	1f 91       	pop	r17
 224:	08 95       	ret

00000226 <lcd_4bit_send_string>:
 * @brief   Sends a string to the LCD in 4-bit mode.
 * @param   Lcd: Pointer to the lcd_4bit_mode structure.
 * @param   str: Pointer to the string to be sent to the LCD.
 * @return  Returns ROK if the string is sent successfully, otherwise NOK.
 */
Std_return lcd_4bit_send_string(lcd_4bit_mode  *Lcd, unsigned char *str) {
 226:	0f 93       	push	r16
 228:	1f 93       	push	r17
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	8c 01       	movw	r16, r24
 230:	eb 01       	movw	r28, r22
    Std_return ret = ROK;
    if (NULL == Lcd) {
 232:	89 2b       	or	r24, r25
 234:	51 f0       	breq	.+20     	; 0x24a <lcd_4bit_send_string+0x24>
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	04 c0       	rjmp	.+8      	; 0x242 <lcd_4bit_send_string+0x1c>
        ret = NOK;
    } else {
        while (*str) {
            ret = lcd_4bit_send_char_data(Lcd, *str++);
 23a:	21 96       	adiw	r28, 0x01	; 1
 23c:	c8 01       	movw	r24, r16
 23e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_4bit_send_char_data>
Std_return lcd_4bit_send_string(lcd_4bit_mode  *Lcd, unsigned char *str) {
    Std_return ret = ROK;
    if (NULL == Lcd) {
        ret = NOK;
    } else {
        while (*str) {
 242:	68 81       	ld	r22, Y
 244:	61 11       	cpse	r22, r1
 246:	f9 cf       	rjmp	.-14     	; 0x23a <lcd_4bit_send_string+0x14>
 248:	01 c0       	rjmp	.+2      	; 0x24c <lcd_4bit_send_string+0x26>
 * @return  Returns ROK if the string is sent successfully, otherwise NOK.
 */
Std_return lcd_4bit_send_string(lcd_4bit_mode  *Lcd, unsigned char *str) {
    Std_return ret = ROK;
    if (NULL == Lcd) {
        ret = NOK;
 24a:	81 e0       	ldi	r24, 0x01	; 1
        while (*str) {
            ret = lcd_4bit_send_char_data(Lcd, *str++);
        }
    }
    return ret;
}
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	1f 91       	pop	r17
 252:	0f 91       	pop	r16
 254:	08 95       	ret

00000256 <main>:



#include "ECU/Lcd/lcd.h"

int main(void) {
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	cd b7       	in	r28, 0x3d	; 61
 25c:	de b7       	in	r29, 0x3e	; 62
 25e:	68 97       	sbiw	r28, 0x18	; 24
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	f8 94       	cli
 264:	de bf       	out	0x3e, r29	; 62
 266:	0f be       	out	0x3f, r0	; 63
 268:	cd bf       	out	0x3d, r28	; 61
	lcd_4bit_mode lcd;
	lcd.lcd_data[0].direction=Output;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	8b 87       	std	Y+11, r24	; 0x0b
	lcd.lcd_data[0].pin=Low;
 26e:	1a 86       	std	Y+10, r1	; 0x0a
	lcd.lcd_data[0].port=A;
 270:	19 86       	std	Y+9, r1	; 0x09
	lcd.lcd_data[0].pin=0;
	
	lcd.lcd_data[1].direction=Output;
 272:	8f 87       	std	Y+15, r24	; 0x0f
	lcd.lcd_data[1].pin=Low;
	lcd.lcd_data[1].port=A;
 274:	1d 86       	std	Y+13, r1	; 0x0d
	lcd.lcd_data[1].pin=1;
 276:	8e 87       	std	Y+14, r24	; 0x0e
	
	lcd.lcd_data[2].direction=Output;
 278:	8b 8b       	std	Y+19, r24	; 0x13
	lcd.lcd_data[2].pin=Low;
	lcd.lcd_data[2].port=A;
 27a:	19 8a       	std	Y+17, r1	; 0x11
	lcd.lcd_data[2].pin=2;
 27c:	92 e0       	ldi	r25, 0x02	; 2
 27e:	9a 8b       	std	Y+18, r25	; 0x12
	
	lcd.lcd_data[3].direction=Output;
 280:	8f 8b       	std	Y+23, r24	; 0x17
	lcd.lcd_data[3].pin=Low;
	lcd.lcd_data[3].port=A;
 282:	1d 8a       	std	Y+21, r1	; 0x15
	lcd.lcd_data[3].pin=3;
 284:	93 e0       	ldi	r25, 0x03	; 3
 286:	9e 8b       	std	Y+22, r25	; 0x16
	
	lcd.lcd_en.direction=Output;
 288:	8f 83       	std	Y+7, r24	; 0x07
	lcd.lcd_en.pin=Low;
	lcd.lcd_en.port=A;
 28a:	1d 82       	std	Y+5, r1	; 0x05
	lcd.lcd_en.pin=4;
 28c:	94 e0       	ldi	r25, 0x04	; 4
 28e:	9e 83       	std	Y+6, r25	; 0x06
	
	lcd.lcd_rs.direction=Output;
 290:	8b 83       	std	Y+3, r24	; 0x03
	lcd.lcd_rs.pin=Low;
	lcd.lcd_rs.port=A;
 292:	19 82       	std	Y+1, r1	; 0x01
	lcd.lcd_rs.pin=5;
 294:	85 e0       	ldi	r24, 0x05	; 5
 296:	8a 83       	std	Y+2, r24	; 0x02
	
	lcd_4bit_initialize(&lcd);
 298:	ce 01       	movw	r24, r28
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_4bit_initialize>
	lcd_4bit_send_string(&lcd,(unsigned char *)"Learn in depth");
 2a0:	60 e6       	ldi	r22, 0x60	; 96
 2a2:	70 e0       	ldi	r23, 0x00	; 0
 2a4:	ce 01       	movw	r24, r28
 2a6:	01 96       	adiw	r24, 0x01	; 1
 2a8:	0e 94 13 01 	call	0x226	; 0x226 <lcd_4bit_send_string>
 2ac:	ff cf       	rjmp	.-2      	; 0x2ac <main+0x56>

000002ae <Pin_Set>:
		default:
		return NOK;
	}

	return ROK;
}
 2ae:	fc 01       	movw	r30, r24
 2b0:	89 2b       	or	r24, r25
 2b2:	09 f4       	brne	.+2      	; 0x2b6 <Pin_Set+0x8>
 2b4:	45 c0       	rjmp	.+138    	; 0x340 <Pin_Set+0x92>
 2b6:	80 81       	ld	r24, Z
 2b8:	81 30       	cpi	r24, 0x01	; 1
 2ba:	a9 f0       	breq	.+42     	; 0x2e6 <Pin_Set+0x38>
 2bc:	28 f0       	brcs	.+10     	; 0x2c8 <Pin_Set+0x1a>
 2be:	82 30       	cpi	r24, 0x02	; 2
 2c0:	09 f1       	breq	.+66     	; 0x304 <Pin_Set+0x56>
 2c2:	83 30       	cpi	r24, 0x03	; 3
 2c4:	71 f1       	breq	.+92     	; 0x322 <Pin_Set+0x74>
 2c6:	3e c0       	rjmp	.+124    	; 0x344 <Pin_Set+0x96>
 2c8:	2b b3       	in	r18, 0x1b	; 27
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	01 80       	ldd	r0, Z+1	; 0x01
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <Pin_Set+0x28>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	0a 94       	dec	r0
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <Pin_Set+0x24>
 2da:	82 2b       	or	r24, r18
 2dc:	8b bb       	out	0x1b, r24	; 27
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	83 83       	std	Z+3, r24	; 0x03
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	08 95       	ret
 2e6:	28 b3       	in	r18, 0x18	; 24
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	01 80       	ldd	r0, Z+1	; 0x01
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <Pin_Set+0x46>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	0a 94       	dec	r0
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <Pin_Set+0x42>
 2f8:	82 2b       	or	r24, r18
 2fa:	88 bb       	out	0x18, r24	; 24
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	83 83       	std	Z+3, r24	; 0x03
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	08 95       	ret
 304:	25 b3       	in	r18, 0x15	; 21
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	01 80       	ldd	r0, Z+1	; 0x01
 30c:	02 c0       	rjmp	.+4      	; 0x312 <Pin_Set+0x64>
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	0a 94       	dec	r0
 314:	e2 f7       	brpl	.-8      	; 0x30e <Pin_Set+0x60>
 316:	82 2b       	or	r24, r18
 318:	85 bb       	out	0x15, r24	; 21
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	83 83       	std	Z+3, r24	; 0x03
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	08 95       	ret
 322:	22 b3       	in	r18, 0x12	; 18
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	01 80       	ldd	r0, Z+1	; 0x01
 32a:	02 c0       	rjmp	.+4      	; 0x330 <Pin_Set+0x82>
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	0a 94       	dec	r0
 332:	e2 f7       	brpl	.-8      	; 0x32c <Pin_Set+0x7e>
 334:	82 2b       	or	r24, r18
 336:	82 bb       	out	0x12, r24	; 18
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	83 83       	std	Z+3, r24	; 0x03
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	08 95       	ret
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	08 95       	ret
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	08 95       	ret

00000348 <Pin_Clear>:
 348:	fc 01       	movw	r30, r24
 34a:	89 2b       	or	r24, r25
 34c:	09 f4       	brne	.+2      	; 0x350 <Pin_Clear+0x8>
 34e:	45 c0       	rjmp	.+138    	; 0x3da <Pin_Clear+0x92>
 350:	80 81       	ld	r24, Z
 352:	81 30       	cpi	r24, 0x01	; 1
 354:	a9 f0       	breq	.+42     	; 0x380 <Pin_Clear+0x38>
 356:	28 f0       	brcs	.+10     	; 0x362 <Pin_Clear+0x1a>
 358:	82 30       	cpi	r24, 0x02	; 2
 35a:	09 f1       	breq	.+66     	; 0x39e <Pin_Clear+0x56>
 35c:	83 30       	cpi	r24, 0x03	; 3
 35e:	71 f1       	breq	.+92     	; 0x3bc <Pin_Clear+0x74>
 360:	3e c0       	rjmp	.+124    	; 0x3de <Pin_Clear+0x96>
 362:	2b b3       	in	r18, 0x1b	; 27
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	01 80       	ldd	r0, Z+1	; 0x01
 36a:	02 c0       	rjmp	.+4      	; 0x370 <Pin_Clear+0x28>
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	0a 94       	dec	r0
 372:	e2 f7       	brpl	.-8      	; 0x36c <Pin_Clear+0x24>
 374:	80 95       	com	r24
 376:	82 23       	and	r24, r18
 378:	8b bb       	out	0x1b, r24	; 27
 37a:	13 82       	std	Z+3, r1	; 0x03
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	08 95       	ret
 380:	28 b3       	in	r18, 0x18	; 24
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	01 80       	ldd	r0, Z+1	; 0x01
 388:	02 c0       	rjmp	.+4      	; 0x38e <Pin_Clear+0x46>
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	0a 94       	dec	r0
 390:	e2 f7       	brpl	.-8      	; 0x38a <Pin_Clear+0x42>
 392:	80 95       	com	r24
 394:	82 23       	and	r24, r18
 396:	88 bb       	out	0x18, r24	; 24
 398:	13 82       	std	Z+3, r1	; 0x03
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	08 95       	ret
 39e:	25 b3       	in	r18, 0x15	; 21
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	01 80       	ldd	r0, Z+1	; 0x01
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <Pin_Clear+0x64>
 3a8:	88 0f       	add	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	0a 94       	dec	r0
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <Pin_Clear+0x60>
 3b0:	80 95       	com	r24
 3b2:	82 23       	and	r24, r18
 3b4:	85 bb       	out	0x15, r24	; 21
 3b6:	13 82       	std	Z+3, r1	; 0x03
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	08 95       	ret
 3bc:	22 b3       	in	r18, 0x12	; 18
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	01 80       	ldd	r0, Z+1	; 0x01
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <Pin_Clear+0x82>
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	0a 94       	dec	r0
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <Pin_Clear+0x7e>
 3ce:	80 95       	com	r24
 3d0:	82 23       	and	r24, r18
 3d2:	82 bb       	out	0x12, r24	; 18
 3d4:	13 82       	std	Z+3, r1	; 0x03
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	08 95       	ret
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	08 95       	ret
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	08 95       	ret

000003e2 <Pin_Direction>:
 3e2:	fc 01       	movw	r30, r24
 3e4:	89 2b       	or	r24, r25
 3e6:	09 f4       	brne	.+2      	; 0x3ea <Pin_Direction+0x8>
 3e8:	84 c0       	rjmp	.+264    	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 3ea:	82 81       	ldd	r24, Z+2	; 0x02
 3ec:	81 11       	cpse	r24, r1
 3ee:	41 c0       	rjmp	.+130    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 3f0:	80 81       	ld	r24, Z
 3f2:	81 30       	cpi	r24, 0x01	; 1
 3f4:	a1 f0       	breq	.+40     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 3f6:	28 f0       	brcs	.+10     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3f8:	82 30       	cpi	r24, 0x02	; 2
 3fa:	f9 f0       	breq	.+62     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 3fc:	83 30       	cpi	r24, 0x03	; 3
 3fe:	59 f1       	breq	.+86     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 400:	7a c0       	rjmp	.+244    	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 402:	2a b3       	in	r18, 0x1a	; 26
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	01 80       	ldd	r0, Z+1	; 0x01
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	0a 94       	dec	r0
 412:	e2 f7       	brpl	.-8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 414:	80 95       	com	r24
 416:	82 23       	and	r24, r18
 418:	8a bb       	out	0x1a, r24	; 26
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	08 95       	ret
 41e:	27 b3       	in	r18, 0x17	; 23
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	01 80       	ldd	r0, Z+1	; 0x01
 426:	02 c0       	rjmp	.+4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 428:	88 0f       	add	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	0a 94       	dec	r0
 42e:	e2 f7       	brpl	.-8      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 430:	80 95       	com	r24
 432:	82 23       	and	r24, r18
 434:	87 bb       	out	0x17, r24	; 23
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	08 95       	ret
 43a:	24 b3       	in	r18, 0x14	; 20
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	01 80       	ldd	r0, Z+1	; 0x01
 442:	02 c0       	rjmp	.+4      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	0a 94       	dec	r0
 44a:	e2 f7       	brpl	.-8      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 44c:	80 95       	com	r24
 44e:	82 23       	and	r24, r18
 450:	84 bb       	out	0x14, r24	; 20
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	08 95       	ret
 456:	21 b3       	in	r18, 0x11	; 17
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	01 80       	ldd	r0, Z+1	; 0x01
 45e:	02 c0       	rjmp	.+4      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	0a 94       	dec	r0
 466:	e2 f7       	brpl	.-8      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 468:	80 95       	com	r24
 46a:	82 23       	and	r24, r18
 46c:	81 bb       	out	0x11, r24	; 17
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	08 95       	ret
 472:	81 30       	cpi	r24, 0x01	; 1
 474:	09 f0       	breq	.+2      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 476:	41 c0       	rjmp	.+130    	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
 478:	80 81       	ld	r24, Z
 47a:	81 30       	cpi	r24, 0x01	; 1
 47c:	99 f0       	breq	.+38     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 47e:	28 f0       	brcs	.+10     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 480:	82 30       	cpi	r24, 0x02	; 2
 482:	e9 f0       	breq	.+58     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 484:	83 30       	cpi	r24, 0x03	; 3
 486:	41 f1       	breq	.+80     	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
 488:	3a c0       	rjmp	.+116    	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 48a:	2a b3       	in	r18, 0x1a	; 26
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	01 80       	ldd	r0, Z+1	; 0x01
 492:	02 c0       	rjmp	.+4      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	0a 94       	dec	r0
 49a:	e2 f7       	brpl	.-8      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 49c:	82 2b       	or	r24, r18
 49e:	8a bb       	out	0x1a, r24	; 26
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	08 95       	ret
 4a4:	27 b3       	in	r18, 0x17	; 23
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	01 80       	ldd	r0, Z+1	; 0x01
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	0a 94       	dec	r0
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4b6:	82 2b       	or	r24, r18
 4b8:	87 bb       	out	0x17, r24	; 23
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	08 95       	ret
 4be:	24 b3       	in	r18, 0x14	; 20
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	01 80       	ldd	r0, Z+1	; 0x01
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	0a 94       	dec	r0
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4d0:	82 2b       	or	r24, r18
 4d2:	84 bb       	out	0x14, r24	; 20
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	08 95       	ret
 4d8:	21 b3       	in	r18, 0x11	; 17
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	01 80       	ldd	r0, Z+1	; 0x01
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
 4e2:	88 0f       	add	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	0a 94       	dec	r0
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 4ea:	82 2b       	or	r24, r18
 4ec:	81 bb       	out	0x11, r24	; 17
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	08 95       	ret
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	08 95       	ret
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	08 95       	ret
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	08 95       	ret
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	08 95       	ret

00000502 <Pin_logic_init>:
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
 506:	ec 01       	movw	r28, r24
 508:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <Pin_Direction>
 50c:	20 97       	sbiw	r28, 0x00	; 0
 50e:	79 f0       	breq	.+30     	; 0x52e <Pin_logic_init+0x2c>
 510:	8b 81       	ldd	r24, Y+3	; 0x03
 512:	81 11       	cpse	r24, r1
 514:	05 c0       	rjmp	.+10     	; 0x520 <Pin_logic_init+0x1e>
 516:	ce 01       	movw	r24, r28
 518:	0e 94 a4 01 	call	0x348	; 0x348 <Pin_Clear>
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	0a c0       	rjmp	.+20     	; 0x534 <Pin_logic_init+0x32>
 520:	81 30       	cpi	r24, 0x01	; 1
 522:	39 f4       	brne	.+14     	; 0x532 <Pin_logic_init+0x30>
 524:	ce 01       	movw	r24, r28
 526:	0e 94 57 01 	call	0x2ae	; 0x2ae <Pin_Set>
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	03 c0       	rjmp	.+6      	; 0x534 <Pin_logic_init+0x32>
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	01 c0       	rjmp	.+2      	; 0x534 <Pin_logic_init+0x32>
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	08 95       	ret

0000053a <Pin_write>:
Std_return Pin_write(Pin_config_t *pin,Logic_t volt){
	if (!pin ) {
 53a:	00 97       	sbiw	r24, 0x00	; 0
 53c:	51 f0       	breq	.+20     	; 0x552 <Pin_write+0x18>
		return NOK;
	}
	if(volt){
 53e:	66 23       	and	r22, r22
 540:	21 f0       	breq	.+8      	; 0x54a <Pin_write+0x10>
		Pin_Set(pin);
 542:	0e 94 57 01 	call	0x2ae	; 0x2ae <Pin_Set>
	}else
	{
		Pin_Clear(pin);
	}
	return ROK;
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	08 95       	ret
	}
	if(volt){
		Pin_Set(pin);
	}else
	{
		Pin_Clear(pin);
 54a:	0e 94 a4 01 	call	0x348	; 0x348 <Pin_Clear>
	}
	return ROK;
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	08 95       	ret

	return ROK;
}
Std_return Pin_write(Pin_config_t *pin,Logic_t volt){
	if (!pin ) {
		return NOK;
 552:	81 e0       	ldi	r24, 0x01	; 1
	}else
	{
		Pin_Clear(pin);
	}
	return ROK;
}
 554:	08 95       	ret

00000556 <_exit>:
 556:	f8 94       	cli

00000558 <__stop_program>:
 558:	ff cf       	rjmp	.-2      	; 0x558 <__stop_program>
