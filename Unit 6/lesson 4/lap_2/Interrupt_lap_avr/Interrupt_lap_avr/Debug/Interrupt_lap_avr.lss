
Interrupt_lap_avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000156  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000185  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000193  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000799  00000000  00000000  000001bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000506  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e6  00000000  00000000  00000e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00001040  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  0000121e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001267  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000d4  000000d4  00000148  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001280  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_1 0000002a  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000028  00000096  00000096  0000010a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_fini 00000002  000000dc  000000dc  00000150  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_funcs_on_exit 00000002  000000de  000000de  00000152  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_simulator_exit 00000002  000000e0  000000e0  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.exit    00000016  000000be  000000be  00000132  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text._Exit   00000004  000000d8  000000d8  0000014c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <_etext>
   8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
   c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  10:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  14:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  18:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  1c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  20:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  24:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  28:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  30:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  34:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  38:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  3c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  40:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  44:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  48:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  4c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  50:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000000d4 <__bad_interrupt>:
  d4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_1:

0000006c <__vector_1>:
#define F_CPU 8000000ULL
#include <xc.h>
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
ISR (INT0_vect){
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
  78:	9f 93       	push	r25
	  PORTA ^= (1 << PA1);
  7a:	9b b3       	in	r25, 0x1b	; 27
  7c:	82 e0       	ldi	r24, 0x02	; 2
  7e:	89 27       	eor	r24, r25
  80:	8b bb       	out	0x1b, r24	; 27
	
		GICR|=(1<<INTF0);
  82:	8b b7       	in	r24, 0x3b	; 59
  84:	80 64       	ori	r24, 0x40	; 64
  86:	8b bf       	out	0x3b, r24	; 59
}
  88:	9f 91       	pop	r25
  8a:	8f 91       	pop	r24
  8c:	0f 90       	pop	r0
  8e:	0f be       	out	0x3f, r0	; 63
  90:	0f 90       	pop	r0
  92:	1f 90       	pop	r1
  94:	18 95       	reti

Disassembly of section .text.main:

00000096 <main>:
int main(void)
{
	sei();
  96:	78 94       	sei
	DDRD&=~(1<<2);  //pin D2 input
  98:	81 b3       	in	r24, 0x11	; 17
  9a:	8b 7f       	andi	r24, 0xFB	; 251
  9c:	81 bb       	out	0x11, r24	; 17
	DDRA|=(1<<DDA1); //pin A1 output
  9e:	8a b3       	in	r24, 0x1a	; 26
  a0:	82 60       	ori	r24, 0x02	; 2
  a2:	8a bb       	out	0x1a, r24	; 26
	
	PORTD&=~(1<<2); //pull up resistor off  //if the pin was output 1 =5v and 0 =ground
  a4:	82 b3       	in	r24, 0x12	; 18
  a6:	8b 7f       	andi	r24, 0xFB	; 251
  a8:	82 bb       	out	0x12, r24	; 18
	
	MCUCR|=(1<<ISC01);
  aa:	85 b7       	in	r24, 0x35	; 53
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	85 bf       	out	0x35, r24	; 53
	MCUCR&=~(1<<ISC00);
  b0:	85 b7       	in	r24, 0x35	; 53
  b2:	8e 7f       	andi	r24, 0xFE	; 254
  b4:	85 bf       	out	0x35, r24	; 53
	
	GICR|=(1<<INT0);
  b6:	8b b7       	in	r24, 0x3b	; 59
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	8b bf       	out	0x3b, r24	; 59
  bc:	ff cf       	rjmp	.-2      	; 0xbc <main+0x26>

Disassembly of section .text.__dummy_fini:

000000dc <_fini>:
  dc:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000de <__funcs_on_exit>:
  de:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000e0 <__simulator_exit>:
  e0:	08 95       	ret

Disassembly of section .text.exit:

000000be <exit>:
  be:	ec 01       	movw	r28, r24
  c0:	0e 94 6f 00 	call	0xde	; 0xde <__funcs_on_exit>
  c4:	0e 94 6e 00 	call	0xdc	; 0xdc <_fini>
  c8:	ce 01       	movw	r24, r28
  ca:	0e 94 70 00 	call	0xe0	; 0xe0 <__simulator_exit>
  ce:	ce 01       	movw	r24, r28
  d0:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Exit>

Disassembly of section .text._Exit:

000000d8 <_Exit>:
  d8:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
