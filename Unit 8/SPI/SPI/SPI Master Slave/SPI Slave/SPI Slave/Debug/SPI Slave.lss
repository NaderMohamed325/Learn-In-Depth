
SPI Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005da  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056d  00000000  00000000  0000076e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000225  00000000  00000000  00000cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000f00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ff  00000000  00000000  00000f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003f  00000000  00000000  00001243  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001282  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 44 00 	call	0x88	; 0x88 <main>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_SlaveInit>:
#define SCK 7 

void SPI_SlaveInit(void)
{
	/* Set MISO output */
	DDRB |= (1<<MISO);
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	87 bb       	out	0x17, r24	; 23
	/* Set MOSI, SCK and SS input*/
	DDRB &= ~(1<<MOSI) & ~(1<<SCK) & ~(1<<SS);
  72:	87 b3       	in	r24, 0x17	; 23
  74:	8f 74       	andi	r24, 0x4F	; 79
  76:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Slave, set clock rate fck/16 */
	SPCR = (1<<SPE);
  78:	80 e4       	ldi	r24, 0x40	; 64
  7a:	8d b9       	out	0x0d, r24	; 13
  7c:	08 95       	ret

0000007e <SPI_SlaveRecieve>:
}
unsigned char SPI_SlaveRecieve(unsigned char cData)
{
	/* Start transmission */
	SPDR = cData;
  7e:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
  80:	77 9b       	sbis	0x0e, 7	; 14
  82:	fe cf       	rjmp	.-4      	; 0x80 <SPI_SlaveRecieve+0x2>
	return SPDR;
  84:	8f b1       	in	r24, 0x0f	; 15
}
  86:	08 95       	ret

00000088 <main>:

int main(void)
{
    /* Replace with your application code */
	unsigned char ch = 255;
	DDRA = 0xFF;
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	8a bb       	out	0x1a, r24	; 26
	SPI_SlaveInit();
  8c:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_SlaveInit>
	for (ch = 255; ch >= 0; ch--)
  90:	cf ef       	ldi	r28, 0xFF	; 255
	{
		PORTA = SPI_SlaveRecieve(ch);
  92:	8c 2f       	mov	r24, r28
  94:	0e 94 3f 00 	call	0x7e	; 0x7e <SPI_SlaveRecieve>
  98:	8b bb       	out	0x1b, r24	; 27
{
    /* Replace with your application code */
	unsigned char ch = 255;
	DDRA = 0xFF;
	SPI_SlaveInit();
	for (ch = 255; ch >= 0; ch--)
  9a:	c1 50       	subi	r28, 0x01	; 1
  9c:	fa cf       	rjmp	.-12     	; 0x92 <main+0xa>

0000009e <_exit>:
  9e:	f8 94       	cli

000000a0 <__stop_program>:
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__stop_program>
