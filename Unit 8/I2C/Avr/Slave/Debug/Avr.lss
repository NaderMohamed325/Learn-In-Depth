
Avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b4  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ec  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000411  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  000013d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ab  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000dd  00000000  00000000  00001863  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00001940  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "MCAL/I2C/I2C.h"

int main(void) {
	uint8_t receivedData;

	I2C_SlaveInit(0x10); // Initialize I2C as slave with address 0x10
  82:	80 e1       	ldi	r24, 0x10	; 16
  84:	0e 94 4c 00 	call	0x98	; 0x98 <I2C_SlaveInit>

	while (1) {
		I2C_SlaveListen(); // Listen for I2C requests
  88:	0e 94 51 00 	call	0xa2	; 0xa2 <I2C_SlaveListen>

		receivedData = I2C_SlaveReceive(); // Receive data from master
  8c:	0e 94 55 00 	call	0xaa	; 0xaa <I2C_SlaveReceive>

		I2C_SlaveTransmit(receivedData + 1); // Transmit processed data back to master
  90:	8f 5f       	subi	r24, 0xFF	; 255
  92:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_SlaveTransmit>
  96:	f8 cf       	rjmp	.-16     	; 0x88 <main+0x6>

00000098 <I2C_SlaveInit>:
/**
 * @brief Initialize I2C (TWI) interface in slave mode
 * @param slaveAddress The address of the slave device
 */
void I2C_SlaveInit(uint8_t slaveAddress) {
    TWAR = (slaveAddress << 1); // Set slave address (shifted left by 1)
  98:	88 0f       	add	r24, r24
  9a:	82 b9       	out	0x02, r24	; 2
    TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWINT); // Enable TWI, ACK, and interrupt
  9c:	84 ec       	ldi	r24, 0xC4	; 196
  9e:	86 bf       	out	0x36, r24	; 54
  a0:	08 95       	ret

000000a2 <I2C_SlaveListen>:

/**
 * @brief Listen for incoming I2C requests in slave mode
 */
void I2C_SlaveListen(void) {
    while (!(TWCR & (1 << TWINT))); // Wait for TWINT flag to be set
  a2:	06 b6       	in	r0, 0x36	; 54
  a4:	07 fe       	sbrs	r0, 7
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <I2C_SlaveListen>
}
  a8:	08 95       	ret

000000aa <I2C_SlaveReceive>:
/**
 * @brief Receive data from I2C bus in slave mode
 * @return The received data byte
 */
uint8_t I2C_SlaveReceive(void) {
    TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN); // Clear TWINT, enable ACK
  aa:	84 ec       	ldi	r24, 0xC4	; 196
  ac:	86 bf       	out	0x36, r24	; 54
    while (!(TWCR & (1 << TWINT))); // Wait for TWINT flag to be set
  ae:	06 b6       	in	r0, 0x36	; 54
  b0:	07 fe       	sbrs	r0, 7
  b2:	fd cf       	rjmp	.-6      	; 0xae <I2C_SlaveReceive+0x4>
    return TWDR; // Return received data
  b4:	83 b1       	in	r24, 0x03	; 3
}
  b6:	08 95       	ret

000000b8 <I2C_SlaveTransmit>:
/**
 * @brief Transmit data over I2C bus in slave mode
 * @param data The data byte to be transmitted
 */
void I2C_SlaveTransmit(uint8_t data) {
    TWDR = data; // Load data into TWDR register
  b8:	83 b9       	out	0x03, r24	; 3
    TWCR = (1 << TWINT) | (1 << TWEN); // Clear TWINT to start transmission
  ba:	84 e8       	ldi	r24, 0x84	; 132
  bc:	86 bf       	out	0x36, r24	; 54
    while (!(TWCR & (1 << TWINT))); // Wait for TWINT flag to be set
  be:	06 b6       	in	r0, 0x36	; 54
  c0:	07 fe       	sbrs	r0, 7
  c2:	fd cf       	rjmp	.-6      	; 0xbe <I2C_SlaveTransmit+0x6>
}
  c4:	08 95       	ret

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
